{
  "address": "0x63db2F8F5bdA33e738B25142F2375D7161478e4b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "renderSVG1",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingTokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVG2",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "instrumentId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "underlyingAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "instrumentExpiration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "instrumentStrike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transfers",
          "type": "uint256"
        }
      ],
      "name": "tokenURIERC721",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x84770415b4438f8bc3b361b36ce90e873fc272b908076f4d41ceb99f7a230a2a",
  "receipt": {
    "to": null,
    "from": "0x1cAA0034b17786E18D94Ca176b1F8ec3F7972908",
    "contractAddress": "0x63db2F8F5bdA33e738B25142F2375D7161478e4b",
    "transactionIndex": 175,
    "gasUsed": "2299300",
    "logsBloom": "0x
    "blockHash": "0xe0014ee7463c13806fb97668913099c0d529a1bbbf59e5940599eb7828175535",
    "transactionHash": "0x84770415b4438f8bc3b361b36ce90e873fc272b908076f4d41ceb99f7a230a2a",
    "logs": [],
    "blockNumber": 15394753,
    "cumulativeGasUsed": "16957484",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "27cdac36318da08ab52a4db662ee1263",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"renderSVG1\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVG2\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instrumentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"instrumentExpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"instrumentStrike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfers\",\"type\":\"uint256\"}],\"name\":\"tokenURIERC721\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract implements some ERC721 / for hook instruments.\",\"kind\":\"dev\",\"methods\":{\"tokenURIERC721(uint256,address,uint256,uint256,uint256,uint256)\":{\"details\":\"this is a basic tokenURI based on the loot contract for an ERC721 (ripped off from LOOT PROJECT)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/TokenURI.sol\":\"TokenURI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5efa2a2ed44af15fd5bec8c43b45cb26fe6cb68671fea151e6afcfed66ed2672\",\"license\":\"MIT\"},\"src/lib/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n  uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n  uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n  uint256 constant SECONDS_PER_MINUTE = 60;\\n  int256 constant OFFSET19700101 = 2440588;\\n\\n  uint256 constant DOW_MON = 1;\\n  uint256 constant DOW_TUE = 2;\\n  uint256 constant DOW_WED = 3;\\n  uint256 constant DOW_THU = 4;\\n  uint256 constant DOW_FRI = 5;\\n  uint256 constant DOW_SAT = 6;\\n  uint256 constant DOW_SUN = 7;\\n\\n  // ------------------------------------------------------------------------\\n  // Calculate the number of days from 1970/01/01 to year/month/day using\\n  // the date conversion algorithm from\\n  //   https://aa.usno.navy.mil/faq/JD_formula.html\\n  // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n  //\\n  // days = day\\n  //      - 32075\\n  //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n  //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n  //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n  //      - offset\\n  // ------------------------------------------------------------------------\\n  function _daysFromDate(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day\\n  ) internal pure returns (uint256 _days) {\\n    require(year >= 1970);\\n    int256 _year = int256(year);\\n    int256 _month = int256(month);\\n    int256 _day = int256(day);\\n\\n    int256 __days = _day -\\n      32075 +\\n      (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n      4 +\\n      (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n      12 -\\n      (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n      4 -\\n      OFFSET19700101;\\n\\n    _days = uint256(__days);\\n  }\\n\\n  // ------------------------------------------------------------------------\\n  // Calculate year/month/day from the number of days since 1970/01/01 using\\n  // the date conversion algorithm from\\n  //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n  // and adding the offset 2440588 so that 1970/01/01 is day 0\\n  //\\n  // int L = days + 68569 + offset\\n  // int N = 4 * L / 146097\\n  // L = L - (146097 * N + 3) / 4\\n  // year = 4000 * (L + 1) / 1461001\\n  // L = L - 1461 * year / 4 + 31\\n  // month = 80 * L / 2447\\n  // dd = L - 2447 * month / 80\\n  // L = month / 11\\n  // month = month + 2 - 12 * L\\n  // year = 100 * (N - 49) + year + L\\n  // ------------------------------------------------------------------------\\n  function _daysToDate(uint256 _days)\\n    internal\\n    pure\\n    returns (\\n      uint256 year,\\n      uint256 month,\\n      uint256 day\\n    )\\n  {\\n    int256 __days = int256(_days);\\n\\n    int256 L = __days + 68569 + OFFSET19700101;\\n    int256 N = (4 * L) / 146097;\\n    L = L - (146097 * N + 3) / 4;\\n    int256 _year = (4000 * (L + 1)) / 1461001;\\n    L = L - (1461 * _year) / 4 + 31;\\n    int256 _month = (80 * L) / 2447;\\n    int256 _day = L - (2447 * _month) / 80;\\n    L = _month / 11;\\n    _month = _month + 2 - 12 * L;\\n    _year = 100 * (N - 49) + _year + L;\\n\\n    year = uint256(_year);\\n    month = uint256(_month);\\n    day = uint256(_day);\\n  }\\n\\n  function timestampFromDate(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day\\n  ) internal pure returns (uint256 timestamp) {\\n    timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n  }\\n\\n  function timestampFromDateTime(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day,\\n    uint256 hour,\\n    uint256 minute,\\n    uint256 second\\n  ) internal pure returns (uint256 timestamp) {\\n    timestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      hour *\\n      SECONDS_PER_HOUR +\\n      minute *\\n      SECONDS_PER_MINUTE +\\n      second;\\n  }\\n\\n  function timestampToDate(uint256 timestamp)\\n    internal\\n    pure\\n    returns (\\n      uint256 year,\\n      uint256 month,\\n      uint256 day\\n    )\\n  {\\n    (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function timestampToDateTime(uint256 timestamp)\\n    internal\\n    pure\\n    returns (\\n      uint256 year,\\n      uint256 month,\\n      uint256 day,\\n      uint256 hour,\\n      uint256 minute,\\n      uint256 second\\n    )\\n  {\\n    (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    uint256 secs = timestamp % SECONDS_PER_DAY;\\n    hour = secs / SECONDS_PER_HOUR;\\n    secs = secs % SECONDS_PER_HOUR;\\n    minute = secs / SECONDS_PER_MINUTE;\\n    second = secs % SECONDS_PER_MINUTE;\\n  }\\n\\n  function isValidDate(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day\\n  ) internal pure returns (bool valid) {\\n    if (year >= 1970 && month > 0 && month <= 12) {\\n      uint256 daysInMonth = _getDaysInMonth(year, month);\\n      if (day > 0 && day <= daysInMonth) {\\n        valid = true;\\n      }\\n    }\\n  }\\n\\n  function isValidDateTime(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day,\\n    uint256 hour,\\n    uint256 minute,\\n    uint256 second\\n  ) internal pure returns (bool valid) {\\n    if (isValidDate(year, month, day)) {\\n      if (hour < 24 && minute < 60 && second < 60) {\\n        valid = true;\\n      }\\n    }\\n  }\\n\\n  function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n    (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    leapYear = _isLeapYear(year);\\n  }\\n\\n  function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n    leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n  }\\n\\n  function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n    weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n  }\\n\\n  function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n    weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n  }\\n\\n  function getDaysInMonth(uint256 timestamp)\\n    internal\\n    pure\\n    returns (uint256 daysInMonth)\\n  {\\n    (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    daysInMonth = _getDaysInMonth(year, month);\\n  }\\n\\n  function _getDaysInMonth(uint256 year, uint256 month)\\n    internal\\n    pure\\n    returns (uint256 daysInMonth)\\n  {\\n    if (\\n      month == 1 ||\\n      month == 3 ||\\n      month == 5 ||\\n      month == 7 ||\\n      month == 8 ||\\n      month == 10 ||\\n      month == 12\\n    ) {\\n      daysInMonth = 31;\\n    } else if (month != 2) {\\n      daysInMonth = 30;\\n    } else {\\n      daysInMonth = _isLeapYear(year) ? 29 : 28;\\n    }\\n  }\\n\\n  // 1 = Monday, 7 = Sunday\\n  function getDayOfWeek(uint256 timestamp)\\n    internal\\n    pure\\n    returns (uint256 dayOfWeek)\\n  {\\n    uint256 _days = timestamp / SECONDS_PER_DAY;\\n    dayOfWeek = ((_days + 3) % 7) + 1;\\n  }\\n\\n  function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n    (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n    (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n    (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n    uint256 secs = timestamp % SECONDS_PER_DAY;\\n    hour = secs / SECONDS_PER_HOUR;\\n  }\\n\\n  function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n    uint256 secs = timestamp % SECONDS_PER_HOUR;\\n    minute = secs / SECONDS_PER_MINUTE;\\n  }\\n\\n  function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n    second = timestamp % SECONDS_PER_MINUTE;\\n  }\\n\\n  function addYears(uint256 timestamp, uint256 _years)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    year += _years;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addMonths(uint256 timestamp, uint256 _months)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    month += _months;\\n    year += (month - 1) / 12;\\n    month = ((month - 1) % 12) + 1;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addDays(uint256 timestamp, uint256 _days)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addHours(uint256 timestamp, uint256 _hours)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addMinutes(uint256 timestamp, uint256 _minutes)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addSeconds(uint256 timestamp, uint256 _seconds)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _seconds;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function subYears(uint256 timestamp, uint256 _years)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    year -= _years;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subMonths(uint256 timestamp, uint256 _months)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    uint256 yearMonth = year * 12 + (month - 1) - _months;\\n    year = yearMonth / 12;\\n    month = (yearMonth % 12) + 1;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subDays(uint256 timestamp, uint256 _days)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subHours(uint256 timestamp, uint256 _hours)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subMinutes(uint256 timestamp, uint256 _minutes)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subSeconds(uint256 timestamp, uint256 _seconds)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _seconds;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _years)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n    (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n    _years = toYear - fromYear;\\n  }\\n\\n  function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _months)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(\\n      fromTimestamp / SECONDS_PER_DAY\\n    );\\n    (uint256 toYear, uint256 toMonth, ) = _daysToDate(\\n      toTimestamp / SECONDS_PER_DAY\\n    );\\n    _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n  }\\n\\n  function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _days)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n  }\\n\\n  function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _hours)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n  }\\n\\n  function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _minutes)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n  }\\n\\n  function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _seconds)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _seconds = toTimestamp - fromTimestamp;\\n  }\\n}\\n\",\"keccak256\":\"0xb2258297b62f4e67fcca4967ada7d27d323612a8e94ad8dcf536f2af4229de03\",\"license\":\"MIT\"},\"src/lib/Fonts.sol\":{\"content\":\"pragma solidity ^0.8.10;\\n\\nlibrary Font1 {\\n  function font() public pure returns (string memory) {\\n    return\\n      \\\"\\\";\\n  }\\n}\\n\\nlibrary Font2 {\\n  function font() public pure returns (bytes memory) {\\n    return\\n      bytes(\\n        \\\"\\\"\\n      );\\n  }\\n}\\n\\nlibrary Font3 {\\n  function font() public pure returns (string memory) {\\n    return\\n      \\\"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\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x170ed297577c5520dd73b08c86be905c291ea69751afd4f7aa3f5b6b18d3b3ae\"},\"src/lib/HookStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nlibrary HookStrings {\\n  \\n  /// @dev toAsciiString creates a hex encoding of an\\n  /// address as a string to use in the preview NFT.\\n  function toAsciiString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint256 i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = char(hi);\\n      s[2 * i + 1] = char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) internal pure returns (bytes1) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0xe5bd5fe44cd3a21a7a26712261bdb83c5c2c7c8b9f325f33b129e4de4d8af92f\",\"license\":\"MIT\"},\"src/lib/TokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"./HookStrings.sol\\\";\\nimport \\\"./Fonts.sol\\\";\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\n/// @dev This contract implements some ERC721 / for hook instruments.\\nlibrary TokenURI {\\n  function _generateMetadataERC721(\\n    address underlyingTokenAddress,\\n    uint256 underlyingTokenId,\\n    uint256 instrumentStrikePrice,\\n    uint256 instrumentExpiration,\\n    uint256 transfers\\n  ) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '\\\", \\\"expiration\\\": ',\\n          HookStrings.toString(instrumentExpiration),\\n          ', \\\"underlying_address\\\": \\\"',\\n          HookStrings.toAsciiString(underlyingTokenAddress),\\n          '\\\", \\\"underlying_tokenId\\\": ',\\n          HookStrings.toString(underlyingTokenId),\\n          ', \\\"strike_price\\\": ',\\n          HookStrings.toString(instrumentStrikePrice),\\n          ', \\\"transfer_index\\\": ',\\n          HookStrings.toString(transfers)\\n        )\\n      );\\n  }\\n\\n  function renderSVG1(uint256 strike, uint256 expiration)\\n    public\\n    pure\\n    returns (bytes memory)\\n  {\\n    // string memory moduleName = attemptGetMetatdataUriName(module);\\n\\n    (uint256 year, uint256 month, uint256 day) = BokkyPooBahsDateTimeLibrary\\n      .timestampToDate(expiration);\\n\\n    return\\n      abi.encodePacked(\\n        '<svg width=\\\"500\\\" height=\\\"500\\\" viewBox=\\\"0 0 500 500\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><rect width=\\\"500\\\" height=\\\"500\\\" fill=\\\"#FAE6C9\\\"/><g filter=\\\"url(#filter0_d_702_157)\\\"><rect x=\\\"30\\\" y=\\\"30\\\" width=\\\"440\\\" height=\\\"440\\\" rx=\\\"30\\\" fill=\\\"#FFF2E0\\\" shape-rendering=\\\"crispEdges\\\"/><rect x=\\\"60\\\" y=\\\"60\\\" width=\\\"187\\\" height=\\\"187\\\" rx=\\\"14\\\" fill=\\\"black\\\" fill-opacity=\\\"0.2\\\"/><rect x=\\\"60\\\" y=\\\"60\\\" width=\\\"187\\\" height=\\\"187\\\" rx=\\\"14\\\" fill=\\\"url(#pattern0)\\\"/>',\\n        '<text fill=\\\"#E16900\\\" font-size=\\\"24\\\" font-weight=\\\"300\\\"><tspan x=\\\"269\\\" y=\\\"113.284\\\">',\\n        HookStrings.toString(strike / 10**18), //strike,\\n        ' ETH</tspan></text><text fill=\\\"#1A5B6C\\\" font-size=\\\"16\\\" font-weight=\\\"300\\\"><tspan x=\\\"269\\\" y=\\\"137.284\\\">Strike Price</tspan></text><text fill=\\\"#E16900\\\" font-size=\\\"24\\\" font-weight=\\\"300\\\"><tspan x=\\\"269\\\" y=\\\"184.284\\\">',\\n        HookStrings.toString(year),\\n        \\\"-\\\",\\n        HookStrings.toString(month),\\n        \\\"-\\\",\\n        HookStrings.toString(day), // date\\n        '</tspan></text><text fill=\\\"#1A5B6C\\\" font-size=\\\"16\\\" font-weight=\\\"300\\\"><tspan x=\\\"269\\\" y=\\\"208.284\\\">Expiration date</tspan></text><text fill=\\\"#1A5B6C\\\" font-size=\\\"12\\\" font-weight=\\\"300\\\"><tspan x=\\\"62\\\" y=\\\"314.356\\\">Underlying Contract Address</tspan></text><text fill=\\\"#E16900\\\" font-size=\\\"16\\\" font-weight=\\\"300\\\"><tspan x=\\\"62\\\" y=\\\"298.356\\\">'\\n      );\\n  }\\n\\n  function renderSVG2(address underlyingAddress, uint256 underlyingTokenId)\\n    public\\n    pure\\n    returns (bytes memory)\\n  {\\n    return\\n      abi.encodePacked(\\n        HookStrings.toAsciiString(underlyingAddress),\\n        '</tspan></text><text fill=\\\"#1A5B6C\\\" font-size=\\\"12\\\" font-weight=\\\"300\\\"><tspan x=\\\"62\\\" y=\\\"358.356\\\">Underlying Token ID</tspan></text><text fill=\\\"#E16900\\\" font-size=\\\"16\\\" font-weight=\\\"300\\\"><tspan x=\\\"62\\\" y=\\\"342.356\\\">',\\n        HookStrings.toString(underlyingTokenId), // token ID\\n        '</tspan></text><text fill=\\\"#E16900\\\" font-size=\\\"16\\\"><tspan x=\\\"60\\\" y=\\\"416.356\\\">Call Option</tspan><tspan x=\\\"60\\\" y=\\\"435.356\\\">Instrument NFT</tspan></text><g clip-path=\\\"url(#clip0_702_157)\\\"><path d=\\\"M312.667 439.421V400H319.929V416.138C321.359 414.037 324.066 412.565 327.513 412.565C333.929 412.565 337.745 417.19 337.745 424.024V439.425H330.482V425.232C330.482 421.446 328.837 419.135 325.816 419.135C322.424 419.135 319.932 421.554 319.932 426.599V439.425H312.667V439.421Z\\\" fill=\\\"#E16900\\\"/><path d=\\\"M341.651 426.282C341.651 418.608 347.907 412.562 355.596 412.562C363.285 412.562 369.541 418.608 369.541 426.282C369.541 433.955 363.285 440.001 355.596 440.001C347.907 440.001 341.651 434.009 341.651 426.282ZM362.169 426.282C362.169 422.235 359.36 419.292 355.596 419.292C351.832 419.292 348.968 422.235 348.968 426.282C348.968 430.328 351.777 433.271 355.596 433.271C359.415 433.271 362.169 430.328 362.169 426.282Z\\\" fill=\\\"#E16900\\\"/><path d=\\\"M372.178 426.282C372.178 418.608 378.434 412.562 386.123 412.562C393.812 412.562 400.068 418.608 400.068 426.282C400.068 433.955 393.812 440.001 386.123 440.001C378.434 440.001 372.178 434.009 372.178 426.282V426.282ZM392.697 426.282C392.697 422.235 389.888 419.292 386.123 419.292C382.359 419.292 379.495 422.235 379.495 426.282C379.495 430.328 382.304 433.271 386.123 433.271C389.942 433.271 392.697 430.328 392.697 426.282V426.282Z\\\" fill=\\\"#E16900\\\"/><path d=\\\"M411.273 427.333V439.421H404.01V400H411.273V422.813L419.863 413.14H428.611L418.112 424.968L431.051 439.421H422.089L411.273 427.333V427.333Z\\\" fill=\\\"#E16900\\\"/><path d=\\\"M433.166 412.031H431.948V411.373H435.084V412.031H433.859V415.537H433.166V412.031V412.031Z\\\" fill=\\\"#E16900\\\"/><path d=\\\"M436.426 411.373L437.895 413.344L439.367 411.373H439.998V415.537H439.299V412.552L437.898 414.44L436.484 412.546V415.537H435.792V411.373H436.423H436.426Z\\\" fill=\\\"#E16900\\\"/></g></g><defs><filter id=\\\"filter0_d_702_157\\\" x=\\\"14\\\" y=\\\"20\\\" width=\\\"472\\\" height=\\\"472\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset dy=\\\"6\\\"/><feGaussianBlur stdDeviation=\\\"8\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\\\"/><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_702_157\\\"/><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow_702_157\\\" result=\\\"shape\\\"/></filter><pattern id=\\\"pattern0\\\" patternContentUnits=\\\"objectBoundingBox\\\" width=\\\"1\\\" height=\\\"1\\\"><use xlink:href=\\\"#image0_702_157\\\" transform=\\\"scale(0.00534759358)\\\"/></pattern><clipPath id=\\\"clip0_702_157\\\"><rect width=\\\"127.333\\\" height=\\\"40\\\" fill=\\\"white\\\" transform=\\\"translate(312.667 400)\\\"/></clipPath><image id=\\\"image0_702_157\\\" width=\\\"187\\\" height=\\\"187\\\" preserveAspectRatio=\\\"xMidYMid\\\" alt=\\\"underlying nft\\\" href=\\\"',\\n        abi.encodePacked(\\n          \\\"https://app.hook.xyz/image/\\\",\\n          HookStrings.toAsciiString(underlyingAddress),\\n          \\\"/\\\",\\n          HookStrings.toString(underlyingTokenId)\\n        ), // img url\\n        '\\\" /><style>',\\n        \\\"@font-face { font-family: Euclid Circular A; src: url('data:font/woff2;base64,\\\",\\n        Font1.font(),\\n        Font2.font(),\\n        Font3.font(),\\n        \\\"') format('woff2');} text { font-family: Euclid Circular A; white-space: pre; letter-spacing: -0.001em;}\\\"\\n        \\\"</style></defs></svg>\\\"\\n      );\\n  }\\n\\n  /// @dev this is a basic tokenURI based on the loot contract for an ERC721\\n  /// (ripped off from LOOT PROJECT)\\n  function tokenURIERC721(\\n    uint256 instrumentId,\\n    address underlyingAddress,\\n    uint256 underlyingTokenId,\\n    uint256 instrumentExpiration,\\n    uint256 instrumentStrike,\\n    uint256 transfers\\n  ) public pure returns (string memory) {\\n    bytes memory output = abi.encodePacked(\\n      renderSVG1(instrumentStrike, instrumentExpiration),\\n      renderSVG2(underlyingAddress, underlyingTokenId)\\n    );\\n\\n    string memory json = Base64.encode(\\n      bytes(\\n        string(\\n          abi.encodePacked(\\n            '{\\\"name\\\": \\\"Option Id',\\n            HookStrings.toString(instrumentId),\\n            '\\\", \\\"description\\\": \\\"Option Instrument NFT on Hook: the NFT-native call options protocol. Learn more at https://hook.xyz\\\", \\\"image\\\": '\\n            '\\\"data:image/svg+xml;base64,',\\n            Base64.encode(output),\\n            _generateMetadataERC721(\\n              underlyingAddress,\\n              underlyingTokenId,\\n              instrumentStrike,\\n              instrumentExpiration,\\n              transfers\\n            ),\\n            \\\"}\\\"\\n          )\\n        )\\n      )\\n    );\\n    return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n  }\\n}\\n\",\"keccak256\":\"0x10f9c11d986b25630622f4f2927843d2f0f834ec96cd2a1ec7d6191b92783c7a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80630413b6b8146100505780635b90315214610079578063f4824b6e1461008c575b600080fd5b61006361005e366004610963565b61009f565b60405161007091906109e1565b60405180910390f35b610063610087366004610a12565b610119565b61006361009a366004610a60565b6101cd565b606060008060006100af85610392565b919450925090506100d06100cb670de0b6b3a764000088610ab6565b6103b8565b6100d9846103b8565b6100e2846103b8565b6100eb846103b8565b6040516020016100fe9493929190610ae6565b60405160208183030381529060405293505050505b92915050565b60606000610127848661009f565b61013188886101cd565b60405160200161014292919061106a565b6040516020818303038152906040529050600061019d6101618a6103b8565b61016a846104bd565b6101778b8b8a8c8b610610565b60405160200161018993929190611099565b6040516020818303038152906040526104bd565b9050806040516020016101b091906111ce565b604051602081830303815290604052925050509695505050505050565b60606101d88361066d565b6101e1836103b8565b6101ea8561066d565b6101f3856103b8565b604051602001610204929190611213565b60405160208183030381529060405273__$663f2eaf0cb2872415513095c0ca1c82dd$__639d37bc7c6040518163ffffffff1660e01b8152600401600060405180830381865af415801561025c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261028491908101906112ff565b73__$7f0f876156cafa8187e809df55b576cdf6$__639d37bc7c6040518163ffffffff1660e01b8152600401600060405180830381865af41580156102cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f591908101906112ff565b73__$3ce4a568e5d591d7b99345d076e59dad2b$",
  "libraries": {
    "Font1": "0x83493600a82f6Fabad936cD0DD2136d999B77b97",
    "Font2": "0xe3d6c82701028755aC9e90BDc7D9CC0f3c5F16e8",
    "Font3": "0xb46Ff3937Ab8B059B120d87Cd6Ae420c51e6aa85"
  },
  "devdoc": {
    "details": "This contract implements some ERC721 / for hook instruments.",
    "kind": "dev",
    "methods": {
      "tokenURIERC721(uint256,address,uint256,uint256,uint256,uint256)": {
        "details": "this is a basic tokenURI based on the loot contract for an ERC721 (ripped off from LOOT PROJECT)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}