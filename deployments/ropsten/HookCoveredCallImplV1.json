{
  "address": "0x88754763fCc806c9dc80366EA6689B8C3eb86205",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "Bid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "writer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "CallCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CallProceedsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "CallReclaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "claimable",
          "type": "bool"
        }
      ],
      "name": "CallSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "ExpiredCallBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "MarketPauseUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidIncrementBips",
          "type": "uint256"
        }
      ],
      "name": "MinBidIncrementUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionDuration",
          "type": "uint256"
        }
      ],
      "name": "MinOptionDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startOffset",
          "type": "uint256"
        }
      ],
      "name": "SettlementAuctionStartOffsetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ALLOWLISTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALL_UPGRADER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLECTION_CONF",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARKET_CONF",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_UPGRADER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_preApprovedMarketplace",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedUnderlyingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHookVault",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "assetOptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "burnExpiredOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "claimOptionProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "contractUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "currentBid",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "currentBidder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "getAssetId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "getExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "assetId",
          "type": "uint32"
        }
      ],
      "name": "getOptionIdForAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "getStrikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "getTransferCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "getVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hookVaultFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "preApprovedMarketplace",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrementBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumOptionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "assetId",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "strikePrice",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "expirationTime",
          "type": "uint32"
        }
      ],
      "name": "mintWithEntitledVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "strikePrice",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "expirationTime",
          "type": "uint32"
        }
      ],
      "name": "mintWithErc721",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "assetId",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "strikePrice",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "expirationTime",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "enum Signatures.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Signatures.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "mintWithVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "writer",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "expiration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "assetId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "strike",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bid",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "highBidder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "returnNft",
          "type": "bool"
        }
      ],
      "name": "reclaimAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBidIncrement",
          "type": "uint256"
        }
      ],
      "name": "setBidIncrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "setMarketPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinDuration",
          "type": "uint256"
        }
      ],
      "name": "setMinOptionDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSettlementStartOffset",
          "type": "uint256"
        }
      ],
      "name": "setSettlementAuctionStartOffset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "settleOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementAuctionStartOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3d90878b61f17b0f8bbb0ecad83d59a6c10f800b07f6fede1c56fe3339ad8b8",
  "receipt": {
    "to": null,
    "from": "0xF9F6009a5f2511f0C859927e43fC12745dc4426a",
    "contractAddress": "0x88754763fCc806c9dc80366EA6689B8C3eb86205",
    "transactionIndex": 0,
    "gasUsed": "5302649",
    "logsBloom": "0x
    "blockHash": "0xe527d1193f1fcaacb3f061f3180fcd1f9b697a085a59980118e6c39541be7afb",
    "transactionHash": "0xe3d90878b61f17b0f8bbb0ecad83d59a6c10f800b07f6fede1c56fe3339ad8b8",
    "logs": [],
    "blockNumber": 12843185,
    "cumulativeGasUsed": "5302649",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bce784fa557baf3b8bfd2d09431e04e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"CallCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CallProceedsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"CallReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"}],\"name\":\"CallSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"ExpiredCallBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"MarketPauseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidIncrementBips\",\"type\":\"uint256\"}],\"name\":\"MinBidIncrementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionDuration\",\"type\":\"uint256\"}],\"name\":\"MinOptionDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startOffset\",\"type\":\"uint256\"}],\"name\":\"SettlementAuctionStartOffsetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALLOWLISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALL_UPGRADER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLECTION_CONF\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_CONF\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_UPGRADER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_preApprovedMarketplace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedUnderlyingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHookVault\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"assetOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"burnExpiredOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"claimOptionProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"contractUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"currentBid\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"currentBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"getAssetId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"getExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"}],\"name\":\"getOptionIdForAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"getStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"getTransferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"getVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hookVaultFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"preApprovedMarketplace\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumOptionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"}],\"name\":\"mintWithEntitledVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"}],\"name\":\"mintWithErc721\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"enum Signatures.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signatures.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"mintWithVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bid\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"highBidder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"returnNft\",\"type\":\"bool\"}],\"name\":\"reclaimAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBidIncrement\",\"type\":\"uint256\"}],\"name\":\"setBidIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setMarketPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinDuration\",\"type\":\"uint256\"}],\"name\":\"setMinOptionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSettlementStartOffset\",\"type\":\"uint256\"}],\"name\":\"setSettlementAuctionStartOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"settleOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementAuctionStartOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jake Nyquist-j@hook.xyz\",\"custom:coauthor\":\"Regynald Augustin-regy@hook.xyz\",\"details\":\"In the context of a single call option, the role of the writer is non-transferrable.This contract is intended to be an implementation referenced by a proxy\",\"events\":{\"MarketPauseUpdated(bool)\":{\"details\":\"Emitted when the market is paused or unpaused\",\"params\":{\"paused\":\"true if paused false otherwise\"}},\"MinBidIncrementUpdated(uint256)\":{\"details\":\"Emitted when the bid increment is updated\",\"params\":{\"bidIncrementBips\":\"the new bid increment amount in bips\"}},\"MinOptionDurationUpdated(uint256)\":{\"details\":\"emitted when the minimum duration for an option is changed\",\"params\":{\"optionDuration\":\"new minimum length of an option in seconds.\"}},\"SettlementAuctionStartOffsetUpdated(uint256)\":{\"details\":\"emitted when the settlement auction start offset is updated\",\"params\":{\"startOffset\":\"new number of seconds from expiration when the start offset begins\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"bid(uint256)\":{\"details\":\"See {IHookCoveredCall-bid}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"burnExpiredOption(uint256)\":{\"details\":\"See {IHookCoveredCall-burnExpiredOption}.\"},\"claimOptionProceeds(uint256)\":{\"details\":\"See {IHookCoveredCall-claimOptionProceeds}\"},\"contractUri(uint256)\":{\"details\":\"this is the OpenSea compatible collection - level metadata URI.\"},\"currentBid(uint256)\":{\"details\":\"See {IHookCoveredCall-currentBid}.\"},\"currentBidder(uint256)\":{\"details\":\"See {IHookCoveredCall-currentBidder}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getAssetId(uint256)\":{\"details\":\"see {IHookCoveredCall-getAssetId}.\"},\"getExpiration(uint256)\":{\"details\":\"see {IHookCoveredCall-getExpiration}.\"},\"getOptionIdForAsset(address,uint32)\":{\"details\":\"see {IHookCoveredCall-getOptionIdForAsset}\"},\"getStrikePrice(uint256)\":{\"details\":\"see {IHookCoveredCall-getStrikePrice}.\"},\"getTransferCount(uint256)\":{\"details\":\"this count can be used by overbooks to invalidate orders after a token has been transferred, preventing stale order execution by malicious parties\"},\"getVaultAddress(uint256)\":{\"details\":\"see {IHookCoveredCall-getVaultAddress}.\"},\"initialize(address,address,address,address)\":{\"details\":\"Because the deployed contract is proxied, arguments unique to each deployment must be passed in an individual initializer. This function is like a constructor.\",\"params\":{\"hookVaultFactory\":\"the address of the ERC-721 vault registry\",\"nftContract\":\"the address for the ERC-721 contract that can serve as underlying instruments\",\"preApprovedMarketplace\":\"the address of the contract which will automatically approved to transfer option ERC721s owned by any account when they're minted\",\"protocol\":\"the address of the Hook protocol (which contains configurations)\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}. this extension ensures that any operator contract located at {_approvedMarketpace} is considered approved internally in the ERC721 contract\"},\"mintWithEntitledVault(address,uint32,uint128,uint32)\":{\"details\":\"See {IHookCoveredCall-mintWithEntitledVault}.\"},\"mintWithErc721(address,uint256,uint128,uint32)\":{\"details\":\"See {IHookCoveredCall-mintWithErc721}.\"},\"mintWithVault(address,uint32,uint128,uint32,(uint8,uint8,bytes32,bytes32))\":{\"details\":\"See {IHookCoveredCall-mintWithVault}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"reclaimAsset(uint256,bool)\":{\"details\":\"See {IHookCoveredCall-reclaimAsset}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBidIncrement(uint256)\":{\"details\":\"set the minimum overage, in bips, for a new bid compared to the current bid.\",\"params\":{\"newBidIncrement\":\"the minimum bid increment in basis points (1/100th of 1%)\"}},\"setMarketPaused(bool)\":{\"details\":\"sets a paused / unpaused state for the market corresponding to this contract\",\"params\":{\"paused\":\"should the market be set to paused or unpaused\"}},\"setMinOptionDuration(uint256)\":{\"details\":\"configures the minimum duration for a newly minted option. Options must be at least this far away in the future.\",\"params\":{\"newMinDuration\":\"is the minimum option duration in seconds\"}},\"setSettlementAuctionStartOffset(uint256)\":{\"details\":\"set the settlement auction start offset. Settlement auctions begin at this time prior to expiration.\",\"params\":{\"newSettlementStartOffset\":\"in seconds (i.e. block.timestamp increments)\"}},\"settleOption(uint256)\":{\"details\":\"See {IHookCoveredCall-settleOption}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"stateVariables\":{\"_erc721VaultFactory\":{\"details\":\"the address of the factory in the Hook protocol that can be used to generate ERC721 vaults\"},\"_optionIds\":{\"details\":\"holds the current ID for the last minted option. The optionId also serves as the tokenId for the associated option instrument NFT.\"},\"_protocol\":{\"details\":\"the address of the deployed hook protocol contract, which has permissions and access controls\"},\"allowedUnderlyingAddress\":{\"details\":\"the address of the token contract permitted to serve as underlying assets for this instrument.\"},\"assetOptions\":{\"details\":\"storage of current call active call option for a specific asset mapping(vaultAddress => mapping(assetId => CallOption))\"},\"marketPaused\":{\"details\":\"this is a flag that can be set to pause this particular instance of the call option contract. NOTE: settlement auctions are still enabled in this case because pausing the market should not change the financial situation for the holder of the options.\"},\"minBidIncrementBips\":{\"details\":\"this is the minimum amount of the current bid that the new bid must exceed the current bid by in order to be considered valid. This amount is expressed in basis points (i.e. 1/100th of 1%)\"},\"minimumOptionDuration\":{\"details\":\"this is the minimum duration of an option created in this contract instance\"},\"optionClaims\":{\"details\":\"mapping to store the amount of eth in wei that may be claimed by the current ownerOf the option nft.\"},\"optionParams\":{\"details\":\"storage of all existing options contracts.\"},\"settlementAuctionStartOffset\":{\"details\":\"this is the amount of time before the expiration of the option that the settlement auction will begin.\"},\"weth\":{\"details\":\"the address of WETH on the chain where this contract is deployed\"}},\"title\":\"HookCoveredCallImplV1 an implementation of covered calls on Hook\",\"version\":1},\"userdoc\":{\"events\":{\"Bid(uint256,uint256,address)\":{\"notice\":\"emitted when a call option settlement auction gets and accepts a new bid\"},\"CallCreated(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"emitted when a new call option is successfully minted with a specific underlying vault\"},\"CallProceedsDistributed(uint256,address,uint256)\":{\"notice\":\"emitted when an option owner claims their proceeds\"},\"CallReclaimed(uint256)\":{\"notice\":\"emitted when a call option is reclaimed\"},\"CallSettled(uint256,bool)\":{\"notice\":\"emitted when a call option is settled\"},\"ExpiredCallBurned(uint256)\":{\"notice\":\"emitted when a expired call option is burned\"}},\"kind\":\"user\",\"methods\":{\"ALLOWLISTER_ROLE()\":{\"notice\":\"the allowlister is able to enable and disable projects to mint instruments\"},\"CALL_UPGRADER()\":{\"notice\":\"the call upgrader role is able to upgrade the implementation of the covered call options\"},\"COLLECTION_CONF()\":{\"notice\":\"the collection configuration role allows the actor to make changes the collection configs on the protocol contract\"},\"MARKET_CONF()\":{\"notice\":\"the market configuration role allows the actor to make changes to how the market operates\"},\"PAUSER_ROLE()\":{\"notice\":\"the pauser is able to start and pause various components of the protocol\"},\"VAULT_UPGRADER()\":{\"notice\":\"the vault upgrader role is able to upgrade the implementation for all vaults\"},\"constructor\":{\"notice\":\"--- Constructor\"},\"getTransferCount(uint256)\":{\"notice\":\"the number of times the token has been transferred\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initializes the specific instance of the instrument contract.\"}},\"notice\":\"See {IHookCoveredCall}.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/HookCoveredCallImplV1.sol\":\"HookCoveredCallImplV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xfa6873a010382f62e9ffe4592b305ef6e60f55502c95ed0ffa51eb10b5200d45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x62237e1773cbf99739b7019f3772a2ff5360d56edb69751b513237f5fcd78571\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc65c83c1039508fa7a42a09a3c6a32babd1c438ba4dbb23581255e784b5d5eed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/HookBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified version of : OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/// @title HookBeaconProxy a proxy contract that points to an implementation provided by a Beacon\\n/// @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n///\\n/// The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n/// conflict with the storage layout of the implementation behind the proxy.\\n///\\n/// This is an extension of the OpenZeppelin beacon proxy, however differs in that it is initializeable, which means\\n/// it is usable with Create2.\\ncontract HookBeaconProxy is Proxy, ERC1967Upgrade {\\n  /// @dev  The constructor is empty in this case because the proxy is initializeable\\n  constructor() {}\\n\\n  bytes32 constant _INITIALIZED_SLOT =\\n    bytes32(uint256(keccak256(\\\"initializeable.beacon.version\\\")) - 1);\\n  bytes32 constant _INITIALIZING_SLOT =\\n    bytes32(uint256(keccak256(\\\"initializeable.beacon.initializing\\\")) - 1);\\n\\n  ///\\n  /// @dev Triggered when the contract has been initialized or reinitialized.\\n  ///\\n  event Initialized(uint8 version);\\n\\n  /// @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n  /// `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n  modifier initializer() {\\n    bool isTopLevelCall = _setInitializedVersion(1);\\n    if (isTopLevelCall) {\\n      StorageSlot.getBooleanSlot(_INITIALIZING_SLOT).value = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      StorageSlot.getBooleanSlot(_INITIALIZING_SLOT).value = false;\\n      emit Initialized(1);\\n    }\\n  }\\n\\n  function _setInitializedVersion(uint8 version) private returns (bool) {\\n    // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n    // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n    // of initializers, because in other contexts the contract may have been reentered.\\n    if (StorageSlot.getBooleanSlot(_INITIALIZING_SLOT).value) {\\n      require(\\n        version == 1 && !Address.isContract(address(this)),\\n        \\\"contract is already initialized\\\"\\n      );\\n      return false;\\n    } else {\\n      require(\\n        StorageSlot.getUint256Slot(_INITIALIZED_SLOT).value < version,\\n        \\\"contract is already initialized\\\"\\n      );\\n      StorageSlot.getUint256Slot(_INITIALIZED_SLOT).value = version;\\n      return true;\\n    }\\n  }\\n\\n  /// @dev Initializes the proxy with `beacon`.\\n  ///\\n  /// If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n  /// will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n  /// constructor.\\n  ///\\n  /// Requirements:\\n  ///\\n  ///- `beacon` must be a contract with the interface {IBeacon}.\\n  ///\\n  function initializeBeacon(address beacon, bytes memory data)\\n    public\\n    initializer\\n  {\\n    assert(\\n      _BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1)\\n    );\\n    _upgradeBeaconToAndCall(beacon, data, false);\\n  }\\n\\n  ///\\n  /// @dev Returns the current implementation address of the associated beacon.\\n  ///\\n  function _implementation() internal view virtual override returns (address) {\\n    return IBeacon(_getBeacon()).implementation();\\n  }\\n}\\n\",\"keccak256\":\"0x7f158eef63e52088ec26dcfabd44fd7fc9b206fe24d9c25c3b44a8b029a152b1\",\"license\":\"MIT\"},\"src/HookCoveredCallImplV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"./lib/Entitlements.sol\\\";\\nimport \\\"./lib/BeaconSalts.sol\\\";\\n\\nimport \\\"./interfaces/IHookERC721VaultFactory.sol\\\";\\nimport \\\"./interfaces/IHookVault.sol\\\";\\nimport \\\"./interfaces/IHookCoveredCall.sol\\\";\\nimport \\\"./interfaces/IHookProtocol.sol\\\";\\nimport \\\"./interfaces/IHookERC721Vault.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\nimport \\\"./mixin/PermissionConstants.sol\\\";\\nimport \\\"./mixin/HookInstrumentERC721.sol\\\";\\n\\n/// @title HookCoveredCallImplV1 an implementation of covered calls on Hook\\n/// @author Jake Nyquist-j@hook.xyz\\n/// @custom:coauthor Regynald Augustin-regy@hook.xyz\\n/// @notice See {IHookCoveredCall}.\\n/// @dev In the context of a single call option, the role of the writer is non-transferrable.\\n/// @dev This contract is intended to be an implementation referenced by a proxy\\ncontract HookCoveredCallImplV1 is\\n  IHookCoveredCall,\\n  HookInstrumentERC721,\\n  ReentrancyGuard,\\n  Initializable,\\n  PermissionConstants\\n{\\n  using Counters for Counters.Counter;\\n\\n  /// @notice The metadata for each covered call option stored within the protocol\\n  /// @param writer The address of the writer that created the call option\\n  /// @param expiration The expiration time of the call option\\n  /// @param assetId the asset id of the underlying within the vault\\n  /// @param vaultAddress the address of the vault holding the underlying asset\\n  /// @param strike The strike price to exercise the call option\\n  /// @param bid is the current high bid in the settlement auction\\n  /// @param highBidder is the address that made the current winning bid in the settlement auction\\n  /// @param settled a flag that marks when a settlement action has taken place successfully. Once this flag is set, ETH should not\\n  /// be sent from the contract related to this particular option\\n  struct CallOption {\\n    address writer;\\n    uint32 expiration;\\n    uint32 assetId;\\n    address vaultAddress;\\n    uint128 strike;\\n    uint128 bid;\\n    address highBidder;\\n    bool settled;\\n  }\\n\\n  /// --- Storage\\n\\n  /// @dev holds the current ID for the last minted option. The optionId also serves as the tokenId for\\n  /// the associated option instrument NFT.\\n  Counters.Counter private _optionIds;\\n\\n  /// @dev the address of the factory in the Hook protocol that can be used to generate ERC721 vaults\\n  IHookERC721VaultFactory private _erc721VaultFactory;\\n\\n  /// @dev the address of the deployed hook protocol contract, which has permissions and access controls\\n  IHookProtocol private _protocol;\\n\\n  /// @dev storage of all existing options contracts.\\n  mapping(uint256 => CallOption) public optionParams;\\n\\n  /// @dev storage of current call active call option for a specific asset\\n  /// mapping(vaultAddress => mapping(assetId => CallOption))\\n  // the call option is is referenced via the optionID stored in optionParams\\n  mapping(IHookVault => mapping(uint32 => uint256)) public assetOptions;\\n\\n  /// @dev mapping to store the amount of eth in wei that may\\n  /// be claimed by the current ownerOf the option nft.\\n  mapping(uint256 => uint256) public optionClaims;\\n\\n  /// @dev the address of the token contract permitted to serve as underlying assets for this\\n  /// instrument.\\n  address public allowedUnderlyingAddress;\\n\\n  /// @dev the address of WETH on the chain where this contract is deployed\\n  address public weth;\\n\\n  /// @dev this is the minimum duration of an option created in this contract instance\\n  uint256 public minimumOptionDuration;\\n\\n  /// @dev this is the minimum amount of the current bid that the new bid\\n  /// must exceed the current bid by in order to be considered valid.\\n  /// This amount is expressed in basis points (i.e. 1/100th of 1%)\\n  uint256 public minBidIncrementBips;\\n\\n  /// @dev this is the amount of time before the expiration of the option\\n  /// that the settlement auction will begin.\\n  uint256 public settlementAuctionStartOffset;\\n\\n  /// @dev this is a flag that can be set to pause this particular\\n  /// instance of the call option contract.\\n  /// NOTE: settlement auctions are still enabled in\\n  /// this case because pausing the market should not change the\\n  /// financial situation for the holder of the options.\\n  bool public marketPaused;\\n\\n  /// @dev Emitted when the market is paused or unpaused\\n  /// @param paused true if paused false otherwise\\n  event MarketPauseUpdated(bool paused);\\n\\n  /// @dev Emitted when the bid increment is updated\\n  /// @param bidIncrementBips the new bid increment amount in bips\\n  event MinBidIncrementUpdated(uint256 bidIncrementBips);\\n\\n  /// @dev emitted when the settlement auction start offset is updated\\n  /// @param startOffset new number of seconds from expiration when the start offset begins\\n  event SettlementAuctionStartOffsetUpdated(uint256 startOffset);\\n\\n  /// @dev emitted when the minimum duration for an option is changed\\n  /// @param optionDuration new minimum length of an option in seconds.\\n  event MinOptionDurationUpdated(uint256 optionDuration);\\n\\n  /// --- Constructor\\n  // the constructor cannot have arguments in proxied contracts.\\n  constructor() HookInstrumentERC721(\\\"Call\\\") {}\\n\\n  /// @notice Initializes the specific instance of the instrument contract.\\n  /// @dev Because the deployed contract is proxied, arguments unique to each deployment\\n  /// must be passed in an individual initializer. This function is like a constructor.\\n  /// @param protocol the address of the Hook protocol (which contains configurations)\\n  /// @param nftContract the address for the ERC-721 contract that can serve as underlying instruments\\n  /// @param hookVaultFactory the address of the ERC-721 vault registry\\n  /// @param preApprovedMarketplace the address of the contract which will automatically approved\\n  /// to transfer option ERC721s owned by any account when they're minted\\n  function initialize(\\n    address protocol,\\n    address nftContract,\\n    address hookVaultFactory,\\n    address preApprovedMarketplace\\n  ) public initializer {\\n    _protocol = IHookProtocol(protocol);\\n    _erc721VaultFactory = IHookERC721VaultFactory(hookVaultFactory);\\n    weth = _protocol.getWETHAddress();\\n    _preApprovedMarketplace = preApprovedMarketplace;\\n    allowedUnderlyingAddress = nftContract;\\n    /// increment the optionId such that id=0 can be treated as the null value\\n    _optionIds.increment();\\n\\n    /// Initialize basic configuration.\\n    /// Even though these are defaults, we cannot set them in the constructor because\\n    /// each instance of this contract will need to have the storage initialized\\n    /// to read from these values (this is the implementation contract pointed to by a proxy)\\n    minimumOptionDuration = 1 days;\\n    minBidIncrementBips = 50;\\n    settlementAuctionStartOffset = 1 days;\\n    marketPaused = false;\\n  }\\n\\n  /// ---- Option Writer Functions ---- //\\n\\n  /// @dev See {IHookCoveredCall-mintWithVault}.\\n  function mintWithVault(\\n    address vaultAddress,\\n    uint32 assetId,\\n    uint128 strikePrice,\\n    uint32 expirationTime,\\n    Signatures.Signature calldata signature\\n  ) external nonReentrant whenNotPaused returns (uint256) {\\n    IHookVault vault = IHookVault(vaultAddress);\\n    require(\\n      allowedUnderlyingAddress == vault.assetAddress(assetId),\\n      \\\"mWV-token not allowed\\\"\\n    );\\n    require(vault.getHoldsAsset(assetId), \\\"mWV-asset not in vault\\\");\\n    require(\\n      _allowedVaultImplementation(\\n        vaultAddress,\\n        allowedUnderlyingAddress,\\n        assetId\\n      ),\\n      \\\"mWV-can only mint with protocol vaults\\\"\\n    );\\n    // the beneficial owner is the only one able to impose entitlements, so\\n    // we need to require that they've done so here.\\n    address writer = vault.getBeneficialOwner(assetId);\\n\\n    require(\\n      msg.sender == writer || msg.sender == vault.getApprovedOperator(assetId),\\n      \\\"mWV-called by someone other than the owner or operator\\\"\\n    );\\n\\n    vault.imposeEntitlement(\\n      address(this),\\n      expirationTime,\\n      assetId,\\n      signature.v,\\n      signature.r,\\n      signature.s\\n    );\\n\\n    return\\n      _mintOptionWithVault(writer, vault, assetId, strikePrice, expirationTime);\\n  }\\n\\n  /// @dev See {IHookCoveredCall-mintWithEntitledVault}.\\n  function mintWithEntitledVault(\\n    address vaultAddress,\\n    uint32 assetId,\\n    uint128 strikePrice,\\n    uint32 expirationTime\\n  ) external nonReentrant whenNotPaused returns (uint256) {\\n    IHookVault vault = IHookVault(vaultAddress);\\n\\n    require(\\n      allowedUnderlyingAddress == vault.assetAddress(assetId),\\n      \\\"mWEV-token not allowed\\\"\\n    );\\n    require(vault.getHoldsAsset(assetId), \\\"mWEV-asset must be in vault\\\");\\n    (bool active, address operator) = vault.getCurrentEntitlementOperator(\\n      assetId\\n    );\\n    require(\\n      active && operator == address(this),\\n      \\\"mWEV-call contract not operator\\\"\\n    );\\n\\n    require(\\n      expirationTime == vault.entitlementExpiration(assetId),\\n      \\\"mWEV-entitlement expiration different\\\"\\n    );\\n    require(\\n      _allowedVaultImplementation(\\n        vaultAddress,\\n        allowedUnderlyingAddress,\\n        assetId\\n      ),\\n      \\\"mWEV-only protocol vaults allowed\\\"\\n    );\\n\\n    // the beneficial owner owns the asset so\\n    // they should receive the option.\\n    address writer = vault.getBeneficialOwner(assetId);\\n\\n    require(\\n      writer == msg.sender || vault.getApprovedOperator(assetId) == msg.sender,\\n      \\\"mWEV-only owner or operator may mint\\\"\\n    );\\n\\n    return\\n      _mintOptionWithVault(writer, vault, assetId, strikePrice, expirationTime);\\n  }\\n\\n  /// @dev See {IHookCoveredCall-mintWithErc721}.\\n  function mintWithErc721(\\n    address tokenAddress,\\n    uint256 tokenId,\\n    uint128 strikePrice,\\n    uint32 expirationTime\\n  ) external nonReentrant whenNotPaused returns (uint256) {\\n    address tokenOwner = IERC721(tokenAddress).ownerOf(tokenId);\\n    require(\\n      allowedUnderlyingAddress == tokenAddress,\\n      \\\"mWE7-token not on allowlist\\\"\\n    );\\n\\n    require(\\n      msg.sender == tokenOwner ||\\n        IERC721(tokenAddress).isApprovedForAll(tokenOwner, msg.sender) ||\\n        IERC721(tokenAddress).getApproved(tokenId) == msg.sender,\\n      \\\"mWE7-caller not owner or operator\\\"\\n    );\\n\\n    // NOTE: we can mint the option since our contract is approved\\n    // this is to ensure additionally that the msg.sender isn't a unexpected address\\n    require(\\n      IERC721(tokenAddress).isApprovedForAll(tokenOwner, address(this)) ||\\n        IERC721(tokenAddress).getApproved(tokenId) == address(this),\\n      \\\"mWE7-not approved operator\\\"\\n    );\\n\\n    // FIND OR CREATE HOOK VAULT, SET AN ENTITLEMENT\\n    IHookERC721Vault vault = _erc721VaultFactory.findOrCreateVault(\\n      tokenAddress,\\n      tokenId\\n    );\\n\\n    uint32 assetId = 0;\\n    if (\\n      address(vault) ==\\n      Create2.computeAddress(\\n        BeaconSalts.multiVaultSalt(tokenAddress),\\n        BeaconSalts.ByteCodeHash,\\n        address(_erc721VaultFactory)\\n      )\\n    ) {\\n      // If the vault is a multi-vault, it requires that the assetId matches the\\n      // tokenId, instead of having a standard assetI of 0\\n      assetId = uint32(tokenId);\\n    }\\n\\n    uint256 optionId = _mintOptionWithVault(\\n      tokenOwner,\\n      IHookVault(vault),\\n      assetId,\\n      strikePrice,\\n      expirationTime\\n    );\\n\\n    // transfer the underlying asset into our vault, passing along the entitlement. The entitlement specified\\n    // here will be accepted by the vault because we are also simultaneously tendering the asset.\\n    IERC721(tokenAddress).safeTransferFrom(\\n      tokenOwner,\\n      address(vault),\\n      tokenId,\\n      abi.encode(tokenOwner, address(this), expirationTime)\\n    );\\n\\n    // make sure that the vault actually has the asset.\\n    require(\\n      IERC721(tokenAddress).ownerOf(tokenId) == address(vault),\\n      \\\"mWE7-asset not in vault\\\"\\n    );\\n\\n    return optionId;\\n  }\\n\\n  /// @notice internal use function to record the option and mint it\\n  /// @dev the vault is completely unchecked here, so the caller must ensure the vault is created,\\n  /// has a valid entitlement, and has the asset inside it\\n  /// @param writer the writer of the call option, usually the current owner of the underlying asset\\n  /// @param vault the address of the IHookVault which contains the underlying asset\\n  /// @param assetId the id of the underlying asset\\n  /// @param strikePrice the strike price for this current option, in ETH\\n  /// @param expirationTime the time after which the option will be considered expired\\n  function _mintOptionWithVault(\\n    address writer,\\n    IHookVault vault,\\n    uint32 assetId,\\n    uint128 strikePrice,\\n    uint32 expirationTime\\n  ) private returns (uint256) {\\n    // NOTE: The settlement auction always occurs one day before expiration\\n    require(\\n      expirationTime > block.timestamp + minimumOptionDuration,\\n      \\\"_mOWV-expires sooner than min duration\\\"\\n    );\\n\\n    // verify that, if there is a previous option on this asset, it has already settled.\\n    uint256 prevOptionId = assetOptions[vault][assetId];\\n    if (prevOptionId != 0) {\\n      require(\\n        optionParams[prevOptionId].settled,\\n        \\\"_mOWV-previous option must be settled\\\"\\n      );\\n    }\\n\\n    // generate the next optionId\\n    _optionIds.increment();\\n    uint256 newOptionId = _optionIds.current();\\n\\n    // save the option metadata\\n    optionParams[newOptionId] = CallOption({\\n      writer: writer,\\n      vaultAddress: address(vault),\\n      assetId: assetId,\\n      strike: strikePrice,\\n      expiration: expirationTime,\\n      bid: 0,\\n      highBidder: address(0),\\n      settled: false\\n    });\\n\\n    // send the option NFT to the underlying token owner.\\n    _safeMint(writer, newOptionId);\\n\\n    // If msg.sender and tokenOwner are different accounts, approve the msg.sender\\n    // to transfer the option NFT as it already had the right to transfer the underlying NFT.\\n    if (msg.sender != writer) {\\n      _approve(msg.sender, newOptionId);\\n    }\\n\\n    assetOptions[vault][assetId] = newOptionId;\\n\\n    emit CallCreated(\\n      writer,\\n      address(vault),\\n      assetId,\\n      newOptionId,\\n      strikePrice,\\n      expirationTime\\n    );\\n\\n    return newOptionId;\\n  }\\n\\n  // --- Bidder Functions\\n\\n  modifier biddingEnabled(uint256 optionId) {\\n    CallOption memory call = optionParams[optionId];\\n    require(call.expiration > block.timestamp, \\\"bE-expired\\\");\\n    require(\\n      (call.expiration - settlementAuctionStartOffset) <= block.timestamp,\\n      \\\"bE-bidding starts on last day\\\"\\n    );\\n    require(!call.settled, \\\"bE-already settled\\\");\\n    _;\\n  }\\n\\n  /// @dev method to verify that a particular vault was created by the protocol's vault factory\\n  /// @param vaultAddress location where the vault is deployed\\n  /// @param underlyingAddress address of underlying asset\\n  /// @param assetId id of the asset within the vault\\n  function _allowedVaultImplementation(\\n    address vaultAddress,\\n    address underlyingAddress,\\n    uint32 assetId\\n  ) internal view returns (bool) {\\n    // First check if the multiVault is the one to save a bit of gas\\n    // in the case the user is optimizing for gas savings (by using MultiVault)\\n    if (\\n      vaultAddress ==\\n      Create2.computeAddress(\\n        BeaconSalts.multiVaultSalt(underlyingAddress),\\n        BeaconSalts.ByteCodeHash,\\n        address(_erc721VaultFactory)\\n      )\\n    ) {\\n      return true;\\n    }\\n\\n    try IHookERC721Vault(vaultAddress).assetTokenId(assetId) returns (\\n      uint256 _tokenId\\n    ) {\\n      if (\\n        vaultAddress ==\\n        Create2.computeAddress(\\n          BeaconSalts.soloVaultSalt(underlyingAddress, _tokenId),\\n          BeaconSalts.ByteCodeHash,\\n          address(_erc721VaultFactory)\\n        )\\n      ) {\\n        return true;\\n      }\\n    } catch (bytes memory) {\\n      return false;\\n    }\\n\\n    return false;\\n  }\\n\\n  /// @dev See {IHookCoveredCall-bid}.\\n  function bid(uint256 optionId)\\n    external\\n    payable\\n    nonReentrant\\n    biddingEnabled(optionId)\\n  {\\n    uint128 bidAmt = uint128(msg.value);\\n    CallOption storage call = optionParams[optionId];\\n\\n    if (msg.sender == call.writer) {\\n      /// handle the case where an option writer bids on\\n      /// an underlying asset that they owned. In this case, as they would be\\n      /// the recipient of the spread after the auction, they are able to bid\\n      /// paying only the difference between their bid and the strike.\\n      bidAmt += call.strike;\\n    }\\n\\n    require(\\n      bidAmt >= call.bid + ((call.bid * minBidIncrementBips) / 10000),\\n      \\\"b-must overbid by minBidIncrementBips\\\"\\n    );\\n    require(bidAmt > call.strike, \\\"b-bid is lower than the strike price\\\");\\n\\n    _returnBidToPreviousBidder(call);\\n\\n    // set the new bidder\\n    call.bid = bidAmt;\\n    call.highBidder = msg.sender;\\n\\n    // the new high bidder is the beneficial owner of the asset.\\n    // The beneficial owner must be set here instead of with a settlement\\n    // because otherwise the writer will be able to remove the asset from the vault\\n    // between the expiration and the settlement call, effectively stealing the asset.\\n    IHookVault(call.vaultAddress).setBeneficialOwner(call.assetId, msg.sender);\\n\\n    // emit event\\n    emit Bid(optionId, bidAmt, msg.sender);\\n  }\\n\\n  function _returnBidToPreviousBidder(CallOption storage call) internal {\\n    uint256 unNormalizedHighBid = call.bid;\\n    if (call.highBidder == call.writer) {\\n      unNormalizedHighBid -= call.strike;\\n    }\\n\\n    // return current bidder's money\\n    if (unNormalizedHighBid > 0) {\\n      _safeTransferETHWithFallback(call.highBidder, unNormalizedHighBid);\\n    }\\n  }\\n\\n  /// @dev See {IHookCoveredCall-currentBid}.\\n  function currentBid(uint256 optionId) external view returns (uint128) {\\n    return optionParams[optionId].bid;\\n  }\\n\\n  /// @dev See {IHookCoveredCall-currentBidder}.\\n  function currentBidder(uint256 optionId) external view returns (address) {\\n    return optionParams[optionId].highBidder;\\n  }\\n\\n  // ----- END OF OPTION FUNCTIONS ---------//\\n\\n  /// @dev See {IHookCoveredCall-settleOption}.\\n  function settleOption(uint256 optionId) external nonReentrant {\\n    CallOption storage call = optionParams[optionId];\\n    require(call.highBidder != address(0), \\\"s-bid must be won by someone\\\");\\n    require(call.expiration < block.timestamp, \\\"s-option must be expired\\\");\\n    require(!call.settled, \\\"s-the call cannot already be settled\\\");\\n\\n    uint256 spread = call.bid - call.strike;\\n\\n    address optionOwner = ownerOf(optionId);\\n\\n    // set settled to prevent an additional attempt to settle the option\\n    optionParams[optionId].settled = true;\\n\\n    // If the option writer is the high bidder they don't receive the strike because they bid on the spread.\\n    if (call.highBidder != call.writer) {\\n      // send option writer the strike price\\n      _safeTransferETHWithFallback(call.writer, call.strike);\\n    }\\n\\n    bool claimable = false;\\n    if (msg.sender == optionOwner) {\\n      // send option holder their earnings\\n      _safeTransferETHWithFallback(optionOwner, spread);\\n\\n      // burn nft\\n      _burn(optionId);\\n    } else {\\n      optionClaims[optionId] = spread;\\n      claimable = true;\\n    }\\n    emit CallSettled(optionId, claimable);\\n  }\\n\\n  /// @dev See {IHookCoveredCall-reclaimAsset}.\\n  function reclaimAsset(uint256 optionId, bool returnNft)\\n    external\\n    nonReentrant\\n  {\\n    CallOption storage call = optionParams[optionId];\\n    require(msg.sender == call.writer, \\\"rA-only writer\\\");\\n    require(!call.settled, \\\"rA-option settled\\\");\\n    require(call.writer == ownerOf(optionId), \\\"rA-writer must own\\\");\\n    require(call.expiration > block.timestamp, \\\"rA-option expired\\\");\\n\\n    // burn the option NFT\\n    _burn(optionId);\\n\\n    // settle the option\\n    call.settled = true;\\n\\n    if (call.highBidder != address(0)) {\\n      // return current bidder's money\\n      if (call.highBidder == call.writer) {\\n        // handle the case where the writer is reclaiming as option they were the high bidder of\\n        _safeTransferETHWithFallback(call.highBidder, call.bid - call.strike);\\n      } else {\\n        _safeTransferETHWithFallback(call.highBidder, call.bid);\\n      }\\n\\n      // if we have a bid, we may have set the bidder, so make sure to revert it here.\\n      IHookVault(call.vaultAddress).setBeneficialOwner(\\n        call.assetId,\\n        call.writer\\n      );\\n    }\\n\\n    if (returnNft) {\\n      // Because the call is not expired, we should be able to reclaim the asset from the vault\\n      IHookVault(call.vaultAddress).clearEntitlementAndDistribute(\\n        call.assetId,\\n        call.writer\\n      );\\n    } else {\\n      IHookVault(call.vaultAddress).clearEntitlement(call.assetId);\\n    }\\n\\n    emit CallReclaimed(optionId);\\n  }\\n\\n  /// @dev See {IHookCoveredCall-burnExpiredOption}.\\n  function burnExpiredOption(uint256 optionId)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n  {\\n    CallOption memory call = optionParams[optionId];\\n\\n    require(block.timestamp > call.expiration, \\\"bEO-option expired\\\");\\n\\n    require(!call.settled, \\\"bEO-option settled\\\");\\n\\n    require(call.highBidder == address(0), \\\"bEO-option has bids\\\");\\n\\n    // burn the option NFT\\n    _burn(optionId);\\n\\n    // settle the option\\n    call.settled = true;\\n\\n    emit ExpiredCallBurned(optionId);\\n  }\\n\\n  /// @dev See {IHookCoveredCall-claimOptionProceeds}\\n  function claimOptionProceeds(uint256 optionId) external nonReentrant {\\n    address optionOwner = ownerOf(optionId);\\n    require(msg.sender == optionOwner, \\\"cOP-owner only\\\");\\n    uint256 claim = optionClaims[optionId];\\n    delete optionClaims[optionId];\\n    if (claim != 0) {\\n      _burn(optionId);\\n      emit CallProceedsDistributed(optionId, optionOwner, claim);\\n      _safeTransferETHWithFallback(optionOwner, claim);\\n    }\\n  }\\n\\n  //// ---- Administrative Fns.\\n\\n  // forward to protocol-level pauseability\\n  modifier whenNotPaused() {\\n    require(!marketPaused, \\\"market paused\\\");\\n    _protocol.throwWhenPaused();\\n    _;\\n  }\\n\\n  modifier onlyMarketController() {\\n    require(\\n      _protocol.hasRole(MARKET_CONF, msg.sender),\\n      \\\"caller needs MARKET_CONF\\\"\\n    );\\n    _;\\n  }\\n\\n  /// @dev configures the minimum duration for a newly minted option. Options must be at\\n  /// least this far away in the future.\\n  /// @param newMinDuration is the minimum option duration in seconds\\n  function setMinOptionDuration(uint256 newMinDuration)\\n    public\\n    onlyMarketController\\n  {\\n    require(settlementAuctionStartOffset < newMinDuration);\\n    minimumOptionDuration = newMinDuration;\\n    emit MinOptionDurationUpdated(newMinDuration);\\n  }\\n\\n  /// @dev set the minimum overage, in bips, for a new bid compared to the current bid.\\n  /// @param newBidIncrement the minimum bid increment in basis points (1/100th of 1%)\\n  function setBidIncrement(uint256 newBidIncrement)\\n    public\\n    onlyMarketController\\n  {\\n    require(newBidIncrement < 20 * 100);\\n    minBidIncrementBips = newBidIncrement;\\n    emit MinBidIncrementUpdated(newBidIncrement);\\n  }\\n\\n  /// @dev set the settlement auction start offset. Settlement auctions begin at this time prior to expiration.\\n  /// @param newSettlementStartOffset in seconds (i.e. block.timestamp increments)\\n  function setSettlementAuctionStartOffset(uint256 newSettlementStartOffset)\\n    public\\n    onlyMarketController\\n  {\\n    require(newSettlementStartOffset < minimumOptionDuration);\\n    settlementAuctionStartOffset = newSettlementStartOffset;\\n    emit SettlementAuctionStartOffsetUpdated(newSettlementStartOffset);\\n  }\\n\\n  /// @dev sets a paused / unpaused state for the market corresponding to this contract\\n  /// @param paused should the market be set to paused or unpaused\\n  function setMarketPaused(bool paused) public onlyMarketController {\\n    require(marketPaused == !paused, \\\"sMP-must change\\\");\\n    marketPaused = paused;\\n    emit MarketPauseUpdated(paused);\\n  }\\n\\n  //// ------------------------- NFT RELATED FUNCTIONS ------------------------------- ////\\n  //// These functions are overrides needed by the HookInstrumentNFT library in order   ////\\n  //// to generate the NFT view for the project.                                       ////\\n\\n  /// @dev see {IHookCoveredCall-getVaultAddress}.\\n  function getVaultAddress(uint256 optionId)\\n    public\\n    view\\n    override\\n    returns (address)\\n  {\\n    return optionParams[optionId].vaultAddress;\\n  }\\n\\n  /// @dev see {IHookCoveredCall-getOptionIdForAsset}\\n  function getOptionIdForAsset(address vault, uint32 assetId)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return assetOptions[IHookVault(vault)][assetId];\\n  }\\n\\n  /// @dev see {IHookCoveredCall-getAssetId}.\\n  function getAssetId(uint256 optionId) public view override returns (uint32) {\\n    return optionParams[optionId].assetId;\\n  }\\n\\n  /// @dev see {IHookCoveredCall-getStrikePrice}.\\n  function getStrikePrice(uint256 optionId)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return optionParams[optionId].strike;\\n  }\\n\\n  /// @dev see {IHookCoveredCall-getExpiration}.\\n  function getExpiration(uint256 optionId)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return optionParams[optionId].expiration;\\n  }\\n\\n  //// ----------------------------- ETH TRANSFER UTILITIES --------------------------- ////\\n\\n  /// @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\\n  /// @dev this transfer failure could occur if the transferee is a malicious contract\\n  /// so limiting the gas and persisting on fail helps prevent the impact of these calls.\\n  function _safeTransferETHWithFallback(address to, uint256 amount) internal {\\n    if (!_safeTransferETH(to, amount)) {\\n      IWETH(weth).deposit{value: amount}();\\n      IWETH(weth).transfer(to, amount);\\n    }\\n  }\\n\\n  /// @notice Transfer ETH and return the success status.\\n  /// @dev This function only forwards 30,000 gas to the callee.\\n  /// this prevents malicious contracts from causing the next bidder to run out of gas,\\n  /// which would prevent them from bidding successfully\\n  function _safeTransferETH(address to, uint256 value) internal returns (bool) {\\n    (bool success, ) = to.call{value: value, gas: 30_000}(new bytes(0));\\n    return success;\\n  }\\n}\\n\",\"keccak256\":\"0x764f7ff28afb35c75dcfc640a2e0593207ffffda1363c3536940752316f69302\",\"license\":\"MIT\"},\"src/interfaces/IHookCoveredCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport \\\"../lib/Signatures.sol\\\";\\n\\n/// @title A covered call instrument\\n/// @author Jake Nyquist-j@hook.xyz\\n/// @custom:coauthor Regynald Augustin-regy@hook.xyz\\n///\\n/// @notice This contract implements a \\\"Covered Call Option\\\". A call option gives the holder the right, but not\\n/// the obligation to purchase an asset at a fixed time in the future (the expiry) for a fixed price (the strike).\\n///\\n///\\n/// This call option implementation here is similar to a \\\"european\\\" call option because the asset can\\n/// only be purchased at the expiration. The call option is \\\"covered\\\"  because the underlying\\n/// asset, must be held in escrow within a IHookVault for the entire duration of the option.\\n///\\n/// There are three phases to the call option:\\n///\\n/// (1) WRITING:\\n/// The owner of the NFT can mint an option by calling the \\\"mint\\\" function using the parameters of the subject ERC-721;\\n/// specifying additionally their preferred strike price and expiration. An \\\"instrument nft\\\" is minted to the writer's\\n/// address, where the holder of this ERC-721 will receive the economic benefit of holding the option.\\n///\\n/// (2) SALE:\\n/// The sale occurs outside of the context of this contract; however, the ZeroEx market contracts are pre-approved to\\n/// transfer the tokens. By Selling the instrument NFT, the writer earns a \\\"premium\\\" for selling their option. The\\n/// option may be sold and re-sold multiple times.\\n///\\n/// (3) SETTLEMENT:\\n/// One day prior to the expiration, and auction begins. People are able to call bid() for more than the strike price to\\n/// place a bid. If, at settlement, the high bid is greater than the strike, (b-strike) is transferred to the holder\\n/// of the instrument NFT, the strike price is transferred to the writer. The high bid is transferred to the holder of\\n/// the option.\\ninterface IHookCoveredCall is IERC721Metadata {\\n  /// @notice emitted when a new call option is successfully minted with a specific underlying vault\\n  event CallCreated(\\n    address writer,\\n    address vaultAddress,\\n    uint256 assetId,\\n    uint256 optionId,\\n    uint256 strikePrice,\\n    uint256 expiration\\n  );\\n\\n  /// @notice emitted when a call option is settled\\n  event CallSettled(uint256 optionId, bool claimable);\\n\\n  /// @notice emitted when a call option is reclaimed\\n  event CallReclaimed(uint256 optionId);\\n\\n  /// @notice emitted when a expired call option is burned\\n  event ExpiredCallBurned(uint256 optionId);\\n\\n  /// @notice emitted when a call option settlement auction gets and accepts a new bid\\n  /// @param bidder the account placing the bid that is now the high bidder\\n  /// @param bidAmount the amount of wei bid\\n  /// @param optionId the option for the underlying that was bid on\\n  event Bid(uint256 optionId, uint256 bidAmount, address bidder);\\n\\n  /// @notice emitted when an option owner claims their proceeds\\n  /// @param optionId the option the claim is on\\n  /// @param to the option owner making the claim\\n  /// @param amount the amount of the claim distributed\\n  event CallProceedsDistributed(uint256 optionId, address to, uint256 amount);\\n\\n  /// @notice Mints a new call option for a particular \\\"underlying\\\" ERC-721 NFT with a given strike price and expiration\\n  /// @param tokenAddress the contract address of the ERC-721 token that serves as the underlying asset for the call\\n  /// option\\n  /// @param tokenId the tokenId of the underlying ERC-721 token\\n  /// @param strikePrice the strike price for the call option being written\\n  /// @param expirationTime time the timestamp after which the option will be expired\\n  function mintWithErc721(\\n    address tokenAddress,\\n    uint256 tokenId,\\n    uint128 strikePrice,\\n    uint32 expirationTime\\n  ) external returns (uint256);\\n\\n  /// @notice Mints a new call option for the assets deposited in a particular vault given strike price and expiration.\\n  /// @param vaultAddress the contract address of the vault currently holding the call option\\n  /// @param assetId the id of the asset within the vault\\n  /// @param strikePrice the strike price for the call option being written\\n  /// @param expirationTime time the timestamp after which the option will be expired\\n  /// @param signature the signature used to place the entitlement onto the vault\\n  function mintWithVault(\\n    address vaultAddress,\\n    uint32 assetId,\\n    uint128 strikePrice,\\n    uint32 expirationTime,\\n    Signatures.Signature calldata signature\\n  ) external returns (uint256);\\n\\n  /// @notice Mints a new call option for the assets deposited in a particular vault given strike price and expiration.\\n  /// That vault must already have a registered entitlement for this contract with the an expiration equal to {expirationTime}\\n  /// @param vaultAddress the contract address of the vault currently holding the call option\\n  /// @param assetId the id of the asset within the vault\\n  /// @param strikePrice the strike price for the call option being written\\n  /// @param expirationTime time the timestamp after which the option will be expired\\n  function mintWithEntitledVault(\\n    address vaultAddress,\\n    uint32 assetId,\\n    uint128 strikePrice,\\n    uint32 expirationTime\\n  ) external returns (uint256);\\n\\n  /// @notice Bid in the settlement auction for an option. The paid amount is the bid,\\n  /// and the bidder is required to escrow this amount until either the auction ends or another bidder bids higher\\n  ///\\n  /// The bid must be greater than the strike price\\n  /// @param optionId the optionId corresponding to the settlement to bid on.\\n  function bid(uint256 optionId) external payable;\\n\\n  /// @notice view function to get the current high settlement bid of an option, or 0 if there is no high bid\\n  /// @param optionId of the option to check\\n  function currentBid(uint256 optionId) external view returns (uint128);\\n\\n  /// @notice view function to get the current high bidder for an option settlement auction, or the null address if no\\n  /// high bidder exists\\n  /// @param optionId of the option to check\\n  /// @return address of the account for the current high bidder, or the null address if there is none\\n  function currentBidder(uint256 optionId) external view returns (address);\\n\\n  /// @notice Allows the writer to reclaim an entitled asset. This is only possible when the writer holds the option\\n  /// nft and calls this function.\\n  /// @dev Allows the writer to reclaim a NFT if they also hold the option NFT.\\n  /// @param optionId the option being reclaimed.\\n  /// @param returnNft true if token should be withdrawn from vault, false to leave token in the vault.\\n  function reclaimAsset(uint256 optionId, bool returnNft) external;\\n\\n  /// @notice Looks up the latest optionId that covers a particular asset, if one exists. This option may be already settled.\\n  /// @dev getOptionIdForAsset\\n  /// @param vault the address of the hook vault that holds the covered asset\\n  /// @param assetId the id of the asset to check\\n  /// @return the optionId, if one exists or 0 otherwise\\n  function getOptionIdForAsset(address vault, uint32 assetId)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @notice Permissionlessly settle an expired option when the option expires in the money, distributing\\n  /// the proceeds to the Writer, Holder, and Bidder as follows:\\n  ///\\n  /// WRITER (who originally called mint() and owned underlying asset) - receives the `strike`\\n  /// HOLDER (ownerOf(optionId)) - receives `b-strike`\\n  /// HIGH BIDDER (call.highBidder) - becomes ownerOf NFT, pays `bid`.\\n  ///\\n  /// @dev the return nft param allows the underlying asset to remain in its vault. This saves gas\\n  /// compared to first distributing it and then re-depositing it. No royalties or other payments\\n  /// are subtracted from the distribution amounts.\\n  ///\\n  /// @param optionId of the option to settle.\\n  function settleOption(uint256 optionId) external;\\n\\n  /// @notice Allows anyone to burn the instrument NFT for an expired option.\\n  /// @param optionId of the option to burn.\\n  function burnExpiredOption(uint256 optionId) external;\\n\\n  /// @notice allows the option owner to claim proceeds if the option was settled\\n  /// by another account. The option NFT is burned after settlement.\\n  /// @dev this mechanism prevents the proceeds from being sent to an account\\n  /// temporarily custodying the option asset.\\n  /// @param optionId the option to claim and burn.\\n  function claimOptionProceeds(uint256 optionId) external;\\n}\\n\",\"keccak256\":\"0xf14977ed3367fa71387d89531e29adc0e6d7d342113a963bbae6559b4a8c95f8\",\"license\":\"MIT\"},\"src/interfaces/IHookERC721Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IHookVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\n/// @title Hook ERC-721 Vault interface\\n/// @author Jake Nyquist-j@hook.xyz\\n/// @custom:coauthor Regynald Augustin-regy@hook.xyz\\n///\\n/// @dev the IHookERC721 vault is an extension of the standard IHookVault\\n/// specifically designed to hold and receive ERC721 Tokens.\\n///\\n/// FLASH LOAN -\\n///     (1) beneficial owners are able to borrow the vaulted asset for a single function call\\n///     (2) to borrow the asset, they must implement and deploy a {IERC721FlashLoanReceiver}\\n///         contract, and then call the flashLoan method.\\n///     (3) At the end of the flashLoan, we ensure the asset is still owned by the vault.\\ninterface IHookERC721Vault is IHookVault, IERC721Receiver {\\n  /// @notice emitted after an asset is flash loaned by its beneficial owner.\\n  /// @dev only one asset can be flash loaned at a time, and that asset is\\n  /// denoted by the tokenId emitted.\\n  event AssetFlashLoaned(address owner, uint256 tokenId, address flashLoanImpl);\\n\\n  /// @notice the tokenID of the underlying ERC721 token;\\n  function assetTokenId(uint32 assetId) external view returns (uint256);\\n\\n  /// @notice flashLoans the vaulted asset to another contract for use and return to the vault. Only the owner\\n  /// may perform the flashloan\\n  /// @dev the flashloan receiver can perform arbitrary logic, but must approve the vault as an operator\\n  /// before returning.\\n  /// @param receiverAddress the contract which implements the {IERC721FlashLoanReceiver} interface to utilize the\\n  /// asset while it is loaned out\\n  /// @param params calldata params to forward to the receiver\\n  function flashLoan(\\n    uint32 assetId,\\n    address receiverAddress,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x93740aaf4945b904836fc6da0779d0eb9ba21c82f8c13baaaa87710c54651721\",\"license\":\"MIT\"},\"src/interfaces/IHookERC721VaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IHookERC721Vault.sol\\\";\\n\\n/// @title HookERC721Factory-factory for instances of the hook vault\\n/// @author Jake Nyquist-j@hook.xyz\\n/// @custom:coauthor Regynald Augustin-regy@hook.xyz\\n///\\n/// @notice The Factory creates a specific vault for ERC721s.\\ninterface IHookERC721VaultFactory {\\n  event ERC721VaultCreated(\\n    address nftAddress,\\n    uint256 tokenId,\\n    address vaultAddress\\n  );\\n\\n  /// @notice emitted when a new MultiVault is deployed by the protocol\\n  /// @param nftAddress the address of the nft contract that may be deposited into the new vault\\n  /// @param vaultAddress address of the newly deployed vault\\n  event ERC721MultiVaultCreated(address nftAddress, address vaultAddress);\\n\\n  /// @notice gets the address of a vault for a particular ERC-721 token\\n  /// @param nftAddress the contract address for the ERC-721\\n  /// @param tokenId the tokenId for the ERC-721\\n  /// @return the address of a {IERC721Vault} if one exists that supports the particular ERC-721, or the null address otherwise\\n  function getVault(address nftAddress, uint256 tokenId)\\n    external\\n    view\\n    returns (IHookERC721Vault);\\n\\n  /// @notice gets the address of a multi-asset vault for a particular ERC-721 contract, if one exists\\n  /// @param nftAddress the contract address for the ERC-721\\n  /// @return the address of the {IERC721Vault} multi asset vault, or the null address if one does not exist\\n  function getMultiVault(address nftAddress)\\n    external\\n    view\\n    returns (IHookERC721Vault);\\n\\n  /// @notice deploy a multi-asset vault if one has not already been deployed\\n  /// @param nftAddress the contract address for the ERC-721 to be supported by the vault\\n  /// @return the address of the newly deployed {IERC721Vault} multi asset vault\\n  function makeMultiVault(address nftAddress)\\n    external\\n    returns (IHookERC721Vault);\\n\\n  /// @notice creates a vault for a specific tokenId. If there\\n  /// is a multi-vault in existence which supports that address\\n  /// the address for that vault is returned as a new one\\n  /// does not need to be made.\\n  /// @param nftAddress the contract address for the ERC-721\\n  /// @param tokenId the tokenId for the ERC-721\\n  function findOrCreateVault(address nftAddress, uint256 tokenId)\\n    external\\n    returns (IHookERC721Vault);\\n\\n  /// @notice make a new vault that can contain a single asset only\\n  /// @dev the only valid asset id in this vault is = 0\\n  /// @param nftAddress the address of the underlying nft contract\\n  /// @param tokenId the individual token that can be deposited into this vault\\n  function makeSoloVault(address nftAddress, uint256 tokenId)\\n    external\\n    returns (IHookERC721Vault);\\n}\\n\",\"keccak256\":\"0x849f4937af22577d010d35530da27262c56a03854089cb335f0b1f022de82a0f\",\"license\":\"MIT\"},\"src/interfaces/IHookProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/// @title HookProtocol configuration and access control repository\\n/// @author Jake Nyquist-j@hook.xyz\\n/// @custom:coauthor Regynald Augustin-regy@hook.xyz\\n///\\n/// @dev it is critically important that the particular protocol implementation\\n/// is correct as, if it is not, all assets contained within protocol contracts\\n/// can be easily compromised.\\ninterface IHookProtocol is IAccessControl {\\n  /// @notice the address of the deployed CoveredCallFactory used by the protocol\\n  function coveredCallContract() external view returns (address);\\n\\n  /// @notice the address of the deployed VaultFactory used by the protocol\\n  function vaultContract() external view returns (address);\\n\\n  /// @notice callable function that reverts when the protocol is paused\\n  function throwWhenPaused() external;\\n\\n  /// @notice the standard weth address on this chain\\n  /// @dev these are values for popular chains:\\n  /// mainnet: 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\\n  /// kovan: 0xd0a1e359811322d97991e03f863a0c30c2cf029c\\n  /// ropsten: 0xc778417e063141139fce010982780140aa0cd5ab\\n  /// rinkeby: 0xc778417e063141139fce010982780140aa0cd5ab\\n  /// @return the weth address\\n  function getWETHAddress() external view returns (address);\\n\\n  /// @notice get a configuration flag with a specific key for a collection\\n  /// @param collectionAddress the collection for which to lookup a configuration flag\\n  /// @param conf the config identifier for the configuration flag\\n  /// @return the true or false value of the config\\n  function getCollectionConfig(address collectionAddress, bytes32 conf)\\n    external\\n    view\\n    returns (bool);\\n}\\n\",\"keccak256\":\"0xd7c8ed418e0a35958956903000d363a1ddcaebf938c92c5bdd8a6dfedc73c94d\",\"license\":\"MIT\"},\"src/interfaces/IHookVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../lib/Entitlements.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Generic Hook Vault-a vault designed to contain a single asset to be used as escrow.\\n/// @author Jake Nyquist-j@hook.xyz\\n/// @custom:coauthor Regynald Augustin-regy@hook.xyz\\n///\\n/// @notice The Vault holds an asset on behalf of the owner. The owner is able to post this\\n/// asset as collateral to other protocols by signing a message, called an \\\"entitlement\\\", that gives\\n/// a specific account the ability to change the owner.\\n///\\n/// The vault can work with multiple assets via the assetId, where the asset or set of assets covered by\\n/// each segment is granted an individual id.\\n/// Every asset must be identified by an assetId to comply with this interface, even if the vault only contains\\n/// one asset.\\n///\\n/// ENTITLEMENTS -\\n///     (1) only one entitlement can be placed at a time.\\n///     (2) entitlements must expire, but can also be cleared by the entitled party\\n///     (3) if an entitlement expires, the current beneficial owner gains immediate sole control over the\\n///        asset\\n///     (4) the entitled entity can modify the beneficial owner of the asset, but cannot withdrawal.\\n///     (5) the beneficial owner cannot modify the beneficial owner while an entitlement is in place\\n///\\ninterface IHookVault is IERC165 {\\n  /// @notice emitted when an entitlement is placed on an asset\\n  event EntitlementImposed(\\n    uint32 assetId,\\n    address entitledAccount,\\n    uint32 expiry,\\n    address beneficialOwner\\n  );\\n\\n  /// @notice emitted when an entitlement is cleared from an asset\\n  event EntitlementCleared(uint256 assetId, address beneficialOwner);\\n\\n  /// @notice emitted when the beneficial owner of an asset changes\\n  /// @dev it is not required that this event is emitted when an entitlement is\\n  /// imposed that also modifies the beneficial owner.\\n  event BeneficialOwnerSet(\\n    uint32 assetId,\\n    address beneficialOwner,\\n    address setBy\\n  );\\n\\n  /// @notice emitted when an asset is added into the vault\\n  event AssetReceived(\\n    address owner,\\n    address sender,\\n    address contractAddress,\\n    uint32 assetId\\n  );\\n\\n  /// @notice Emitted when `beneficialOwner` enables `approved` to manage the `assetId` asset.\\n  event Approval(\\n    address indexed beneficialOwner,\\n    address indexed approved,\\n    uint32 indexed assetId\\n  );\\n\\n  /// @notice emitted when an asset is withdrawn from the vault\\n  event AssetWithdrawn(uint32 assetId, address to, address beneficialOwner);\\n\\n  /// @notice Withdrawal an unencumbered asset from this vault\\n  /// @param assetId the asset to remove from the vault\\n  function withdrawalAsset(uint32 assetId) external;\\n\\n  /// @notice setBeneficialOwner updates the current address that can claim the asset when it is free of entitlements.\\n  /// @param assetId the id of the subject asset to impose the entitlement\\n  /// @param newBeneficialOwner the account of the person who is able to withdrawal when there are no entitlements.\\n  function setBeneficialOwner(uint32 assetId, address newBeneficialOwner)\\n    external;\\n\\n  /// @notice Add an entitlement claim to the asset held within the contract\\n  /// @param operator the operator to entitle\\n  /// @param expiry the duration of the entitlement\\n  /// @param assetId the id of the asset within the vault\\n  /// @param v sig v\\n  /// @param r sig r\\n  /// @param s sig s\\n  function imposeEntitlement(\\n    address operator,\\n    uint32 expiry,\\n    uint32 assetId,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /// @notice Allows the beneficial owner to grant an entitlement to an asset within the contract\\n  /// @dev this function call is signed by the sender per the EVM, so we know the entitlement is authentic\\n  /// @param entitlement The entitlement to impose onto the contract\\n  function grantEntitlement(Entitlements.Entitlement calldata entitlement)\\n    external;\\n\\n  /// @notice Allows the entitled address to release their claim on the asset\\n  /// @param assetId the id of the asset to clear\\n  function clearEntitlement(uint32 assetId) external;\\n\\n  /// @notice Removes the active entitlement from a vault and returns the asset to the beneficial owner\\n  /// @param receiver the intended receiver of the asset\\n  /// @param assetId the Id of the asset to clear\\n  function clearEntitlementAndDistribute(uint32 assetId, address receiver)\\n    external;\\n\\n  /// @notice looks up the current beneficial owner of the asset\\n  /// @param assetId the referenced asset\\n  /// @return the address of the beneficial owner of the asset\\n  function getBeneficialOwner(uint32 assetId) external view returns (address);\\n\\n  /// @notice checks if the asset is currently stored in the vault\\n  /// @param assetId the referenced asset\\n  /// @return true if the asset is currently within the vault, false otherwise\\n  function getHoldsAsset(uint32 assetId) external view returns (bool);\\n\\n  /// @notice the contract address of the vaulted asset\\n  /// @param assetId the referenced asset\\n  /// @return the contract address of the vaulted asset\\n  function assetAddress(uint32 assetId) external view returns (address);\\n\\n  /// @notice looks up the current operator of an entitlement on an asset\\n  /// @param assetId the id of the underlying asset\\n  function getCurrentEntitlementOperator(uint32 assetId)\\n    external\\n    view\\n    returns (bool, address);\\n\\n  /// @notice Looks up the expiration timestamp of the current entitlement\\n  /// @dev returns the 0 if no entitlement is set\\n  /// @return the block timestamp after which the entitlement expires\\n  function entitlementExpiration(uint32 assetId) external view returns (uint32);\\n\\n  /// @notice Gives permission to `to` to impose an entitlement upon `assetId`\\n  ///\\n  /// @dev Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n  ///   * Requirements:\\n  ///\\n  /// -  The caller must be the beneficial owner\\n  /// - `tokenId` must exist.\\n  ///\\n  /// Emits an {Approval} event.\\n  function approveOperator(address to, uint32 assetId) external;\\n\\n  /// @dev Returns the account approved for `tokenId` token.\\n  ///\\n  /// Requirements:\\n  ///\\n  /// - `assetId` must exist.\\n  ///\\n  function getApprovedOperator(uint32 assetId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x1be9ab035d317e4e8b7ebc3288ae43703f2e2882689fe7c5a758b7411ccf8fd2\",\"license\":\"MIT\"},\"src/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.10;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xcc57c6d7a934710ac19f96e7a8f8632da86aaf10cdcb2defc148ed7e7ca2561c\",\"license\":\"GPL-3.0\"},\"src/lib/BeaconSalts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../HookBeaconProxy.sol\\\";\\n\\nlibrary BeaconSalts {\\n  // keep functions internal to prevent the need for library linking\\n  // and to reduce gas costs\\n  bytes32 internal constant ByteCodeHash =\\n    keccak256(type(HookBeaconProxy).creationCode);\\n\\n  function soloVaultSalt(address nftAddress, uint256 tokenId)\\n    internal\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encode(nftAddress, tokenId));\\n  }\\n\\n  function multiVaultSalt(address nftAddress) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(nftAddress));\\n  }\\n}\\n\",\"keccak256\":\"0x8d038291a936f7230598ddfcbe571b8423d800d30a0dd10066e3c94cccbb38f6\",\"license\":\"MIT\"},\"src/lib/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n  uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n  uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n  uint256 constant SECONDS_PER_MINUTE = 60;\\n  int256 constant OFFSET19700101 = 2440588;\\n\\n  uint256 constant DOW_MON = 1;\\n  uint256 constant DOW_TUE = 2;\\n  uint256 constant DOW_WED = 3;\\n  uint256 constant DOW_THU = 4;\\n  uint256 constant DOW_FRI = 5;\\n  uint256 constant DOW_SAT = 6;\\n  uint256 constant DOW_SUN = 7;\\n\\n  // ------------------------------------------------------------------------\\n  // Calculate the number of days from 1970/01/01 to year/month/day using\\n  // the date conversion algorithm from\\n  //   https://aa.usno.navy.mil/faq/JD_formula.html\\n  // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n  //\\n  // days = day\\n  //      - 32075\\n  //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n  //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n  //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n  //      - offset\\n  // ------------------------------------------------------------------------\\n  function _daysFromDate(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day\\n  ) internal pure returns (uint256 _days) {\\n    require(year >= 1970);\\n    int256 _year = int256(year);\\n    int256 _month = int256(month);\\n    int256 _day = int256(day);\\n\\n    int256 __days = _day -\\n      32075 +\\n      (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n      4 +\\n      (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n      12 -\\n      (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n      4 -\\n      OFFSET19700101;\\n\\n    _days = uint256(__days);\\n  }\\n\\n  // ------------------------------------------------------------------------\\n  // Calculate year/month/day from the number of days since 1970/01/01 using\\n  // the date conversion algorithm from\\n  //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n  // and adding the offset 2440588 so that 1970/01/01 is day 0\\n  //\\n  // int L = days + 68569 + offset\\n  // int N = 4 * L / 146097\\n  // L = L - (146097 * N + 3) / 4\\n  // year = 4000 * (L + 1) / 1461001\\n  // L = L - 1461 * year / 4 + 31\\n  // month = 80 * L / 2447\\n  // dd = L - 2447 * month / 80\\n  // L = month / 11\\n  // month = month + 2 - 12 * L\\n  // year = 100 * (N - 49) + year + L\\n  // ------------------------------------------------------------------------\\n  function _daysToDate(uint256 _days)\\n    internal\\n    pure\\n    returns (\\n      uint256 year,\\n      uint256 month,\\n      uint256 day\\n    )\\n  {\\n    int256 __days = int256(_days);\\n\\n    int256 L = __days + 68569 + OFFSET19700101;\\n    int256 N = (4 * L) / 146097;\\n    L = L - (146097 * N + 3) / 4;\\n    int256 _year = (4000 * (L + 1)) / 1461001;\\n    L = L - (1461 * _year) / 4 + 31;\\n    int256 _month = (80 * L) / 2447;\\n    int256 _day = L - (2447 * _month) / 80;\\n    L = _month / 11;\\n    _month = _month + 2 - 12 * L;\\n    _year = 100 * (N - 49) + _year + L;\\n\\n    year = uint256(_year);\\n    month = uint256(_month);\\n    day = uint256(_day);\\n  }\\n\\n  function timestampFromDate(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day\\n  ) internal pure returns (uint256 timestamp) {\\n    timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n  }\\n\\n  function timestampFromDateTime(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day,\\n    uint256 hour,\\n    uint256 minute,\\n    uint256 second\\n  ) internal pure returns (uint256 timestamp) {\\n    timestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      hour *\\n      SECONDS_PER_HOUR +\\n      minute *\\n      SECONDS_PER_MINUTE +\\n      second;\\n  }\\n\\n  function timestampToDate(uint256 timestamp)\\n    internal\\n    pure\\n    returns (\\n      uint256 year,\\n      uint256 month,\\n      uint256 day\\n    )\\n  {\\n    (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function timestampToDateTime(uint256 timestamp)\\n    internal\\n    pure\\n    returns (\\n      uint256 year,\\n      uint256 month,\\n      uint256 day,\\n      uint256 hour,\\n      uint256 minute,\\n      uint256 second\\n    )\\n  {\\n    (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    uint256 secs = timestamp % SECONDS_PER_DAY;\\n    hour = secs / SECONDS_PER_HOUR;\\n    secs = secs % SECONDS_PER_HOUR;\\n    minute = secs / SECONDS_PER_MINUTE;\\n    second = secs % SECONDS_PER_MINUTE;\\n  }\\n\\n  function isValidDate(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day\\n  ) internal pure returns (bool valid) {\\n    if (year >= 1970 && month > 0 && month <= 12) {\\n      uint256 daysInMonth = _getDaysInMonth(year, month);\\n      if (day > 0 && day <= daysInMonth) {\\n        valid = true;\\n      }\\n    }\\n  }\\n\\n  function isValidDateTime(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day,\\n    uint256 hour,\\n    uint256 minute,\\n    uint256 second\\n  ) internal pure returns (bool valid) {\\n    if (isValidDate(year, month, day)) {\\n      if (hour < 24 && minute < 60 && second < 60) {\\n        valid = true;\\n      }\\n    }\\n  }\\n\\n  function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n    (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    leapYear = _isLeapYear(year);\\n  }\\n\\n  function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n    leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n  }\\n\\n  function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n    weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n  }\\n\\n  function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n    weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n  }\\n\\n  function getDaysInMonth(uint256 timestamp)\\n    internal\\n    pure\\n    returns (uint256 daysInMonth)\\n  {\\n    (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    daysInMonth = _getDaysInMonth(year, month);\\n  }\\n\\n  function _getDaysInMonth(uint256 year, uint256 month)\\n    internal\\n    pure\\n    returns (uint256 daysInMonth)\\n  {\\n    if (\\n      month == 1 ||\\n      month == 3 ||\\n      month == 5 ||\\n      month == 7 ||\\n      month == 8 ||\\n      month == 10 ||\\n      month == 12\\n    ) {\\n      daysInMonth = 31;\\n    } else if (month != 2) {\\n      daysInMonth = 30;\\n    } else {\\n      daysInMonth = _isLeapYear(year) ? 29 : 28;\\n    }\\n  }\\n\\n  // 1 = Monday, 7 = Sunday\\n  function getDayOfWeek(uint256 timestamp)\\n    internal\\n    pure\\n    returns (uint256 dayOfWeek)\\n  {\\n    uint256 _days = timestamp / SECONDS_PER_DAY;\\n    dayOfWeek = ((_days + 3) % 7) + 1;\\n  }\\n\\n  function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n    (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n    (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n    (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n    uint256 secs = timestamp % SECONDS_PER_DAY;\\n    hour = secs / SECONDS_PER_HOUR;\\n  }\\n\\n  function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n    uint256 secs = timestamp % SECONDS_PER_HOUR;\\n    minute = secs / SECONDS_PER_MINUTE;\\n  }\\n\\n  function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n    second = timestamp % SECONDS_PER_MINUTE;\\n  }\\n\\n  function addYears(uint256 timestamp, uint256 _years)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    year += _years;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addMonths(uint256 timestamp, uint256 _months)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    month += _months;\\n    year += (month - 1) / 12;\\n    month = ((month - 1) % 12) + 1;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addDays(uint256 timestamp, uint256 _days)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addHours(uint256 timestamp, uint256 _hours)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addMinutes(uint256 timestamp, uint256 _minutes)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addSeconds(uint256 timestamp, uint256 _seconds)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _seconds;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function subYears(uint256 timestamp, uint256 _years)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    year -= _years;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subMonths(uint256 timestamp, uint256 _months)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    uint256 yearMonth = year * 12 + (month - 1) - _months;\\n    year = yearMonth / 12;\\n    month = (yearMonth % 12) + 1;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subDays(uint256 timestamp, uint256 _days)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subHours(uint256 timestamp, uint256 _hours)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subMinutes(uint256 timestamp, uint256 _minutes)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subSeconds(uint256 timestamp, uint256 _seconds)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _seconds;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _years)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n    (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n    _years = toYear - fromYear;\\n  }\\n\\n  function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _months)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(\\n      fromTimestamp / SECONDS_PER_DAY\\n    );\\n    (uint256 toYear, uint256 toMonth, ) = _daysToDate(\\n      toTimestamp / SECONDS_PER_DAY\\n    );\\n    _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n  }\\n\\n  function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _days)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n  }\\n\\n  function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _hours)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n  }\\n\\n  function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _minutes)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n  }\\n\\n  function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _seconds)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _seconds = toTimestamp - fromTimestamp;\\n  }\\n}\\n\",\"keccak256\":\"0xb2258297b62f4e67fcca4967ada7d27d323612a8e94ad8dcf536f2af4229de03\",\"license\":\"MIT\"},\"src/lib/Entitlements.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Signatures.sol\\\";\\n\\nlibrary Entitlements {\\n  uint256 private constant _ENTITLEMENT_TYPEHASH =\\n    uint256(\\n      keccak256(\\n        abi.encodePacked(\\n          \\\"Entitlement(\\\",\\n          \\\"address beneficialOwner,\\\",\\n          \\\"address operator,\\\",\\n          \\\"address vaultAddress,\\\",\\n          \\\"uint32 assetId,\\\",\\n          \\\"uint32 expiry\\\",\\n          \\\")\\\"\\n        )\\n      )\\n    );\\n\\n  /// ---- STRUCTS -----\\n  struct Entitlement {\\n    /// @notice the beneficial owner address this entitlement applies to. This address will also be the signer.\\n    address beneficialOwner;\\n    /// @notice the operating contract that can change ownership during the entitlement period.\\n    address operator;\\n    /// @notice the contract address for the vault that contains the underlying assets\\n    address vaultAddress;\\n    /// @notice the assetId of the asset or assets within the vault\\n    uint32 assetId;\\n    /// @notice the block timestamp after which the asset is free of the entitlement\\n    uint32 expiry;\\n  }\\n\\n  function getEntitlementStructHash(Entitlement memory entitlement)\\n    internal\\n    pure\\n    returns (bytes32)\\n  {\\n    // TODO: Hash in place to save gas.\\n    return\\n      keccak256(\\n        abi.encode(\\n          _ENTITLEMENT_TYPEHASH,\\n          entitlement.beneficialOwner,\\n          entitlement.operator,\\n          entitlement.vaultAddress,\\n          entitlement.assetId,\\n          entitlement.expiry\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xba6ccb5d61d2e8df7dce1d5b0d14b1786bc2a633c46f9728906decf0020d58b9\",\"license\":\"MIT\"},\"src/lib/Fonts.sol\":{\"content\":\"pragma solidity ^0.8.10;\\n\\nlibrary Font1 {\\n  function font() public pure returns (string memory) {\\n    return\\n      \\\"d09GMgABAAAAAE+kABAAAAAA3yQAAE9DAAMAQgAAAAAAAAAAAAAAAAAAAAAAAAAAG4GUfgZgAIUmCCoJgnMRFAqBzGiBtRIStyQBNgIkA4pwC4VgAAQgBYYYByAMgUkbVc9XIne7t5hUoLyBJf3Wq12tmnCXg/NICOGa01R0IAbdAfivpiqe/f//f2YykcNyKXdJayjYNv+MnhQeIZJWa7JBTglCKfmy+WWxcFrZ54w+kWKYLGyFvgWkbTW8lMqSQHp7yIIHMolZTcKt2UE8C2JAlq4Njm2JWn6Wc5Czgq5rM0I2v5ZzOLmxdGembPfeOzZQ4WRx7c06JKTD3ry5Oh/7arBq9H5CFVZPBTkbPdo9Mq0f0x8E/mOqmMM3uGirdVgcyiWtO+FruKcXvDfnSf8ezaPwqtyI0dEPjve258TVUif+ii474B5+hY1rEDVm6ehX4p8fB9+c+77INfJu2wioOYEMTRWMm9YZTB/3iDarmp4eZQYyiAXYQeUkIYQMLESVhbvlyGU1e++8iLBvnGHnrmtG/8SFvv1nEYtELBpPqrVOpyI9YL4Bfm3+ofQBB0ddNnFV3t27iIC7g2vwRCKtZBML3XDFxGCK9nesjM3FnZ8lc4UsU1dYK4bWtM6ZGv0g5LOxL+wBQ0qQAl+SAofabmghyzgLA4t02bE5BireAzyf+32e+4B2S5guowOEpASslpROXVoWskJVs5CdzwP8OHsDEOKF3M9RoW0+CX9ya6il71bhz1bPbqj7XyCkbgH8J0DA/5FOvW/5fi0CjAGgsZu3Em0BAKEBxU7Y5pfU//T9XwfVWbLULclNtnGnGQiGxBTTkg65r21q8/bT0If15u/T9v6TTv0nBf+TCrx368S0Ah04ugA7KaPdsr2GkMsbHfutj9+VsIBJRKyXdRcAKOIsJ13vRRQo/wMAeKq/sAfYkUgAAw12wicrELddsSkfwd+ACl8E+f+Pg9VME0hEhYsJLpCd+77JsGK1ZL4E6J7agAACoKG0K83lpQsAL1Ch1RnToYkkged5QPimCx7+p/2y72bI4YfWJc9R2gg3/1s103nzCKWH1kMPfX4ovUlwpUoePbQe+lB3HZKzav2qPWvMCmNXuJ1/Vc2VIASXrrQq373Wh8m8Vpn0vbRhwv/4H/TH52cVJIGQ7NB0o+hGtTOlsx8IUjqA1PmpXNGV3knJiiXbV+RrVel9vNqm1LLsciZn82XKmGG8bBmzZ10yZsyYKzXXeldvqOP0jk399pieoegYmoY/3dpzXskivOOTskx8E/Ld6t4fJELORQV1SV9x3/Sbvbm3V6BnQ2vyPNajd2bLz0wKKdeS0JuQSIxEKOTpXxylqVqfx+G/BHIYTI76N4FS1brH/CbWq98osZN2DRbCTFxX3QyOUIUQQohB3V73v3zn6/tXNvTrDbc7XSGEEEIwF2OEEOIghDuOMfW/B3Zs2r7EDAcmxAnKMQTj+3PsD13/0b929Wld465jYSmEkDBUM9xof4TgxW7D7wV88kUFmGbJT+CzXpOLWC9+dPsqvstvn7vC0decunudDAzoI2ErnalEKhLkeVz9e/s61n0iECMxBObnFy8DIrpI/+WaqmFUN7toyAeOZ8fV8dWw5d5AjZ9zm3PX5V7MfV/DEkoGeY157fnQvN688XxofsCOhOWrOO5g/rr8t3lsB8WR4hEwCmwDT5UwSjwlWeOdkveNc3jeO6VI35emSufET9WgljIRNFSRgoamiLJ02aayI2Wz6t3bWNeZRP1Y0GMQCaQDMlIhh4xCDpbzyo9VlNwM2mgqUvm4ARUdTm6B2iomeZG58B1oLrQYioLaqH0I2tmyHzpce9Q+lnjzS31YCdLdrxytPFD5W1VL1dVqQvVk9cnqy9XZ6h9qimtgNZgaTY2pZhPK2ar+ZyETPwoJNknRHEEU95I0y4v+YDiuJ9PZ1bxZLG/a1XrT7faH4+n27v7xojUYzXJ5+TVrEZPSboVeffoNGDRkldXWWGu9rb774adffvvjr/+69OrTb8CgEVN4ApFE5hcQFBKm0uiMam1nd2//8Pj0rN4wZcOmLdt27Nqz78ChI8dOnDpz7catO/cePHry5ds/EsUyJdMyM3PyM6UVlfUbVbfroceeev71d343ltBIaV9IKkulVmAoxqkWrAMo0ChZq8HaPPNMfm5428LaQI64pqniq2HQ4BhBtRRmBThZN5sNYkxfQXqyX9XTrwtUp2kUrRXSpvgdsrvi3BPvvlI9dtkxa+akFf166tVs9ULrfE/2uJYIrRNh+p4LwqDPDIMTFlC1sRRIRlOIU4xVpvqOdVXb6iyN9LVart1YHd98R2Im0GSy/nmNQdvWtWLm6NgSejmEQCGtX9Y4NIuBZLxUpKqKOkaHgbogEHkEpJ3dKwdF2GdoIcKSPCjkFi4htEEUZ1UJVedQKPKFZCkuBgZTdDThGF3aabCHoVw2S7Gf1/NAQVUKiItErFL+CAg60yfCUrdAa57JLrMY3J5uGSxZMlYqFPeIsurQn2m9OsmqrbRSyCNeXQUO5O0ynfk+mExJmJhOgSo7b5WVJmHlg++tsJU5vdjvbB9ZaFhMUNWj7nK+FoCOK1W40yxkS9EoLBlT6YX5ASE/qopAWpGZhsTDpzWB1SRqZ5t2HEPlFJ5t+pVJo2ldDew5FtZaYcK25Vl4Tgm5XQUeP85qab/XgprIfn2NjDVpWvlr11MH47ErC1NnUvMxwTllW3Tl312TN3uVS4jMbFigA4usBnEgkWXY440BiOyZG8nTiNMOO48QQ2cKelRdYqAUAICALEP6ELAgrhkNPqsI06owsVn4hAAxuZsj5TY7qtrne1XV1MUeT9Dh1TO/TbtuMhIj3wr3MeiBdKLCaeiYPImnOjUrABXLHskBswwhIDwQ2gQLTpgH4+vrHYxqq/oUxFISdWmATEyexlpELnAGTI0YgntsGPFGQIyCGAMxDmICxCSIKRDTiDcDYlbVnEAuyPs6vyWB+fdJA3KRotBySyvuaGWdddVdT73y+/418YYIUd4mvwfujz7yic/mL+v3gAeT3RN72Mso+5L3A0/EJZRSRnm8CuA54HngBeDFuBZ4Oa6faKCRpidrBt6NOoH3SSKTiamJaTkTmWWOeRZYZInl5E6iERkyYsyK3IhtssU2O3J33x778iByyBHHnHDKmTxfuOCSK3m97oZb7uR94IFH+ZwIiWQce+eDT/mVyFVxU7/gj38RHHQJYAFB4zAIYyGTlP97QqaCTAOZDjIDZCbILJDZIHNA5oLMA1kAshBkEcjicQmRkpFHFyArQVaBbJhkMjHlhpYV64yOB7QF3ZPtQI4BORbkuJPu8Tmde5+poqVaYHbjdBcqqzGdbkIje00NraK1G+ic+yc/11SYftqlmPjc4LZjV/6zaL7L+w2uNHq1/dseg4a4SOnAIAAkGBrQkuTRDQPwDZAaN6PWAbNtZY1AhzprxlMoETJOFe7v5WcoR1i1r+p73S3rangZYEv21XHisSsCaJDgWPw0zIbNUuXdBjdL7/SMoCZ1MmNjxImJmyAhTKWOCqdq4lolYocnsRiNq7eVIOXEzE9Zdal+6L3W1IrSzl4H7TyF9nAsYZCLbdPQ25CZv06upme7Z/7nqVO8dLoXu0c2NbXQ3M7RmV45xyPnsn++sotc8u6fO/AzB6cd+mmAm4bbj3Y5JnyKZ1j5lRrOkp+XXd+q/LzBa40e7aITQ4JEFwl6/KhJWtJsy3LE1mioISxrv0ClQkLCCMxo9BEBMgqDARMRjgyI1JcOLPCZhsoM5jVzjKRTqRjjqRQwimHVeB2uDblHt0f5QQ/p7L635alxLRNaIeJotcmZSgqJUbDmZzDKHLUqsB8wLs6c0r24tolYcliS6dR0kYlhVl1inG1JqzTD1tgaSl0uKTta15itJutCMNx8iLK1BGXj0ZnhxMybovwmrBXtOtGNnAnj6puxTKosTllDOHo0A5tVh62uzuxLufQDfuwtKBCIfSKKqUDIuOyid50HZK3O0XHhsUvBg3SfbmZQMFAAgb8Y6xcd3a9i/Tr76j9fRdCTUl/lUv0i1q9a36+b3QhHkAhRDKVNpQ2bxzNNwOkW85RqtQuNQVWyXk8jNEuLIiPttxKlVCgEGVVFvpChqo46giG0SasARZNHLuCV8vs6PCEQ6mBSw2BNG2EqlD68ixbEiEwUY3J4o5Me43uQMoE3ieuXjavhbYedwnq3atl4gkln4pxP8hJ8csmjDAjlVACtFpo6OEwE2MgQkXNHgQiQmw3GoAzipycTEETLZBEKRg5pdGIseRwygTQZLmNsQKtdn+uuiG3BkkuQySXyKKuUGYtcOgoWwEQWmL3F00BMYcQAAkFBgkDXM6hBGnq1TgCBQCDbm/Bmu8nd631L7F9p2yQ7Hs6hPVtGmr/QdxT7FtT7hAbWxhOQNGQOXRTIuIAyFGVyVDSD0EJWtlkM/uOxRDNSJnBxbC6Ih+S/VwZFAaEJeApRmZqx2UVUcLU5GPSYHLOp7iuzAkmarJdF3CppGNWH8M5P9oR+DgqoPoZHfLFPkLtB6VChn1Hq55T7z8h6PPKejAIC2D1SYKu5zkUJrYYwUOQgIWsrfdFsFZk1b6w508ua3CrGlvlJrWRQxQPKiREJ9bn+j9C/EvH/Jl2Q25LsQHD4/Br+mR1mRW0f6Sc0uFo+MgNFUY5klGSM1jjJBMkkSQG2bgoWkUowRZVsQKqRXEJKriOPMrOAJjJs5LxRsAAmoolcMSENXIpBI5HPM4AQgr2uUVzkybPm1DRFSlh1YZ0W1RpEBKIne/ToHt00YETG8QQSWEKXGoROxYnQasWjIKBcVTiglTLuyGWiYAHkLChoRJnHU1hgIZojM3nZmBzKKEq/oKGgiAcpl6CSS+T5xaATU8bJMrbIZaMQQO7wzTGqQGVzYR2qCzdk10l3kOkmQICM7d9eJXbUOm6Q3de1EkPOXA0HR80U26d90gSN5vo7p1yfSGVHEAV8I/pHLAyh2PButEBrfnNHIkcHYGcsv6HupKewK3NEzhqAQcgoJaw08d2LiCbMwQgU/vb5BWAmTEErYyJHBYhChDy55o5uKKg6i3qeKXn/w4mzNqUYNOt7Fp4MGibpoTuzgy033+LcbrsDnVwQu5MSq/Z3WX5WLrj2QugIpm+GoTXWpmIqzejOwi2kNsprQM+PUwoi0DabX7ERiFfgAVPQzlvAYOfXR5lFI2C/W0X1KLOIF9//418OqtSdKDhf+88jlRv2Ds6XmZrud9O7BRPh5F5ubJJShkXqBwXPXTBz4JXBqxQfwQHU4sidgL+voYgSxd+sOn66Q3rptpzOxJHwSDCh8Wob1yr4UBprqjI6uHFol0NL2P4QkwbfLd25nnqwduJJ8a+KUGyiqJxnDRbzUq5JhUjY7WXQ9/9m0Eoj6TRExwvl4P+TD7+HL/WqxL2KG8A5adgqJU2hevuvohRYxV758Z9VqssB0c36BeP+j8cPig7jQCJTe2OoPMboFtj+Sj59vnGzUiU4zSrawzMNlQncUxF4nJ9RJyQG5Y5Xrq6slkG1A4Q8rw8t4TTgUiCgc6LEaaTY108akYz9M5Ne5aH+QBatrwNq1earzSmcJIXzzPDSophS/SQmvFjgRkYl/9C3Ow+UMHx7SFjKCOLxlUD56p4RtQmp9B5tKE4di+z4heGpxZXpZMyhJVOtEqdeGViJAhQVl+FntdoIvMHMZSm7lMiZV3Ktf3zV1TCjrDcNbjVVsJ9bNKrFpgkRaSfCqaE0irfy5ToUfKJIG4OpgKTxcuooN3QoA1GcSDSAgTSZYIs20ghF3qzKRu4y9enLjS8hTG6LgVR2Y4eerO5s/oKyT72hTv4HoYHO1gt4OXdmZciyCyUV+6Qc4PvIkHQY0v89A204zkU/4PtyhpnPOn4tipUIveb+5Z+b7qlCSgnDfv6vg4KQB2sljRAdyUwX5x5k108rElVqwLI76jLX1ckfR4ojiYnGPZpBwnPEAI44CV9d0UayiWWrwqo2iCA9xrjLOD5YqT5HU1OAAmJLmz6bRPE3pFeusG7UmZari0jXWrB3wLz5AW08V7kIldyFrvdCGHcPMb0h9QIkdYgT4OChwXvjZ611RGtJ+PG9DlgBSwJXK5Z3P5wmiVwOi3mygm4pjcWGgqF3Nz1FBADNjj1Ga+Y2+2TsxVttrspO4rE8rwmzKvcckYcosEEn+kBD26ugiOh2s3BdLVzI29HY7tcTBU54cB95zRy6ZitorCrb6o1aJ82Pc47wV8EuxXv9lkz7s2tvmXtezgkZzdLoJJmHlZkvrlZu5l1gemLEJ0VwkuBHvIh46w/e8ud7fRnjUONRb42VHB6ipG3DKudHUS+YVfwJS4/tkQ6cSzZ18Gl6OyvAJfwxe6EYWBd2zuZVbVCq7VyEeduOsihK+X7ncNJkj2QZpeIOZYQMVoCH22yMYtmrF+t5NKZP5936Dxgu92c43LlEoYI+nBSmg0zCBQ7lY/+n4s8IlhD5bMDblbHleH/5WZ6jLDu1ByXdTMuZd6TSGtp1hjN3+WG0v1UWRhr6imNUcry9CE5UEOlsaIp5USS8eP0F8NJoSY3eb7htGFmIvA0rGp8e5k06fqm4R9WvEZn7I1k0zU+ChX3fI61oq3FNpnak75TEEP/vhVYr2M3ZX6kyxanZ3A1W2jy+cvnM0fS9Nr6K+MdTyyxylvlcOez4rRFjdkPxxfBO73qW5gKWMbh84tKlFW+cJqsYEj5vfUDf5JAB44I3fDsMFV+GjFPeai5ni37OJYAgUteGM695HyupMAfHpXbxcWW3cBtmWh5FXBESF/AqrQ4PONsIhQ5vraeb8x3/8S9M8YvezA2l/PTc+uNLx7fGH6137Mlnl49++Muv2YxoIQ4uysPHtfiJUGy+vLQ9JFjDfxA8yvryzGNRuhtr3O4qbuIKEt5bzXI68dV9ubBHUD7mJGmGzNAL3i9w4Hluoy0eSjpfikrN5fpkysLeVVBxV1TDSewG62FCx4sfteLU3Q/0PnEHGlpcWrtIyqc24k6waGTXOW16GPDFyk9RjImVZXf8xYjAZI2Ly86LvRMWVCKY0/lLapUBvYNkfIfymA6TAC1PVdWA2BTzThUUuj1ot5hTo49++H0a9dz6Ew0DluzSgm3XMcowz0CtZlw2vLVgE8tiLNdGBZjaydJnuuIhPssJgnCTSlSCpVI3n8Me0uhMrm4NYAC53ij2IkM+lj3VjMOo+iHizDFQTQ+WV8TU/QfyjU1n0FPb6sHLM0sqsMz7BxgMHbvU+qUtWZZLxVTl8jLMyIAvPCojqHfzofeVomBJNCPDlbHNWUmof/2nx5+1q8HthamzRsEyMf4vkilFrKcN+lsGdQOsz3uX6XBsxkHCqvXzXE1jlhUFn0WriMu7R689ugGnJpJRzQehZVyN9IiBRK36NgQaPpnYDfRCxg8N4+z2i9gT6e/xTyOfLOVs0rhD7m/XS8YPadeF8KaF4SaO3/zA2HwTf0KM/lRjaNlV4i7K7T8iPsoI1bks4qVDNHmsuf4eVOUM/xr0sbVBr5TbJV1X0KeLHvcihwynLhGgNUX2FBqChbumCEfwoUSuDsMGQTaTMuPls44XPhgH82CXY9eonBV2KhaF1bZnDHe87uOlPAaNLldVyrd/EY8dXEZ/A50OS2ixhaCKvqSveq9X3qpn+QnKjWalddjhgSvHiW8Sx3os2qQ5B3EgLqGdt+ehGloxfAOYHgv5pfj14muybSKRbujihVJRd07Fu1TnqpQJy8LDz6Rs5yQ/JcVIWlS70Nx7QEl+HeG0n8Xt1d7RzVfz1EQksbtUj4DN/Ys+tEP4sLnvi3cqsg3LfDfO0R7hDBm7gC9oxWOG3xa5nP2qJVuEYrVlRBz1oBky+mh7DSRnPaWzoCWNz05goR6zVGGFeUX4O6A6GWpAtfJRB0jVXr2/eMCC+MooPKjPU2pyPkcFrXxxzeV/MybPibP50LyugSiM77Hi2LCcZQclHwGfJVcv2qefYEJjcUfRs/YktUD6HlQGVmRFrdx0YsaL2CsvRSeyHH/zMGPB30VUbd9LTF+WtZ+qb77oVo8VZXINWSF6jLvCmPzCik89Kwz3gyaRVw0J997Af29IKPZQpWvDjyzCS12hA0Sx3YtC2bYekexqIyi8XKzIoPSoMYsCbdA2iqrbw6IaLp/IdBg0ZCQcp2o8KUzZzNCfHH2GeqpZUXp/tKhXY1t9VyoLtGgltoercXFn0cy2y6bed+VxFFcDhAHn+hZBgv8h5u4TrooaPMbPzfxvWxyxhDtlS33tvfvTW+ht5fU8ncRaOiyoYVYQ40b67wWs9qaNAG6o6C9q+lXgF7kjOtplAQe4GjxVB7UWeYHH4mvo+ok7CF76J7adpAzA03igp/AgDzNR2qkqtZbT3Uf+hxYbf/Qp8TNnEUDm4/Lt5W17fAaxBWA/oCeroc0mDkGY02lZMggwbI2Pv0XMTrs7AEF4YZDSZMhh2mcCh3KyiaHTtsgQrnZpjtolA937Z8XRGxrd8ivXtbARtnzHhkWxA+hto2UID3DNpQTsAYSuqboS8UtrpWaMtvA2V77wKe/gnVBNIrr86alaoCN6QltNn1qLm6FeMbTqSO24AhxM3FAf+qun7nq5vW/a0PYNaJ1bxv54Qsw8Dy3Q9RVAwwly/GVV8bNkB9jFpHtqSkUMtyKaYIOkIMbRXLm3aa89OlzPINqKy/byFsQJYAhEC2DfS471HwozwWifAMeG+PjYmDFkamQInC5WAwQlQphDOeXEWdxMCzG06+jHdXHI9weWh65DAQmYJ2xcgTynnTVpZBhrexpgDxDYzX+0McQg358bPm4qV0EQeTWvgWqi5icg0mUuR6wGbWQSknGpjKJ425drBHiwv/xgMjBQ0/P+svnMr4Ldp/0ydMALbl98JEDyIbT0h6OBuW0pwYFnAPmvssAaguD4ABaAEtw3rv3Ahdai6Mfzu3G9E/zWOc5zgUtc5gpXu97NbrPbEWJvhDFI2jBkcUtY1+rTVX91nOl4AnwAdsgmW2WH7JJ9cr98uUt7AC0uypr/1Jg4wbKzE/IXc1dxNw1+l72BiAMRx6J9sOJMU7M1t+oPfT0K3gffyiqbZdvEp+7NOYP/Sf+2MP9w7q0333jt1Vde/muai5x96kkbO/oT/4RfvyK/POxP9PtRcAT/q+Rak2/+MdVA+zqlVjf3qbgC9ABVXYHsad8RxNF0b/v3+MN2ONW3zrTT2XY53x7/a69z7XahfZ5uv2c7ZLoDnu/ITR32TAdd3HLLAD4euW3ozok7xu5juwd318y9hLtRD9Ae5HiI6xG+h3keFXiM8bjQk2JPiDwr87TEM1JP6Xle4UWVF5Re0veqkVcMvWzgDROvq71v6R1zb5l5z8Lbrryr8ZHWpzY+q2Rf4vs6oa8IvIboTRRf4MXMxMjCxcnN3ifYPtToYyz3A4Oeg/SBBp/jPvEUVS6pqvRK5oyYoSWl6GSAKc1LkwVsZacyFr5uDed4O6ifcKSz+p3IpnGSux+DBe9J8U8cb3BIfXHx0KVBKye/FfDq0aS25BjAry8etn7F8LwuM8WrDoyd3S2Giy+eOmuDCgafLXJu1TQVWxb0pf2gi7rE9hr1TfScMe0pnAEfBFYNavHlaP4yeEf+f8FdCusniq1fOavntH05qGzvoFElJcVD9tus7vigKjHma39UJOCaZ5f2l8vFwaj2nTdJsJIFbXuVxayueillJfbl6qparQGvR+f49n4fBaE35HgPmpAYcvJy9vPTX25FfUc8okGJQTOY15FqC3podZR80xACEjJ2E3OSbbkOQG4AeD/w07YMdn2F7LvoIlRo3Tu/fkitXjQkyuUmrBUxJEb+MC/DSl6bRiG0h7BIlnc7EdaKKAYGZmbo//ZjBHdEvZl4GdEZ5NqS7wjOLp0stjJjK9EG8SaFttGFaeK0oCwiMjahTbe0/pncm1549JQLKTCjKjMEAgre8kPbTqkq8JIxHC650D5WyvXAWOE4oIuTRPMkZIPQGygNiHGj3vkZGSEarZX95y7hRFJlh6Grk54ntjxmSgmbc4yjcE2fnlerr0Q2CxOFfSXxJAnDCO7KJkuYVtye4AlV655SdRhSilWIi1O0UR5Wvj49CL8vWLBAYbnsbwX2m3AXwJQ6bohvVfwOKiXNfDcOVTLwAFgkoAWPKOUBkfgAPos/\\\";\\n  }\\n}\\n\\nlibrary Font2 {\\n  function font() public pure returns (bytes memory) {\\n    return\\n      bytes(\\n        \\\"\\\"\\n      );\\n  }\\n}\\n\\nlibrary Font3 {\\n  function font() public pure returns (string memory) {\\n    return\\n      \\\"c7rqhmWURaSHLItBkKbcWzXIVB7GNOitHYiSh3t0z3OtG5aaDCqCe5JbNjWdADRsgvP8eSv1F8OMFlPgPVJumHPV0rprMUPqWoCiJPokCByRAedfTDwfOOBWZSFMiiRqrdkHWSgT01mVLibIzyUpw40k8mgTZDJSEDiDmeNvJyd+KQBLjcsSl5csZzjooKkf1+ik70t0GgAwmOXt2++VQF2uMY7iNpNE21XgLWsf6zSqTUonGmix1Y4eJTBA3TrY2FBAR+CxubRQFO6cisDfwUGSfMw2HG9kO2MTNXDlakckVtZkN772jTRcWLXO5EO7iB0a/BTzeuy0UwGxbOepXt0+KfdlnnxyQlbhVB+Kq/lS+T3pugMVVu3vTMJ3BZRd5cgJ8KoE4E7t6QL9yK8DBafuYsSRUylTP5krkKJmBI1joVFIolpD+7ICtLBVYEe6xmr0qO9Q7mOEhc5ahvXV4FfBAfmI+GJYnUuX6avZymrdYdlUGe8+MvAWaayKbIF2zgEAucOAcrlDaYAo0eP26Ei7bJwXIGUCsUAg3Nq8+hiKoVB2cf7uS65+1LbeKR30QFaYdSBzyLAqrzAshQAql19OdldkTKB6Q9HXYyGbRUpZHLOSqtY6ngSYoprBJTl5iibKhk6LA+uBBg3iN52Qo4mYF82nT7081eoPRvOzGiU1oX4LUp4/MFRzNkfyHgYwBSPpW+PBG+t2dK/eVXB5QHxx2Lc2+R0ELJlglQXgtyfDJK13WpxUBi7ZgvoGRV6G4L7Dqx+h5IDuB95SknJrvr1plYURjgFdQtTp9VgNisS3W4yj37b7JWXtqAe0ow7k8sWoc8R32HZGWXSloxEFNeRkFDm8lBsmOkc2b+oMWDt18X8yHxpry6oKNlF+ZGOV5/WncX/P38es3xr/7bl+YWueshReeQSnlvBur1wweMeE2a3hZQ07GpOx2oNph9RD0fDIXl5F4U0AWnvGgoPWQSFY5BQ97ZKa2Fcu70lrip8GhPXs3KCjhGDv4WYz0qWOBhY8eG74G3sTPeL7cH5hdGuetsaaH0+Dv7xDB9Q6apsQSaE69I/d8Fdvjdm30YvmxIsbJ4lBa1Asdd86wLK8tADIS7VxHI1nXEKL6maO4rWyVPI0OMpBzTZEuRo3lB2F+pVbTY4RakLtPNnPUaMdnsrylEFQLtIhWFoM75DM5e5ZM4pNhXNguTpe4AEmkMF4dsEqAV4ny2NDvxgpZtd85iw3gy8TYx5wC1nkkc3Lo0ZQkSNBoi1XYQJT4sIe3c3iDXcKz3STLZnLW4pOE+R3kTb6qq5lnJo75HDGO6wuqKlIpraTaftqFJWZJ7nDSPRQWAbBP1L3RHpVh54cupQPcwLzonxIQ7cbB8VAHhTqLQxFn5ArIGj3g2x5WpFEIikUEAuxZJne47Q0NeVnrkS1TH81zd9A/VylsAUw5VoGKg1g5tm3q6JlguQSwhohDHwIL4o2CzkJy8DSMZSqPVeNnLMft7YYHO7uW83nBwUNwXP5GY/RcWS55nVw5hs5G3vFtUjtZo4TEA4bIIJ8m8d4Aw9U8vjfAlaiyXM9dGOk/8eoAYDHjaC80qhatA1H1QbG1uaRf1GVFNpalyloH6/JWtVQHfeNWZS3XFICyVIPSjGFYqpJXGntKwm7qbd0M6sIk2+A6pAACWe3nR+DO3KClZKewuHlxskDZT82g2YxkSSlvBv0T7vT8SvrZnGkgdRvqcFD62FOMqmIbaVR+5hEldJpmxwbveKpiAkTs8onh28NM8WVC+qQ2PGJ4nGK9sg+xEatD33YBfvq85GVLueOzdMD9Q06cz7iTnSdZ1/td5PNtqCL/uJ5zv99vedXO4WPHnRa6gsHOPwcT18qqpxol5OfTpS7FkNpuW1iI4jT10mxQHT9auRazqnq4hMROVgm4CkoY5MOA5afp/WUoKTGTddV0QGe1krjyKJa9eGwdXiAbX4r6q9hWRSf9KIH8TBWo8GXZzm3oOXEBuQEu0ySLZ/CSuKcyovEWsUlC7mKSUSXKHEB4Uns8Z6i1CochsMaUPoQAPS2lMK0D1FkA4d1a/3TkrzALcP2L8gCDTKC1LjJW7OALGjN8YhbkR5bo/i1jRbcQgGb9k3YJzOlzMBBJrWOd3MVnJzTOPlaBpJCKMDjxx6pvnEuahcZDNrq4u3iZTZs1yabkd7DpVY8H6zkYqig0mOVNB5CqXOfA4qvBI+1N664A9xJMg0XoeQYkzrfAtDrNqCt4Y66JkBxWVqe1MVpP0+R8/xa+0b10yLe8MQn9e7uoOP13erVMy8pmpo9MDWg9N2+A2i9WW/rCTTElqus5aR9IFZmQbhVbs2pLsiW0PAnCgDUMQt17nATQnPviYG3V06es1Jth0yoSU5b1teU9g6XnXmzd5e7ff2eCDfUB2S7YG5FL12k3ng2l5FYbFmWBY4dg8+4JAedgXceQ3oEELFYOuUF7LZ9Cuz6OyCKFpB0YAS/jni7zU7ZjObIZJmTpVcnsJLDDHRWAs8Km3XFHOGmMpsrZuhmCKYIAOZ37cyHm298XtWWEKW94V0vuAACyHuMitRVb9ICYQm+mcIwuhYeA03vxPviNUCuqpEE1HqXM4ePyvDhIiu1wK0SUWwU1oTE634BSsC40UkKSU29eKCL4dMxSZ3UkCAl4uIlD2+9SHCWvQzuqtYCLOopBXQV5baAgftUgmu9b9X2+IL5PxOI6uj5wepLaL1rFVYtcJEVAbkWYTH0CXtBiE1Pm2SM8AaaX+S7oDkuQBFWdv67qIcm9axnPaMPxQ8S3tSsHH7GQLMhL6ZlCKwLRfFFqBnGm5NUVObeWMdI07o3ZYiMW6tOLZJNwEoF9Otnjxh5JL8I2B5hDN6z7PhRN2qOMRacQhUVAOiMEZoedkyxE0avtTvIx3SxjnVWUxIJ0wEAloBc+KJmFR0IO6AyeqSCyqY9cElKYqItjPGU6mG8saxzkhxkrdQQmJIW7gRvfWxTyrLF4E7SrjJVWeCNQiRiCoLA9nRiSzDB76bhznICTTIgERU7gNsdL1rTrS5TPH5zFR/QhCw68Eh2EVIo1qrYhvw0gXU0I5OIEE6zUnZUy+UrRudsIm+wIj3DRmqiJ5+LyuVJ1jM4N5iSkdc8vPUqwdk0vLeDkrRReKUvT8heCyNX0QNMU4ovxQqt06uKGs2QS5rUKmnijk3pUu3u8ZCy7MScgKpgo2vtYxPCakFpnoH3Mqi7pzKr0sPCmipm6t8Rw2qKCNKyBLCR3l2sQiHsQ9YMyA4oPLIAmfKaY/ssIDKYhIoB3kQuvp+2PT//VCnO8TdoKRfLgRULxNS192TPdsfl9tk7p7/M3O4AfhaGOqlynWM1xADoC4Uq97NFvJGORNGrUUjDs0nIm6d2gN6NZA8jSTieEUbeGvY+0qKlbo/JVv4qkJurtnODwF1kq2NKB4Qi3m2FSPL54tvyIuYJFVC9+IwbqJJK9EkeVlZiarG2f453uKGUwzsuxGf67NSz4ck9B1tN9nwzW8rTneZ6fuqmFyE2zXZclnmOOU6w1e9MRcc+pNRnq9NxxkDlkpQEO4SiyFu9OVCwCk9R+Zcni2PnBlPyiRvPPIFpZZJlRX3BW/lVyeuvgeBQAVXlDvkoKbe7tM1vBXTyhziglCrDoNi8G+jcPfCme5BC3719p3vvXzgbWO00p6Hfr3uGZufkxtGl11LxuGWH/QN6WXkusLaH0kQiRrjQTPbeABuVnwN8SN8p//OkBQexks39vEbw1tuJreMTwjsozNkfMK+Y3mbcwWRij8N72Df/BIC4b/8XGNANoTdn9kzPxDpPf3d/d/qXiT79l2Ure26uMw1lyH72nj3aAzT+bDJERdNfdwgCA1EYdaNBRDoSRdvbII1EFgmtxVNhcaait3PMSzAJqeuTpKRnEdhIx5wQViAHEsqHh8XliAKmZIs7PLEJppVmWTYpUVbRMsaeXV4LfBQTYefeDJH6Yb7WnOvY+WO9+2DDlvAcM7Ek7dLnWmKTp4Hc4W7ua7k1otGGQN8Wfpj3fbhnPmekBraBgsMZPqfNsyNbsrJbbaY/clmDx+iOB1k0m0DPcksWxmeHtuapgTgjjVWKGHIJJiHDaKFoOaZZgF5L9F1hUVQaD4vLEQVMySPu9MwTmFa6Z9mkxFjF5Ci3Cl8xfbpyeEIFVJF04B0U2Z5Ofg7AQ4RK5TtJuo9XvojMlyxPRiTgASL4YWSIBx6pqOOqnQ8impPoTH2ee0eWIkO4dy2se6Z6MQmA1H/i9ISoYlYGWyzfJAo9gPRWq/eHl5EHm9z8Oa09fImSFokCVqXsrYJGvUolNarEkZALL8FlTyeBakigwTyhdC0imy/KYCXsyXsb1t9C5mcIlcTV9ZlRfsqoLVNczAHHpEqpr2PP+WvfRB6kFL1kMY4jkjjjo+xqIxxi4+tBGf9ajw4RAo7RIzGtTZWSXiLmFVp4z4SQOJN3Ca9DEBQOi7ojsH48ovNjK0IuXzcCqKqEv7XY+Bo7l9XMgojdoYn9jAm58+xMuM+5ccpDINQRgt7dxmfzSjlZqXgyq330ZtRZMXBnzf/PwQYmcie3fJkLvENpVmqK/eJ/fDMjySj3UiwTHEHAha9Luo0IyEMjG7f4y7tNNV4kx55YeNtcqeoPyxq5hTUF1ikszmQrLdhQLIoX0ultDNA3W40vrzZuiNw82IaAL9knkdFySrsTNeozAJo8RUzIk+c0O9AQTnkKLOMe6MFtfDavjIuViSfX27AWYJ01g3BzpbskUX7KAASvIVLIW65nFEgLXn60KhIFzmXrVhMh+eArbRppPYVHW9rl0ofO+BfKuHnoql0squn+KHDDn6rZnn64saCyx/OOMnofRiQeiOrage810l994PsRB0PFNl8VQB2xb62YFHDncqZZEHFvS9P+jAn541HAeKYSbhDUEYLe3cZnc6DcrFw9eVSHtQDr7DBvTbzvvsSi/JSJ4MC+mhXatSvxnolNz35cNoDbt82sQ3g2H01k9nhMyHVMvbhqy3vcLNnFkzrcpRv+1dz34UjfSassyonncDi3NLl6G6R7x4SaJ+9imDqcvNErj5rppxWXAkLTTthAjVZGx3s2WBPyz0tcD6qGEHD3eOd+xp932UBhb4LJc8gABWJipV0ugPqmTk+w5Ix9e4fzqZclo/mrfxdQLV1CTu7XE8e/zFe7qt8WgSIpLtpFiq3UXDEl4Z0oWxsNQIYUIN+6eGs5A4QxpKgxTq5zty6RWaZgvI6OjKKtJOi0lFrP9fUi5QRQt3yO9JhlIpBvI8QCLrR4GmCJi3ZRpMgpIU+tPYyIKaJggB0IacPJpvaky6Y3hm/BQxVcRs7TYf0tQkysksoFUCcJr6zVMGwfTWoAhv5bj+/FdFk71vxYb85NyQ42cQBkgITgHKZt4bZA3laXFc620y6IS7lXJe+zYSbGnqmz0J1Ewn0cENYM0VvfWVSzx8H0rKgjQ3Q1AKdr2+u08xolDzYZXYTQKRLO18DRgRv1UgG2uK0OW4VgTMh7a5dFBIla4B4UIbIcIVNu0w7XE3WEbfsN1eCDPJ0O628xzM8KV80A3ncLyvf6U2aa7DzBxWzIudefanhZN2/4unXeR3CTg9KzKDNU6z0P8RuXozFeu8dKD+cld4W5rc+1SghoShEnY34f68g+iJYypkloR8q9663jaq48mcE4GRqrH48psofezquGi3exChfY/CBgYxWlfEuFCvjgctvMgoiP3WOrEIt8yg8P35AzUQ2eoQ7mCaVrItnUUnbtN1RT78nbkMmYs6mY5mcIFay6xuV7ffpB7oaZ+UHVsD/8+X8zLh/SyZ+nDSGTnz3VQUtVpaIhKD0c9e5QebgCb/J8/1AeV9Vjf9u2wjUx61r83aZanBf3XJZ1nWAucong4AfndTMPOJvRBEgHqV/vpsIB+rh/wPcjDm5LWTe/FHB6KYvUfCurFPAdzVgjUKP+7goUW2XYqXov/3n4hlyJOuANtqaUHtKS2neyghvIiH37DdU8ePLVa1h/k3mpQtZ0AdQdukb5MufaQElfak1/AXufAEN+T/0PVlr2P1jGD4Dvn83X0tzR8u9ntfj0/x2JVJVl6v9WB/371sGJ92ccDdN/s3kbOX8nrff+PYS7C5kNUvKkfH3JWcWg6PicXD/Key6+hKkUD5Q9z/NngS8gWJEtcg46Nv8yVFcD0cZWo0RpitTypKrjKWaAq7i9pOJncjhQ2aCRyjKUvzhHvTT42+gaqDKqxOpdlWpwjsrgYPmOv8cGHq9grAniSGSQOERcLFomInp2rB2W4giXkFQfKtQV7HiaqQ7CdYSmzLnCVqbi1qrSC7pVg4Umfb4sEHGok9KVVP1n3Nq8fWUmchZ/LSS0+TEQBqSkailYQwTC70Y6m897/FlfV6mbKAK6/iYUlIsTsflGIMs4kp9XhFpbfGsLlCyuY+owB+jCEInmU+FW1oVeTrBIadGUgRRDTpUT8dzia1EmFxv7W2+b0IAxK/COAJiotEioG2wtM0WL3NUzJGJtSwPEAneVktWakWJjm2D7cqjxJvtuwraFZlBeLS2VWmdKensxpAFA6g3ktFqPUiXmJL2AukxrhwbqJx3VhSCbngLtELTAnMWplKGfpjGP4ei6UKBtGN1MWN8+SX8yQR2aAupShmmLjYCaTYPU/jS80ZzrqGuq9CKXBbKU1hem4Vz9psaaSvNyv8iAOOirjwGA79tRwGiZycbmo+DvK0Y343Z/pTHROuslmh0XU4DxkWGugzTA0UoD1AaGNGoYBepd8eLL1dp4c1jCg8UdEHRYItOCeZ7jIFiRi1jdUePVaGhsyFltSVM90Pf2iuUztPR6h5Nv9R890w8KWk63kjbc306tuccc8waRe+/JfzKZCoz/2eGjvOu/BwFy/e0l97X1VbwsyzRQiJv9mjkefCFvdIFOgm0xMBATikDgrhURukbYDEF+ZyVhxdJmFKs/bEZjtTZjlJ27GcvhsJWjzVS+iySdtmSz0t708JaNWH3d+P5P4COIbpkiSBVEEzfC4WBhEx3Jbiel2MEgj1vEcAhheF/cDcmsDY4SnDUko8WDQYQZ0ndCSX827ZNyWzbwIK7G12RBdXdrqr4awlIomF2DoktyvwyhC3VZiaHjrwsvshVBsOTkKnpjWn5o5qYvPHed17SJC5wfi0GVopp5TqChYadShBXBKOaDEqsFrTZKJBIJNkmEDgUTv8S7NXmhMvUVS/GErUz7XgBKpe+IBfdXIYq1SnVCX/U1mNSZomvrGgv38GvSsH2o3JMJ1sVRxwchxKuTD0T4n7iv9+cUM3RTjwKSuq/EUsq/5+3MXV8JhjHaqOHAFOOrvIGNhbUUsesLNI+hOc305zNDH62Us3fKHXy9fMhZ5uml8ftd2YeUiLjOwSsXaDbhODmvrbxOgYiVTQAA\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x170ed297577c5520dd73b08c86be905c291ea69751afd4f7aa3f5b6b18d3b3ae\"},\"src/lib/HookStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nlibrary HookStrings {\\n  \\n  /// @dev toAsciiString creates a hex encoding of an\\n  /// address as a string to use in the preview NFT.\\n  function toAsciiString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint256 i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = char(hi);\\n      s[2 * i + 1] = char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) internal pure returns (bytes1) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0xe5bd5fe44cd3a21a7a26712261bdb83c5c2c7c8b9f325f33b129e4de4d8af92f\",\"license\":\"MIT\"},\"src/lib/Signatures.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\n/// @dev A library for validating signatures from ZeroEx\\nlibrary Signatures {\\n  /// @dev Allowed signature types.\\n  enum SignatureType {\\n    EIP712\\n  }\\n\\n  /// @dev Encoded EC signature.\\n  struct Signature {\\n    // How to validate the signature.\\n    SignatureType signatureType;\\n    // EC Signature data.\\n    uint8 v;\\n    // EC Signature data.\\n    bytes32 r;\\n    // EC Signature data.\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0x8baed0797709f616eef6d60a244c7d7d33e287c21a5041f38deaadf96d3f8ca4\",\"license\":\"MIT\"},\"src/lib/TokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"./HookStrings.sol\\\";\\nimport \\\"./Fonts.sol\\\";\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\n/// @dev This contract implements some ERC721 / for hook instruments.\\nlibrary TokenURI {\\n  function _generateMetadataERC721(\\n    address underlyingTokenAddress,\\n    uint256 underlyingTokenId,\\n    uint256 instrumentStrikePrice,\\n    uint256 instrumentExpiration,\\n    uint256 transfers\\n  ) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '\\\", \\\"expiration\\\": ',\\n          HookStrings.toString(instrumentExpiration),\\n          ', \\\"underlying_address\\\": \\\"',\\n          HookStrings.toAsciiString(underlyingTokenAddress),\\n          '\\\", \\\"underlying_tokenId\\\": ',\\n          HookStrings.toString(underlyingTokenId),\\n          ', \\\"strike_price\\\": ',\\n          HookStrings.toString(instrumentStrikePrice),\\n          ', \\\"transfer_index\\\": ',\\n          HookStrings.toString(transfers)\\n        )\\n      );\\n  }\\n\\n  function renderSVG1(uint256 strike, uint256 expiration)\\n    public\\n    pure\\n    returns (bytes memory)\\n  {\\n    // string memory moduleName = attemptGetMetatdataUriName(module);\\n\\n    (uint256 year, uint256 month, uint256 day) = BokkyPooBahsDateTimeLibrary\\n      .timestampToDate(expiration);\\n\\n    return\\n      abi.encodePacked(\\n        '<svg width=\\\"500\\\" height=\\\"500\\\" viewBox=\\\"0 0 500 500\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><rect width=\\\"500\\\" height=\\\"500\\\" fill=\\\"#FAE6C9\\\"/><g filter=\\\"url(#filter0_d_702_157)\\\"><rect x=\\\"30\\\" y=\\\"30\\\" width=\\\"440\\\" height=\\\"440\\\" rx=\\\"30\\\" fill=\\\"#FFF2E0\\\" shape-rendering=\\\"crispEdges\\\"/><rect x=\\\"60\\\" y=\\\"60\\\" width=\\\"187\\\" height=\\\"187\\\" rx=\\\"14\\\" fill=\\\"black\\\" fill-opacity=\\\"0.2\\\"/><rect x=\\\"60\\\" y=\\\"60\\\" width=\\\"187\\\" height=\\\"187\\\" rx=\\\"14\\\" fill=\\\"url(#pattern0)\\\"/>',\\n        '<text fill=\\\"#E16900\\\" font-size=\\\"24\\\" font-weight=\\\"300\\\"><tspan x=\\\"269\\\" y=\\\"113.284\\\">',\\n        HookStrings.toString(strike / 10**18), //strike,\\n        ' ETH</tspan></text><text fill=\\\"#1A5B6C\\\" font-size=\\\"16\\\" font-weight=\\\"300\\\"><tspan x=\\\"269\\\" y=\\\"137.284\\\">Strike Price</tspan></text><text fill=\\\"#E16900\\\" font-size=\\\"24\\\" font-weight=\\\"300\\\"><tspan x=\\\"269\\\" y=\\\"184.284\\\">',\\n        HookStrings.toString(year),\\n        \\\"-\\\",\\n        HookStrings.toString(month),\\n        \\\"-\\\",\\n        HookStrings.toString(day), // date\\n        '</tspan></text><text fill=\\\"#1A5B6C\\\" font-size=\\\"16\\\" font-weight=\\\"300\\\"><tspan x=\\\"269\\\" y=\\\"208.284\\\">Expiration date</tspan></text><text fill=\\\"#1A5B6C\\\" font-size=\\\"12\\\" font-weight=\\\"300\\\"><tspan x=\\\"62\\\" y=\\\"314.356\\\">Underlying Contract Address</tspan></text><text fill=\\\"#E16900\\\" font-size=\\\"16\\\" font-weight=\\\"300\\\"><tspan x=\\\"62\\\" y=\\\"298.356\\\">'\\n      );\\n  }\\n\\n  function renderSVG2(address underlyingAddress, uint256 underlyingTokenId)\\n    public\\n    pure\\n    returns (bytes memory)\\n  {\\n    return\\n      abi.encodePacked(\\n        HookStrings.toAsciiString(underlyingAddress),\\n        '</tspan></text><text fill=\\\"#1A5B6C\\\" font-size=\\\"12\\\" font-weight=\\\"300\\\"><tspan x=\\\"62\\\" y=\\\"358.356\\\">Underlying Token ID</tspan></text><text fill=\\\"#E16900\\\" font-size=\\\"16\\\" font-weight=\\\"300\\\"><tspan x=\\\"62\\\" y=\\\"342.356\\\">',\\n        HookStrings.toString(underlyingTokenId), // token ID\\n        '</tspan></text><text fill=\\\"#E16900\\\" font-size=\\\"16\\\"><tspan x=\\\"60\\\" y=\\\"416.356\\\">Call Option</tspan><tspan x=\\\"60\\\" y=\\\"435.356\\\">Instrument NFT</tspan></text><g clip-path=\\\"url(#clip0_702_157)\\\"><path d=\\\"M312.667 439.421V400H319.929V416.138C321.359 414.037 324.066 412.565 327.513 412.565C333.929 412.565 337.745 417.19 337.745 424.024V439.425H330.482V425.232C330.482 421.446 328.837 419.135 325.816 419.135C322.424 419.135 319.932 421.554 319.932 426.599V439.425H312.667V439.421Z\\\" fill=\\\"#E16900\\\"/><path d=\\\"M341.651 426.282C341.651 418.608 347.907 412.562 355.596 412.562C363.285 412.562 369.541 418.608 369.541 426.282C369.541 433.955 363.285 440.001 355.596 440.001C347.907 440.001 341.651 434.009 341.651 426.282ZM362.169 426.282C362.169 422.235 359.36 419.292 355.596 419.292C351.832 419.292 348.968 422.235 348.968 426.282C348.968 430.328 351.777 433.271 355.596 433.271C359.415 433.271 362.169 430.328 362.169 426.282Z\\\" fill=\\\"#E16900\\\"/><path d=\\\"M372.178 426.282C372.178 418.608 378.434 412.562 386.123 412.562C393.812 412.562 400.068 418.608 400.068 426.282C400.068 433.955 393.812 440.001 386.123 440.001C378.434 440.001 372.178 434.009 372.178 426.282V426.282ZM392.697 426.282C392.697 422.235 389.888 419.292 386.123 419.292C382.359 419.292 379.495 422.235 379.495 426.282C379.495 430.328 382.304 433.271 386.123 433.271C389.942 433.271 392.697 430.328 392.697 426.282V426.282Z\\\" fill=\\\"#E16900\\\"/><path d=\\\"M411.273 427.333V439.421H404.01V400H411.273V422.813L419.863 413.14H428.611L418.112 424.968L431.051 439.421H422.089L411.273 427.333V427.333Z\\\" fill=\\\"#E16900\\\"/><path d=\\\"M433.166 412.031H431.948V411.373H435.084V412.031H433.859V415.537H433.166V412.031V412.031Z\\\" fill=\\\"#E16900\\\"/><path d=\\\"M436.426 411.373L437.895 413.344L439.367 411.373H439.998V415.537H439.299V412.552L437.898 414.44L436.484 412.546V415.537H435.792V411.373H436.423H436.426Z\\\" fill=\\\"#E16900\\\"/></g></g><defs><filter id=\\\"filter0_d_702_157\\\" x=\\\"14\\\" y=\\\"20\\\" width=\\\"472\\\" height=\\\"472\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset dy=\\\"6\\\"/><feGaussianBlur stdDeviation=\\\"8\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\\\"/><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_702_157\\\"/><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow_702_157\\\" result=\\\"shape\\\"/></filter><pattern id=\\\"pattern0\\\" patternContentUnits=\\\"objectBoundingBox\\\" width=\\\"1\\\" height=\\\"1\\\"><use xlink:href=\\\"#image0_702_157\\\" transform=\\\"scale(0.00534759358)\\\"/></pattern><clipPath id=\\\"clip0_702_157\\\"><rect width=\\\"127.333\\\" height=\\\"40\\\" fill=\\\"white\\\" transform=\\\"translate(312.667 400)\\\"/></clipPath><image id=\\\"image0_702_157\\\" width=\\\"187\\\" height=\\\"187\\\" preserveAspectRatio=\\\"xMidYMid\\\" alt=\\\"underlying nft\\\" href=\\\"',\\n        abi.encodePacked(\\n          \\\"https://app.hook.xyz/image/\\\",\\n          HookStrings.toAsciiString(underlyingAddress),\\n          \\\"/\\\",\\n          HookStrings.toString(underlyingTokenId)\\n        ), // img url\\n        '\\\" /><style>',\\n        \\\"@font-face { font-family: Euclid Circular A; src: url('data:font/woff2;base64,\\\",\\n        Font1.font(),\\n        Font2.font(),\\n        Font3.font(),\\n        \\\"') format('woff2');} text { font-family: Euclid Circular A; white-space: pre; letter-spacing: -0.001em;}\\\"\\n        \\\"</style></defs></svg>\\\"\\n      );\\n  }\\n\\n  /// @dev this is a basic tokenURI based on the loot contract for an ERC721\\n  /// (ripped off from LOOT PROJECT)\\n  function tokenURIERC721(\\n    uint256 instrumentId,\\n    address underlyingAddress,\\n    uint256 underlyingTokenId,\\n    uint256 instrumentExpiration,\\n    uint256 instrumentStrike,\\n    uint256 transfers\\n  ) public pure returns (string memory) {\\n    bytes memory output = abi.encodePacked(\\n      renderSVG1(instrumentStrike, instrumentExpiration),\\n      renderSVG2(underlyingAddress, underlyingTokenId)\\n    );\\n\\n    string memory json = Base64.encode(\\n      bytes(\\n        string(\\n          abi.encodePacked(\\n            '{\\\"name\\\": \\\"Option Id',\\n            HookStrings.toString(instrumentId),\\n            '\\\", \\\"description\\\": \\\"Option Instrument NFT on Hook: the NFT-native call options protocol\\\", \\\"image\\\": '\\n            '\\\"data:image/svg+xml;base64,',\\n            Base64.encode(output),\\n            _generateMetadataERC721(\\n              underlyingAddress,\\n              underlyingTokenId,\\n              instrumentStrike,\\n              instrumentExpiration,\\n              transfers\\n            ),\\n            \\\"}\\\"\\n          )\\n        )\\n      )\\n    );\\n    return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n  }\\n}\\n\",\"keccak256\":\"0x3a60d3f12ddadd683d45a9f4daa6b0f4c4b2d9d37a907c94bf47cbad8928210e\",\"license\":\"MIT\"},\"src/mixin/HookInstrumentERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport \\\"../interfaces/IHookERC721Vault.sol\\\";\\n\\nimport \\\"../lib/HookStrings.sol\\\";\\nimport \\\"../lib/TokenURI.sol\\\";\\n\\n/// @dev This contract implements some ERC721 / for hook instruments.\\nabstract contract HookInstrumentERC721 is ERC721Burnable {\\n  using Counters for Counters.Counter;\\n  mapping(uint256 => Counters.Counter) private _transfers;\\n  bytes4 private constant ERC_721 = bytes4(keccak256(\\\"ERC721\\\"));\\n\\n  /// @dev the contact address for a marketplace to pre-approve\\n  address public _preApprovedMarketplace = address(0);\\n\\n  /// @dev hook called after the ERC721 is transferred,\\n  /// which allows us to increment the counters.\\n  function _afterTokenTransfer(\\n    address, // from\\n    address, // to\\n    uint256 tokenId\\n  ) internal override {\\n    // increment the counter for the token\\n    _transfers[tokenId].increment();\\n  }\\n\\n  ///\\n  /// @dev See {IERC721-isApprovedForAll}.\\n  /// this extension ensures that any operator contract located\\n  /// at {_approvedMarketpace} is considered approved internally\\n  /// in the ERC721 contract\\n  ///\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      operator == _preApprovedMarketplace ||\\n      super.isApprovedForAll(owner, operator);\\n  }\\n\\n  constructor(string memory instrumentType)\\n    ERC721(makeInstrumentName(instrumentType), \\\"INST\\\")\\n  {}\\n\\n  function makeInstrumentName(string memory z)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return string(abi.encodePacked(\\\"Hook \\\", z, \\\" instrument\\\"));\\n  }\\n\\n  /// @notice the number of times the token has been transferred\\n  /// @dev this count can be used by overbooks to invalidate orders after a\\n  /// token has been transferred, preventing stale order execution by\\n  /// malicious parties\\n  function getTransferCount(uint256 optionId) external view returns (uint256) {\\n    return _transfers[optionId].current();\\n  }\\n\\n  /// @notice getter for the address holding the underlying asset\\n  function getVaultAddress(uint256 optionId)\\n    public\\n    view\\n    virtual\\n    returns (address);\\n\\n  /// @notice getter for the assetId of the underlying asset within a vault\\n  function getAssetId(uint256 optionId) public view virtual returns (uint32);\\n\\n  /// @notice getter for the option strike price\\n  function getStrikePrice(uint256 optionId)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /// @notice getter for the options expiration. After this time the\\n  /// option is invalid\\n  function getExpiration(uint256 optionId)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /// @dev this is the OpenSea compatible collection - level metadata URI.\\n  function contractUri(uint256 optionId) external view returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"token.hook.xyz/option-contract/\\\",\\n          HookStrings.toAsciiString(address(this)),\\n          \\\"/\\\",\\n          HookStrings.toString(optionId)\\n        )\\n      );\\n  }\\n\\n  ///\\n  /// @dev See {IERC721-tokenURI}.\\n  ///\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    bytes4 class = _underlyingClass(tokenId);\\n    if (class == ERC_721) {\\n      IHookERC721Vault vault = IHookERC721Vault(getVaultAddress(tokenId));\\n      uint32 assetId = getAssetId(tokenId);\\n      address underlyingAddress = vault.assetAddress(assetId);\\n      uint256 underlyingTokenId = vault.assetTokenId(assetId);\\n      // currently nothing in the contract depends on the actual underlying metadata uri\\n      // IERC721 underlyingContract = IERC721(underlyingAddress);\\n      uint256 instrumentStrikePrice = this.getStrikePrice(tokenId);\\n      uint256 instrumentExpiration = this.getExpiration(tokenId);\\n      uint256 transfers = _transfers[tokenId].current();\\n      return\\n        TokenURI.tokenURIERC721(\\n          tokenId,\\n          underlyingAddress,\\n          underlyingTokenId,\\n          instrumentExpiration,\\n          instrumentStrikePrice,\\n          transfers\\n        );\\n    }\\n    return \\\"Invalid underlying asset\\\";\\n  }\\n\\n  /// @dev returns an internal identifier for the underlying type contained within\\n  /// the vault to determine what the instrument is on\\n  ///\\n  /// this class evaluation relies on the interfaceId of the underlying asset\\n  ///\\n  function _underlyingClass(uint256 optionId)\\n    internal\\n    view\\n    returns (bytes4)\\n  {\\n    if (\\n      ERC165Checker.supportsInterface(\\n        getVaultAddress(optionId),\\n        type(IHookERC721Vault).interfaceId\\n      )\\n    ) {\\n      return ERC_721;\\n    } else {\\n      revert(\\\"_underlying-class: Unsupported underlying type\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x50d315addc5e00431dabfe1fb0c0925c3254e64feaf9d0af561a6a62c8f1d42c\",\"license\":\"MIT\"},\"src/mixin/PermissionConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584         \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//           \\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//            \\u2580\\u2580  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//             \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2588\\u2588\\u2584\\n//          \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n//          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580  \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//         \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2590\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2580\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2580      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u258c                                        \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\npragma solidity ^0.8.10;\\n\\n/// @notice roles on the hook protocol that can be read by other contract\\n/// @dev new roles here should be initialized in the constructor of the protocol\\nabstract contract PermissionConstants {\\n  /// ----- ROLES --------\\n\\n  /// @notice the allowlister is able to enable and disable projects to mint instruments\\n  bytes32 public constant ALLOWLISTER_ROLE = keccak256(\\\"ALLOWLISTER_ROLE\\\");\\n\\n  /// @notice the pauser is able to start and pause various components of the protocol\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  /// @notice the vault upgrader role is able to upgrade the implementation for all vaults\\n  bytes32 public constant VAULT_UPGRADER = keccak256(\\\"VAULT_UPGRADER\\\");\\n\\n  /// @notice the call upgrader role is able to upgrade the implementation of the covered call options\\n  bytes32 public constant CALL_UPGRADER = keccak256(\\\"CALL_UPGRADER\\\");\\n\\n  /// @notice the market configuration role allows the actor to make changes to how the market operates\\n  bytes32 public constant MARKET_CONF = keccak256(\\\"MARKET_CONF\\\");\\n\\n  /// @notice the collection configuration role allows the actor to make changes the collection\\n  /// configs on the protocol contract\\n  bytes32 public constant COLLECTION_CONF = keccak256(\\\"COLLECTION_CONF\\\");\\n}\\n\",\"keccak256\":\"0x43cdef3ce172989cbfc56481959eff95e24ca427b18eb4be09d2f507f49690ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600780546001600160a01b03191690553480156200002157600080fd5b5060408051808201909152600481526310d85b1b60e21b60208201526200004881620000a3565b60405180604001604052806004815260200163125394d560e21b81525081600090805190602001906200007d929190620000ce565b50805162000093906001906020840190620000ce565b5050600160085550620002189050565b606081604051602001620000b8919062000174565b6040516020818303038152906040529050919050565b828054620000dc90620001db565b90600052602060002090601f0160209004810192826200010057600085556200014b565b82601f106200011b57805160ff19168380011785556200014b565b828001600101855582156200014b579182015b828111156200014b5782518255916020019190600101906200012e565b50620001599291506200015d565b5090565b5b808211156200015957600081556001016200015e565b6402437b7b5960dd1b81526000825160005b81811015620001a5576020818601810151600586840101520162000186565b81811115620001b8576000600583860101525b506a081a5b9cdd1c9d5b595b9d60aa1b6005939091019283015250601001919050565b600181811c90821680620001f057607f821691505b602082108114156200021257634e487b7160e01b600052602260045260246000fd5b50919050565b615d8980620002286000396000f3fe60806040526004361061024e5760003560e01c80623a4a0f1461025357806301ffc9a71461028657806306fdde03146102b6578063081812fc146102d8578063095ea7b3146103055780630d5e67ec146103275780631e2e74e21461035b57806323b872dd1461039357806323db6d02146103b3578063247f0879146103ec57806332ab2f841461040c5780633a283bd21461042c5780633c7cfe34146104465780633fc8cef31461049e57806342842e0e146104be57806342966c68146104de578063439bb40f146104fe578063454a2ab31461051e578063536ff9ad1461053157806361f547fd1461055e5780636352211e1461058b57806367207872146105ab57806370a08231146105c157806377ff20bd146105e15780637b850da91461062c5780637f1a48851461064c5780637fb6afd41461066c578063829b58471461068c57806383b6fa98146106ac57806390f0252a146106cc57806395d89b4114610705578063a05b775f1461071a578063a22cb46514610754578063a34fd3fb14610774578063acca6838146107a8578063b4985c94146107dc578063b88d4fde146107fc578063bb31173a1461081c578063c87b56dd14610850578063cc06752514610870578063cd52d15114610890578063d365016c14610974578063dee92f5d14610994578063e63ab1e9146109aa578063e6bd26a2146109de578063e985e9c5146109fe578063e9d69ff214610a1e578063ed059f2714610a3e578063ef17ac7f14610a5e578063f23c19e814610a7e578063f8c8765e14610aa0578063ff58aaaa14610ac0575b600080fd5b34801561025f57600080fd5b5061027361026e366004614825565b610ad6565b6040519081526020015b60405180910390f35b34801561029257600080fd5b506102a66102a1366004614854565b610aec565b604051901515815260200161027d565b3480156102c257600080fd5b506102cb610b3c565b60405161027d91906148c9565b3480156102e457600080fd5b506102f86102f3366004614825565b610bce565b60405161027d91906148dc565b34801561031157600080fd5b50610325610320366004614905565b610bf5565b005b34801561033357600080fd5b506102737f945438d5e976f17e0d00cb2997cf8951c55e12977d86234d6738d1865abe006e81565b34801561036757600080fd5b50610273610376366004614943565b600e60209081526000928352604080842090915290825290205481565b34801561039f57600080fd5b506103256103ae36600461497c565b610d10565b3480156103bf57600080fd5b506102736103ce366004614825565b6000908152600d60205260409020600201546001600160801b031690565b3480156103f857600080fd5b50610325610407366004614825565b610d42565b34801561041857600080fd5b50610325610427366004614825565b610e3f565b34801561043857600080fd5b506015546102a69060ff1681565b34801561045257600080fd5b50610486610461366004614825565b6000908152600d6020526040902060020154600160801b90046001600160801b031690565b6040516001600160801b03909116815260200161027d565b3480156104aa57600080fd5b506011546102f8906001600160a01b031681565b3480156104ca57600080fd5b506103256104d936600461497c565b610f26565b3480156104ea57600080fd5b506103256104f9366004614825565b610f41565b34801561050a57600080fd5b506102736105193660046149d4565b610f72565b61032561052c366004614825565b61144d565b34801561053d57600080fd5b5061027361054c366004614825565b600f6020526000908152604090205481565b34801561056a57600080fd5b5061057e610579366004614825565b611866565b60405161027d9190614a4c565b34801561059757600080fd5b506102f86105a6366004614825565b611885565b3480156105b757600080fd5b5061027360125481565b3480156105cd57600080fd5b506102736105dc366004614a5d565b6118ba565b3480156105ed57600080fd5b506102736105fc366004614943565b6001600160a01b0382166000908152600e6020908152604080832063ffffffff8516845290915290205492915050565b34801561063857600080fd5b50610325610647366004614825565b611940565b34801561065857600080fd5b506007546102f8906001600160a01b031681565b34801561067857600080fd5b50610325610687366004614a88565b611a20565b34801561069857600080fd5b506102cb6106a7366004614825565b611e02565b3480156106b857600080fd5b506103256106c7366004614825565b611e3d565b3480156106d857600080fd5b506102f86106e7366004614825565b6000908152600d60205260409020600301546001600160a01b031690565b34801561071157600080fd5b506102cb6120a1565b34801561072657600080fd5b50610273610735366004614825565b6000908152600d6020526040902054600160a01b900463ffffffff1690565b34801561076057600080fd5b5061032561076f366004614aad565b6120b0565b34801561078057600080fd5b506102737f657f307dfada290937bc821a25e2da10feb07809ba9560b816723e8b47fe379a81565b3480156107b457600080fd5b506102737ffba4f6dd992a27a814ee807eb2f9332d6d01312041726966a540cf4a4a89155381565b3480156107e857600080fd5b506010546102f8906001600160a01b031681565b34801561080857600080fd5b50610325610817366004614b48565b6120bf565b34801561082857600080fd5b506102737ff7e0191f3657a6da7569740b1cdeac8c3425bcbfd257d4fdc6d2241598f4de8b81565b34801561085c57600080fd5b506102cb61086b366004614825565b6120f7565b34801561087c57600080fd5b5061027361088b366004614bf6565b6123e2565b34801561089c57600080fd5b506109156108ab366004614825565b600d6020526000908152604090208054600182015460028301546003909301546001600160a01b0380841694600160a01b80860463ffffffff90811696600160c01b900416948316936001600160801b0380841694600160801b9094041692811691900460ff1688565b604080516001600160a01b03998a16815263ffffffff9889166020820152969097169686019690965292861660608501526001600160801b0391821660808501521660a083015290921660c0830152151560e08201526101000161027d565b34801561098057600080fd5b5061027361098f366004614c50565b61299f565b3480156109a057600080fd5b5061027360135481565b3480156109b657600080fd5b506102737f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b3480156109ea57600080fd5b506102f86109f9366004614825565b613023565b348015610a0a57600080fd5b506102a6610a19366004614c86565b613041565b348015610a2a57600080fd5b50610325610a39366004614825565b61308c565b348015610a4a57600080fd5b50610325610a59366004614825565b613302565b348015610a6a57600080fd5b50610325610a79366004614cb4565b6133e2565b348015610a8a57600080fd5b50610273600080516020615d1483398151915281565b348015610aac57600080fd5b50610325610abb366004614cd1565b613509565b348015610acc57600080fd5b5061027360145481565b6000818152600660205260408120545b92915050565b60006001600160e01b031982166380ac58cd60e01b1480610b1d57506001600160e01b03198216635b5e139f60e01b145b80610ae657506301ffc9a760e01b6001600160e01b0319831614610ae6565b606060008054610b4b90614d22565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7790614d22565b8015610bc45780601f10610b9957610100808354040283529160200191610bc4565b820191906000526020600020905b815481529060010190602001808311610ba757829003601f168201915b5050505050905090565b6000610bd982613709565b506000908152600460205260409020546001600160a01b031690565b6000610c0082611885565b9050806001600160a01b0316836001600160a01b03161415610c735760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610c8f5750610c8f8133613041565b610d015760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610c6a565b610d0b838361372e565b505050565b610d1b335b8261379c565b610d375760405162461bcd60e51b8152600401610c6a90614d5d565b610d0b8383836137fb565b60026008541415610d655760405162461bcd60e51b8152600401610c6a90614dab565b60026008556000610d7582611885565b9050336001600160a01b03821614610dc05760405162461bcd60e51b815260206004820152600e60248201526d634f502d6f776e6572206f6e6c7960901b6044820152606401610c6a565b6000828152600f6020526040812080549190558015610e3557610de28361398b565b604080518481526001600160a01b03841660208201529081018290527f3b243b2a7fb9066beef2765291666e8995942faa5d65b584d1c4acea92f166579060600160405180910390a1610e358282613a1c565b5050600160085550565b600c54604051632474521560e21b81526001600160a01b03909116906391d1485490610e7f90600080516020615d14833981519152903390600401614de2565b602060405180830381865afa158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec09190614df9565b610edc5760405162461bcd60e51b8152600401610c6a90614e16565b8060145410610eea57600080fd5b60128190556040518181527f40f2d0804ee87f2940dd9632dfaf1a60b67da0186089af5431b86c17cd234c9e906020015b60405180910390a150565b610d0b838383604051806020016040528060008152506120bf565b610f4a33610d15565b610f665760405162461bcd60e51b8152600401610c6a90614d5d565b610f6f8161398b565b50565b600060026008541415610f975760405162461bcd60e51b8152600401610c6a90614dab565b600260085560155460ff1615610fbf5760405162461bcd60e51b8152600401610c6a90614e48565b600c60009054906101000a90046001600160a01b03166001600160a01b0316635b67d9ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561100f57600080fd5b505af1158015611023573d6000803e3d6000fd5b5050604051631f48f6ab60e01b81528892506001600160a01b0383169150631f48f6ab90611055908990600401614a4c565b602060405180830381865afa158015611072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110969190614e6f565b6010546001600160a01b039081169116146110eb5760405162461bcd60e51b81526020600482015260156024820152741b55d58b5d1bdad95b881b9bdd08185b1b1bddd959605a1b6044820152606401610c6a565b60405163ba02481b60e01b81526001600160a01b0382169063ba02481b90611117908990600401614a4c565b602060405180830381865afa158015611134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111589190614df9565b61119d5760405162461bcd60e51b81526020600482015260166024820152751b55d58b585cdcd95d081b9bdd081a5b881d985d5b1d60521b6044820152606401610c6a565b6010546111b59088906001600160a01b031688613b08565b6112105760405162461bcd60e51b815260206004820152602660248201527f6d57562d63616e206f6e6c79206d696e7420776974682070726f746f636f6c206044820152657661756c747360d01b6064820152608401610c6a565b60405163ecb2c20b60e01b81526000906001600160a01b0383169063ecb2c20b9061123f908a90600401614a4c565b602060405180830381865afa15801561125c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112809190614e6f565b9050336001600160a01b03821614806113165750604051635781257360e11b81526001600160a01b0383169063af024ae6906112c0908a90600401614a4c565b602060405180830381865afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113019190614e6f565b6001600160a01b0316336001600160a01b0316145b6113815760405162461bcd60e51b815260206004820152603660248201527f6d57562d63616c6c656420627920736f6d656f6e65206f74686572207468616e604482015275103a34329037bbb732b91037b91037b832b930ba37b960511b6064820152608401610c6a565b6001600160a01b0382166303e7158b30878a6113a360408a0160208b01614e8c565b604080516001600160e01b031960e088901b1681526001600160a01b03909516600486015263ffffffff938416602486015291909216604484015260ff90911660648301528701356084820152606087013560a482015260c401600060405180830381600087803b15801561141757600080fd5b505af115801561142b573d6000803e3d6000fd5b5050505061143c8183898989613c15565b600160085598975050505050505050565b600260085414156114705760405162461bcd60e51b8152600401610c6a90614dab565b600260088190556000828152600d602090815260409182902082516101008101845281546001600160a01b03808216835263ffffffff600160a01b8084048216968501879052600160c01b9093041695830195909552600183015485166060830152948201546001600160801b038082166080840152600160801b9091041660a082015260039091015492831660c082015260ff9390920492909216151560e0820152829142106115505760405162461bcd60e51b815260206004820152600a60248201526918914b595e1c1a5c995960b21b6044820152606401610c6a565b42601454826020015163ffffffff166115699190614ec5565b11156115b75760405162461bcd60e51b815260206004820152601d60248201527f62452d62696464696e6720737461727473206f6e206c617374206461790000006044820152606401610c6a565b8060e00151156115fe5760405162461bcd60e51b815260206004820152601260248201527118914b585b1c9958591e481cd95d1d1b195960721b6044820152606401610c6a565b6000838152600d6020526040902080543491906001600160a01b031633141561163c576002810154611639906001600160801b031683614edc565b91505b60135460028201546127109161166191600160801b90046001600160801b0316614f07565b61166b9190614f3c565b600282015461168a9190600160801b90046001600160801b0316614f50565b826001600160801b031610156116f05760405162461bcd60e51b815260206004820152602560248201527f622d6d757374206f766572626964206279206d696e426964496e6372656d656e604482015264744269707360d81b6064820152608401610c6a565b60028101546001600160801b039081169083161161175c5760405162461bcd60e51b8152602060048201526024808201527f622d626964206973206c6f776572207468616e2074686520737472696b6520706044820152637269636560e01b6064820152608401610c6a565b61176581613f13565b6002810180546001600160801b03808516600160801b0291161790556003810180546001600160a01b0319163390811790915560018201548254604051632ec14d3f60e01b81526001600160a01b039290921692632ec14d3f926117db9263ffffffff600160c01b909104169190600401614f68565b600060405180830381600087803b1580156117f557600080fd5b505af1158015611809573d6000803e3d6000fd5b5050604080518881526001600160801b038616602082015233918101919091527ffd7cfbd219ff1e7365436fb2930a026fa6704a1e0bb39ad104f0485c8c01124d925060600190505b60405180910390a150506001600855505050565b6000908152600d6020526040902054600160c01b900463ffffffff1690565b6000818152600260205260408120546001600160a01b031680610ae65760405162461bcd60e51b8152600401610c6a90614f87565b60006001600160a01b0382166119245760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610c6a565b506001600160a01b031660009081526003602052604090205490565b600c54604051632474521560e21b81526001600160a01b03909116906391d148549061198090600080516020615d14833981519152903390600401614de2565b602060405180830381865afa15801561199d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c19190614df9565b6119dd5760405162461bcd60e51b8152600401610c6a90614e16565b6107d081106119eb57600080fd5b60138190556040518181527fbc72fdb44c412ebc646560c1f4d50c150c5c962985c4c9e4e79a66556960e0c890602001610f1b565b60026008541415611a435760405162461bcd60e51b8152600401610c6a90614dab565b60026008556000828152600d6020526040902080546001600160a01b03163314611aa05760405162461bcd60e51b815260206004820152600e60248201526d392096b7b7363c903bb934ba32b960911b6044820152606401610c6a565b6003810154600160a01b900460ff1615611af05760405162461bcd60e51b81526020600482015260116024820152701c904b5bdc1d1a5bdb881cd95d1d1b1959607a1b6044820152606401610c6a565b611af983611885565b81546001600160a01b03908116911614611b4a5760405162461bcd60e51b8152602060048201526012602482015271392096bbb934ba32b91036bab9ba1037bbb760711b6044820152606401610c6a565b805442600160a01b90910463ffffffff1611611b9c5760405162461bcd60e51b81526020600482015260116024820152701c904b5bdc1d1a5bdb88195e1c1a5c9959607a1b6044820152606401610c6a565b611ba58361398b565b60038101805460ff60a01b198116600160a01b179091556001600160a01b031615611cd057805460038201546001600160a01b0390811691161415611c2c5760038101546002820154611c27916001600160a01b031690611c19906001600160801b0380821691600160801b900416614fb9565b6001600160801b0316613a1c565b611c59565b60038101546002820154611c59916001600160a01b031690600160801b90046001600160801b0316613a1c565b60018101548154604051632ec14d3f60e01b81526001600160a01b0392831692632ec14d3f92611c9d92600160c01b820463ffffffff169290911690600401614f68565b600060405180830381600087803b158015611cb757600080fd5b505af1158015611ccb573d6000803e3d6000fd5b505050505b8115611d5157600181015481546040516312d11cc160e11b81526001600160a01b03928316926325a2398292611d1a92600160c01b820463ffffffff169290911690600401614f68565b600060405180830381600087803b158015611d3457600080fd5b505af1158015611d48573d6000803e3d6000fd5b50505050611dc5565b6001810154815460405163eaf8b32360e01b81526001600160a01b039092169163eaf8b32391611d9291600160c01b90910463ffffffff1690600401614a4c565b600060405180830381600087803b158015611dac57600080fd5b505af1158015611dc0573d6000803e3d6000fd5b505050505b6040518381527f3d5004f110af0aa62d4bf0e9ad74ac1096552670cb71f616b46821f524ff1ad89060200160405180910390a15050600160085550565b6060611e0d30613f7d565b611e16836140c4565b604051602001611e27929190614fe1565b6040516020818303038152906040529050919050565b60026008541415611e605760405162461bcd60e51b8152600401610c6a90614dab565b60026008556000818152600d6020526040902060038101546001600160a01b0316611ecc5760405162461bcd60e51b815260206004820152601c60248201527b732d626964206d75737420626520776f6e20627920736f6d656f6e6560201b6044820152606401610c6a565b805442600160a01b90910463ffffffff1610611f255760405162461bcd60e51b81526020600482015260186024820152771ccb5bdc1d1a5bdb881b5d5cdd08189948195e1c1a5c995960421b6044820152606401610c6a565b6003810154600160a01b900460ff1615611f8d5760405162461bcd60e51b8152602060048201526024808201527f732d7468652063616c6c2063616e6e6f7420616c7265616479206265207365746044820152631d1b195960e21b6064820152608401610c6a565b6002810154600090611fb2906001600160801b0380821691600160801b900416614fb9565b6001600160801b031690506000611fc884611885565b6000858152600d602052604090206003908101805460ff60a01b1916600160a01b1790558454908501549192506001600160a01b0391821691161461202a578254600284015461202a916001600160a01b0316906001600160801b0316613a1c565b6000336001600160a01b0383161415612055576120478284613a1c565b6120508561398b565b61206a565b506000848152600f6020526040902082905560015b6040805186815282151560208201527f73ee909c0777ba4f98c2039b3978c80555cd6ac9c54da8b3235e0efc262f095c9101611852565b606060018054610b4b90614d22565b6120bb3383836141c1565b5050565b6120c9338361379c565b6120e55760405162461bcd60e51b8152600401610c6a90614d5d565b6120f18484848461428c565b50505050565b60606000612104836142bf565b90506001600160e01b031981166339d690a360e11b14156123ac57600061212a84613023565b9050600061213785611866565b90506000826001600160a01b0316631f48f6ab836040518263ffffffff1660e01b81526004016121679190614a4c565b602060405180830381865afa158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190614e6f565b90506000836001600160a01b031663e7dc956b846040518263ffffffff1660e01b81526004016121d89190614a4c565b602060405180830381865afa1580156121f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122199190615047565b6040516311edb68160e11b81526004810189905290915060009030906323db6d0290602401602060405180830381865afa15801561225b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227f9190615047565b60405163a05b775f60e01b8152600481018a9052909150600090309063a05b775f90602401602060405180830381865afa1580156122c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e59190615047565b60008a81526006602052604081205491925090604051632dc818a960e11b8152600481018c90526001600160a01b038716602482015260448101869052606481018490526084810185905260a4810182905290915073f28B0c5Ef44dd4b3e933ac0d2E8F9b4373Ce6a4490635b9031529060c401600060405180830381865af4158015612376573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261239e9190810190615060565b9a9950505050505050505050565b5050604080518082019091526018815277125b9d985b1a59081d5b99195c9b1e5a5b99c8185cdcd95d60421b6020820152919050565b6000600260085414156124075760405162461bcd60e51b8152600401610c6a90614dab565b600260085560155460ff161561242f5760405162461bcd60e51b8152600401610c6a90614e48565b600c60009054906101000a90046001600160a01b03166001600160a01b0316635b67d9ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561247f57600080fd5b505af1158015612493573d6000803e3d6000fd5b5050604051631f48f6ab60e01b81528792506001600160a01b0383169150631f48f6ab906124c5908890600401614a4c565b602060405180830381865afa1580156124e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125069190614e6f565b6010546001600160a01b0390811691161461255c5760405162461bcd60e51b81526020600482015260166024820152751b55d1558b5d1bdad95b881b9bdd08185b1b1bddd95960521b6044820152606401610c6a565b60405163ba02481b60e01b81526001600160a01b0382169063ba02481b90612588908890600401614a4c565b602060405180830381865afa1580156125a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c99190614df9565b6126135760405162461bcd60e51b815260206004820152601b60248201527a1b55d1558b585cdcd95d081b5d5cdd081899481a5b881d985d5b1d602a1b6044820152606401610c6a565b600080826001600160a01b031663c72bed15886040518263ffffffff1660e01b81526004016126429190614a4c565b6040805180830381865afa15801561265e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268291906150d6565b9150915081801561269b57506001600160a01b03811630145b6126e75760405162461bcd60e51b815260206004820152601f60248201527f6d5745562d63616c6c20636f6e7472616374206e6f74206f70657261746f72006044820152606401610c6a565b60405163774a762760e01b81526001600160a01b0384169063774a762790612713908a90600401614a4c565b602060405180830381865afa158015612730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127549190615105565b63ffffffff168563ffffffff16146127bc5760405162461bcd60e51b815260206004820152602560248201527f6d5745562d656e7469746c656d656e742065787069726174696f6e2064696666604482015264195c995b9d60da1b6064820152608401610c6a565b6010546127d49089906001600160a01b031689613b08565b61282a5760405162461bcd60e51b815260206004820152602160248201527f6d5745562d6f6e6c792070726f746f636f6c207661756c747320616c6c6f77656044820152601960fa1b6064820152608401610c6a565b60405163ecb2c20b60e01b81526000906001600160a01b0385169063ecb2c20b90612859908b90600401614a4c565b602060405180830381865afa158015612876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289a9190614e6f565b90506001600160a01b0381163314806129285750604051635781257360e11b815233906001600160a01b0386169063af024ae6906128dc908c90600401614a4c565b602060405180830381865afa1580156128f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291d9190614e6f565b6001600160a01b0316145b6129805760405162461bcd60e51b8152602060048201526024808201527f6d5745562d6f6e6c79206f776e6572206f72206f70657261746f72206d6179206044820152631b5a5b9d60e21b6064820152608401610c6a565b61298d81858a8a8a613c15565b60016008559998505050505050505050565b6000600260085414156129c45760405162461bcd60e51b8152600401610c6a90614dab565b600260085560155460ff16156129ec5760405162461bcd60e51b8152600401610c6a90614e48565b600c60009054906101000a90046001600160a01b03166001600160a01b0316635b67d9ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612a3c57600080fd5b505af1158015612a50573d6000803e3d6000fd5b50506040516331a9108f60e11b815260048101879052600092506001600160a01b0388169150636352211e90602401602060405180830381865afa158015612a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac09190614e6f565b6010549091506001600160a01b03878116911614612b1e5760405162461bcd60e51b815260206004820152601b60248201527a1b55d14dcb5d1bdad95b881b9bdd081bdb88185b1b1bdddb1a5cdd602a1b6044820152606401610c6a565b336001600160a01b0382161480612b9f575060405163e985e9c560e01b81526001600160a01b0387169063e985e9c590612b5e9084903390600401615122565b602060405180830381865afa158015612b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9f9190614df9565b80612c1b575060405163020604bf60e21b81526004810186905233906001600160a01b0388169063081812fc90602401602060405180830381865afa158015612bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c109190614e6f565b6001600160a01b0316145b612c715760405162461bcd60e51b815260206004820152602160248201527f6d5745372d63616c6c6572206e6f74206f776e6572206f72206f70657261746f6044820152603960f91b6064820152608401610c6a565b60405163e985e9c560e01b81526001600160a01b0387169063e985e9c590612c9f9084903090600401615122565b602060405180830381865afa158015612cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce09190614df9565b80612d5c575060405163020604bf60e21b81526004810186905230906001600160a01b0388169063081812fc90602401602060405180830381865afa158015612d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d519190614e6f565b6001600160a01b0316145b612da55760405162461bcd60e51b815260206004820152601a60248201527936aba29b96b737ba1030b8383937bb32b21037b832b930ba37b960311b6044820152606401610c6a565b600b5460405163b6f3fa3f60e01b81526000916001600160a01b03169063b6f3fa3f90612dd8908a908a9060040161513c565b6020604051808303816000875af1158015612df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1b9190614e6f565b90506000612ea3612e2b8961436a565b604051612e3a60208201614818565b601f1982820381018352601f9091011660408181528251602093840120600b546001600160f81b03198585015260601b6001600160601b031916602184015260358301949094526055808301949094528051808303909401845260759091019052815191012090565b6001600160a01b0316826001600160a01b03161415612ebf5750855b6000612ece8484848a8a613c15565b604080516001600160a01b038781166020830152308284015263ffffffff8a16606080840191909152835180840390910181526080830193849052635c46a7ef60e11b909352929350918b169163b88d4fde91612f3491889188918e9190608401615155565b600060405180830381600087803b158015612f4e57600080fd5b505af1158015612f62573d6000803e3d6000fd5b50506040516331a9108f60e11b8152600481018b90526001600160a01b0386811693508c169150636352211e90602401602060405180830381865afa158015612faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd39190614e6f565b6001600160a01b03161461143c5760405162461bcd60e51b81526020600482015260176024820152761b55d14dcb585cdcd95d081b9bdd081a5b881d985d5b1d604a1b6044820152606401610c6a565b6000908152600d60205260409020600101546001600160a01b031690565b6007546000906001600160a01b038381169116148061308557506001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff165b9392505050565b600260085414156130af5760405162461bcd60e51b8152600401610c6a90614dab565b600260085560155460ff16156130d75760405162461bcd60e51b8152600401610c6a90614e48565b600c60009054906101000a90046001600160a01b03166001600160a01b0316635b67d9ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561312757600080fd5b505af115801561313b573d6000803e3d6000fd5b5050506000828152600d602090815260409182902082516101008101845281546001600160a01b03808216835263ffffffff600160a01b8084048216968501879052600160c01b909304169583019590955260018301548516606083015260028301546001600160801b038082166080850152600160801b9091041660a083015260039092015493841660c082015260ff9190930416151560e0830152909150421161321e5760405162461bcd60e51b8152602060048201526012602482015271189153cb5bdc1d1a5bdb88195e1c1a5c995960721b6044820152606401610c6a565b8060e00151156132655760405162461bcd60e51b8152602060048201526012602482015271189153cb5bdc1d1a5bdb881cd95d1d1b195960721b6044820152606401610c6a565b60c08101516001600160a01b0316156132b65760405162461bcd60e51b815260206004820152601360248201527262454f2d6f7074696f6e20686173206269647360681b6044820152606401610c6a565b6132bf8261398b565b600160e08201526040518281527f4b523da7fb0ebb1e0d08d5d3a34f8eb493d2ccacfc3a6a2d2fbf011c38606b8c9060200160405180910390a150506001600855565b600c54604051632474521560e21b81526001600160a01b03909116906391d148549061334290600080516020615d14833981519152903390600401614de2565b602060405180830381865afa15801561335f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133839190614df9565b61339f5760405162461bcd60e51b8152600401610c6a90614e16565b60125481106133ad57600080fd5b60148190556040518181527f4c0aa8cbd2a45ad4d1999638fe86b622a70f20cf36cae2b0ac42bffea168066390602001610f1b565b600c54604051632474521560e21b81526001600160a01b03909116906391d148549061342290600080516020615d14833981519152903390600401614de2565b602060405180830381865afa15801561343f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134639190614df9565b61347f5760405162461bcd60e51b8152600401610c6a90614e16565b60155460ff1615158115146134c85760405162461bcd60e51b815260206004820152600f60248201526e734d502d6d757374206368616e676560881b6044820152606401610c6a565b6015805460ff19168215159081179091556040519081527f49da065b3a22e1d922a1aaa365357758c9f7c40aff11b507d1a43f9e9f10002b90602001610f1b565b600954610100900460ff16158080156135295750600954600160ff909116105b8061354a57506135383061439a565b15801561354a575060095460ff166001145b6135ad5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c6a565b6009805460ff1916600117905580156135d0576009805461ff0019166101001790555b600c80546001600160a01b038088166001600160a01b03199283168117909355600b8054918716919092161790556040805163affa881760e01b8152905163affa8817916004808201926020929091908290030181865afa158015613639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365d9190614e6f565b601180546001600160a01b03199081166001600160a01b039384161790915560078054821685841617905560108054909116918616919091179055600a8054600101905562015180601281905560326013556014556015805460ff191690558015613702576009805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b613712816143a9565b610f6f5760405162461bcd60e51b8152600401610c6a90614f87565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061376382611885565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806137a883611885565b9050806001600160a01b0316846001600160a01b031614806137cf57506137cf8185613041565b806137f35750836001600160a01b03166137e884610bce565b6001600160a01b0316145b949350505050565b826001600160a01b031661380e82611885565b6001600160a01b0316146138725760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610c6a565b6001600160a01b0382166138d45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c6a565b6138df60008261372e565b6001600160a01b0383166000908152600360205260408120805460019290613908908490614ec5565b90915550506001600160a01b0382166000908152600360205260408120805460019290613936908490614f50565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020615d3483398151915291a4610d0b8383836143c6565b600061399682611885565b90506139a360008361372e565b6001600160a01b03811660009081526003602052604081208054600192906139cc908490614ec5565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020615d34833981519152908390a46120bb816000846143c6565b613a2682826143df565b6120bb57601160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613a7a57600080fd5b505af1158015613a8e573d6000803e3d6000fd5b505060115460405163a9059cbb60e01b81526001600160a01b03909116935063a9059cbb9250613ac591508590859060040161513c565b6020604051808303816000875af1158015613ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190614df9565b6000613b16612e2b8461436a565b6001600160a01b0316846001600160a01b03161415613b3757506001613085565b60405163e7dc956b60e01b81526001600160a01b0385169063e7dc956b90613b63908590600401614a4c565b602060405180830381865afa925050508015613b9c575060408051601f3d908101601f19168201909252613b9991810190615047565b60015b613bda573d808015613bca576040519150601f19603f3d011682016040523d82523d6000602084013e613bcf565b606091505b506000915050613085565b613be7612e2b858361445d565b6001600160a01b0316856001600160a01b03161415613c0a576001915050613085565b505060009392505050565b600060125442613c259190614f50565b8263ffffffff1611613c885760405162461bcd60e51b815260206004820152602660248201527f5f6d4f57562d6578706972657320736f6f6e6572207468616e206d696e2064756044820152653930ba34b7b760d11b6064820152608401610c6a565b6001600160a01b0385166000908152600e6020908152604080832063ffffffff881684529091529020548015613d2e576000818152600d6020526040902060030154600160a01b900460ff16613d2e5760405162461bcd60e51b815260206004820152602560248201527f5f6d4f57562d70726576696f7573206f7074696f6e206d7573742062652073656044820152641d1d1b195960da1b6064820152608401610c6a565b613d3c600a80546001019055565b6000613d47600a5490565b60408051610100810182526001600160a01b038b8116825263ffffffff88811660208085019182528c83168587019081528e8516606087019081526001600160801b038e811660808901908152600060a08a0181815260c08b0182815260e08c018381528e8452600d9098529b90912099518a5497519551908a166001600160c01b031990981697909717600160a01b95891686021763ffffffff60c01b1916600160c01b979098169690960296909617885590516001880180546001600160a01b03191691881691909117905593519251928416600160801b93909416929092029290921760028501559351600390930180549151939092166001600160a81b0319909116179115159092021790559050613e638882614490565b336001600160a01b03891614613e7d57613e7d338261372e565b6001600160a01b038781166000818152600e6020908152604080832063ffffffff8c8116808652918452938290208790558151958e1686529185019390935283830152606083018490526001600160801b0388166080840152861660a0830152517f1942da09a08718d22494497e4f9610b26572dd3de279f0793d826d170c5305989181900360c00190a1979650505050505050565b600281015481546003830154600160801b9092046001600160801b0316916001600160a01b0391821691161415613f5f576002820154613f5c906001600160801b031682614ec5565b90505b80156120bb5760038201546120bb906001600160a01b031682613a1c565b60408051602880825260608281019093526000919060208201818036833701905050905060005b60148110156140bd576000613fba826013614ec5565b613fc5906008614f07565b613fd0906002615276565b613fe3906001600160a01b038716614f3c565b60f81b9050600060108260f81c613ffa9190615282565b60f81b905060008160f81c601061401191906152a4565b8360f81c61401f91906152c5565b60f81b905061402d826144aa565b85614039866002614f07565b81518110614049576140496152e8565b60200101906001600160f81b031916908160001a905350614069816144aa565b85614075866002614f07565b614080906001614f50565b81518110614090576140906152e8565b60200101906001600160f81b031916908160001a90535050505080806140b5906152fe565b915050613fa4565b5092915050565b6060816140e85750506040805180820190915260018152600360fc1b602082015290565b8160005b811561411257806140fc816152fe565b915061410b9050600a83614f3c565b91506140ec565b6000816001600160401b0381111561412c5761412c614adb565b6040519080825280601f01601f191660200182016040528015614156576020820181803683370190505b5090505b84156137f35761416b600183614ec5565b9150614178600a86615319565b614183906030614f50565b60f81b818381518110614198576141986152e8565b60200101906001600160f81b031916908160001a9053506141ba600a86614f3c565b945061415a565b816001600160a01b0316836001600160a01b0316141561421f5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610c6a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6142978484846137fb565b6142a3848484846144e0565b6120f15760405162461bcd60e51b8152600401610c6a9061532d565b60006142da6142cd83613023565b63162ff4f760e21b6145e5565b1561430657507f73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a919050565b60405162461bcd60e51b815260206004820152602e60248201527f5f756e6465726c79696e672d636c6173733a20556e737570706f72746564207560448201526d6e6465726c79696e67207479706560901b6064820152608401610c6a565b919050565b60008160405160200161437d91906148dc565b604051602081830303815290604052805190602001209050919050565b6001600160a01b03163b151590565b6000908152600260205260409020546001600160a01b0316151590565b6000908152600660205260409020805460010190555050565b6040805160008082526020820190925281906001600160a01b0385169061753090859060405161440f919061537f565b600060405180830381858888f193505050503d806000811461444d576040519150601f19603f3d011682016040523d82523d6000602084013e614452565b606091505b509095945050505050565b6000828260405160200161447292919061513c565b60405160208183030381529060405280519060200120905092915050565b6120bb828260405180602001604052806000815250614601565b6000600a60f883901c10156144d1576144c860f883901c603061539b565b60f81b92915050565b6144c860f883901c605761539b565b60006144f4846001600160a01b031661439a565b156145da57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061452b903390899088908890600401615155565b6020604051808303816000875af1925050508015614566575060408051601f3d908101601f19168201909252614563918101906153c0565b60015b6145c0573d808015614594576040519150601f19603f3d011682016040523d82523d6000602084013e614599565b606091505b5080516145b85760405162461bcd60e51b8152600401610c6a9061532d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506137f3565b506001949350505050565b60006145f083614634565b801561308557506130858383614667565b61460b83836146f0565b61461860008484846144e0565b610d0b5760405162461bcd60e51b8152600401610c6a9061532d565b6000614647826301ffc9a760e01b614667565b8015610ae65750614660826001600160e01b0319614667565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156146d9575060208210155b80156146e55750600081115b979650505050505050565b6001600160a01b0382166147465760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c6a565b61474f816143a9565b1561479b5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606401610c6a565b6001600160a01b03821660009081526003602052604081208054600192906147c4908490614f50565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020615d34833981519152908290a46120bb600083836143c6565b610936806153de83390190565b60006020828403121561483757600080fd5b5035919050565b6001600160e01b031981168114610f6f57600080fd5b60006020828403121561486657600080fd5b81356130858161483e565b60005b8381101561488c578181015183820152602001614874565b838111156120f15750506000910152565b600081518084526148b5816020860160208601614871565b601f01601f19169290920160200192915050565b602081526000613085602083018461489d565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610f6f57600080fd5b6000806040838503121561491857600080fd5b8235614923816148f0565b946020939093013593505050565b63ffffffff81168114610f6f57600080fd5b6000806040838503121561495657600080fd5b8235614961816148f0565b9150602083013561497181614931565b809150509250929050565b60008060006060848603121561499157600080fd5b833561499c816148f0565b925060208401356149ac816148f0565b929592945050506040919091013590565b80356001600160801b038116811461436557600080fd5b60008060008060008587036101008112156149ee57600080fd5b86356149f9816148f0565b95506020870135614a0981614931565b9450614a17604088016149bd565b93506060870135614a2781614931565b92506080607f1982011215614a3b57600080fd5b506080860190509295509295909350565b63ffffffff91909116815260200190565b600060208284031215614a6f57600080fd5b8135613085816148f0565b8015158114610f6f57600080fd5b60008060408385031215614a9b57600080fd5b82359150602083013561497181614a7a565b60008060408385031215614ac057600080fd5b8235614acb816148f0565b9150602083013561497181614a7a565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614b1957614b19614adb565b604052919050565b60006001600160401b03821115614b3a57614b3a614adb565b50601f01601f191660200190565b60008060008060808587031215614b5e57600080fd5b8435614b69816148f0565b93506020850135614b79816148f0565b92506040850135915060608501356001600160401b03811115614b9b57600080fd5b8501601f81018713614bac57600080fd5b8035614bbf614bba82614b21565b614af1565b818152886020838501011115614bd457600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060008060808587031215614c0c57600080fd5b8435614c17816148f0565b93506020850135614c2781614931565b9250614c35604086016149bd565b91506060850135614c4581614931565b939692955090935050565b60008060008060808587031215614c6657600080fd5b8435614c71816148f0565b935060208501359250614c35604086016149bd565b60008060408385031215614c9957600080fd5b8235614ca4816148f0565b91506020830135614971816148f0565b600060208284031215614cc657600080fd5b813561308581614a7a565b60008060008060808587031215614ce757600080fd5b8435614cf2816148f0565b93506020850135614d02816148f0565b92506040850135614d12816148f0565b91506060850135614c45816148f0565b600181811c90821680614d3657607f821691505b60208210811415614d5757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b9182526001600160a01b0316602082015260400190565b600060208284031215614e0b57600080fd5b815161308581614a7a565b60208082526018908201527731b0b63632b9103732b2b2399026a0a925a2aa2fa1a7a72360411b604082015260600190565b6020808252600d908201526c1b585c9ad95d081c185d5cd959609a1b604082015260600190565b600060208284031215614e8157600080fd5b8151613085816148f0565b600060208284031215614e9e57600080fd5b813560ff8116811461308557600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614ed757614ed7614eaf565b500390565b60006001600160801b03828116848216808303821115614efe57614efe614eaf565b01949350505050565b6000816000190483118215151615614f2157614f21614eaf565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614f4b57614f4b614f26565b500490565b60008219821115614f6357614f63614eaf565b500190565b63ffffffff9290921682526001600160a01b0316602082015260400190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60006001600160801b0383811690831681811015614fd957614fd9614eaf565b039392505050565b7f746f6b656e2e686f6f6b2e78797a2f6f7074696f6e2d636f6e74726163742f0081526000835161501981601f850160208801614871565b8083019050602f60f81b601f820152835161503b816020840160208801614871565b01602001949350505050565b60006020828403121561505957600080fd5b5051919050565b60006020828403121561507257600080fd5b81516001600160401b0381111561508857600080fd5b8201601f8101841361509957600080fd5b80516150a7614bba82614b21565b8181528560208385010111156150bc57600080fd5b6150cd826020830160208601614871565b95945050505050565b600080604083850312156150e957600080fd5b82516150f481614a7a565b6020840151909250614971816148f0565b60006020828403121561511757600080fd5b815161308581614931565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906151889083018461489d565b9695505050505050565b600181815b808511156151cd5781600019048211156151b3576151b3614eaf565b808516156151c057918102915b93841c9390800290615197565b509250929050565b6000826151e457506001610ae6565b816151f157506000610ae6565b816001811461520757600281146152115761522d565b6001915050610ae6565b60ff84111561522257615222614eaf565b50506001821b610ae6565b5060208310610133831016604e8410600b8410161715615250575081810a610ae6565b61525a8383615192565b806000190482111561526e5761526e614eaf565b029392505050565b600061308583836151d5565b600060ff83168061529557615295614f26565b8060ff84160491505092915050565b600060ff821660ff84168160ff048111821515161561526e5761526e614eaf565b600060ff821660ff8416808210156152df576152df614eaf565b90039392505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561531257615312614eaf565b5060010190565b60008261532857615328614f26565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008251615391818460208701614871565b9190910192915050565b600060ff821660ff84168060ff038211156153b8576153b8614eaf565b019392505050565b6000602082840312156153d257600080fd5b81516130858161483e56fe608060405234801561001057600080fd5b50610916806100206000396000f3fe6080604052600436106100225760003560e01c80637fe8e72c1461003957610031565b366100315761002f610059565b005b61002f610059565b34801561004557600080fd5b5061002f61005436600461068c565b61006b565b61006961006461016f565b6101f6565b565b6000610077600161021a565b905080156100af57600161009f61009c8260008051602061087a83398151915261074f565b90565b805460ff19169115159190911790555b6100da60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5161074f565b60008051602061085a833981519152146100f6576100f6610774565b610102838360006102ee565b801561016a57600061012661009c600160008051602061087a83398151915261074f565b805460ff1916911515919091179055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600061019060008051602061085a833981519152546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f1919061078a565b905090565b3660008037600080366000845af43d6000803e808015610215573d6000f35b3d6000fd5b600061023861009c600160008051602061087a83398151915261074f565b5460ff1615610287578160ff16600114801561025a5750610258306103ae565b155b61027f5760405162461bcd60e51b8152600401610276906107a7565b60405180910390fd5b506000919050565b60ff82166102a761009c600160008051602061089a83398151915261074f565b54106102c55760405162461bcd60e51b8152600401610276906107a7565b60ff82166102e561009c600160008051602061089a83398151915261074f565b55506001919050565b6102f7836103bd565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806103385750805b1561016a576103a8836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a2919061078a565b8361051e565b50505050565b6001600160a01b03163b151590565b6103c6816103ae565b6104205760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b6064820152608401610276565b61048a816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610485919061078a565b6103ae565b6104ef5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b6064820152608401610276565b60008051602061085a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b606061054383836040518060600160405280602781526020016108ba6027913961054a565b9392505050565b6060610555846103ae565b6105b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610276565b600080856001600160a01b0316856040516105cb919061080a565b600060405180830381855af49150503d8060008114610606576040519150601f19603f3d011682016040523d82523d6000602084013e61060b565b606091505b509150915061061b828286610625565b9695505050505050565b60608315610634575081610543565b8251156106445782518084602001fd5b8160405162461bcd60e51b81526004016102769190610826565b6001600160a01b038116811461067357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561069f57600080fd5b82356106aa8161065e565b915060208301356001600160401b03808211156106c657600080fd5b818501915085601f8301126106da57600080fd5b8135818111156106ec576106ec610676565b604051601f8201601f19908116603f0116810190838211818310171561071457610714610676565b8160405282815288602084870101111561072d57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008282101561076f57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561079c57600080fd5b81516105438161065e565b6020808252601f908201527f636f6e747261637420697320616c726561647920696e697469616c697a656400604082015260600190565b60005b838110156107f95781810151838201526020016107e1565b838111156103a85750506000910152565b6000825161081c8184602087016107de565b9190910192915050565b60208152600082518060208401526108458160408501602087016107de565b601f01601f1916919091016040019291505056fea3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50ba701f97ffd09be973ab0487da5ef9921c2bd0aad55202b3c0b41745a8ecda29021cb2f443fd62c4cb6b5d341f5eb8cd045222fc4183f8753d3725ac19741805416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201902b2ab44cdf0715c6e3d610362589ccda73f8de411b662f588e9f6dea04ad464736f6c634300080a00338de11a8d956993287a5b6a74c069984045abc1b621d651081c4c77c05c3cb7afddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202506456192bf8a8b8ab8155cbb2ea0f22bd640e7b1875ef07165fb4b8dfe345e64736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061024e5760003560e01c80623a4a0f1461025357806301ffc9a71461028657806306fdde03146102b6578063081812fc146102d8578063095ea7b3146103055780630d5e67ec146103275780631e2e74e21461035b57806323b872dd1461039357806323db6d02146103b3578063247f0879146103ec57806332ab2f841461040c5780633a283bd21461042c5780633c7cfe34146104465780633fc8cef31461049e57806342842e0e146104be57806342966c68146104de578063439bb40f146104fe578063454a2ab31461051e578063536ff9ad1461053157806361f547fd1461055e5780636352211e1461058b57806367207872146105ab57806370a08231146105c157806377ff20bd146105e15780637b850da91461062c5780637f1a48851461064c5780637fb6afd41461066c578063829b58471461068c57806383b6fa98146106ac57806390f0252a146106cc57806395d89b4114610705578063a05b775f1461071a578063a22cb46514610754578063a34fd3fb14610774578063acca6838146107a8578063b4985c94146107dc578063b88d4fde146107fc578063bb31173a1461081c578063c87b56dd14610850578063cc06752514610870578063cd52d15114610890578063d365016c14610974578063dee92f5d14610994578063e63ab1e9146109aa578063e6bd26a2146109de578063e985e9c5146109fe578063e9d69ff214610a1e578063ed059f2714610a3e578063ef17ac7f14610a5e578063f23c19e814610a7e578063f8c8765e14610aa0578063ff58aaaa14610ac0575b600080fd5b34801561025f57600080fd5b5061027361026e366004614825565b610ad6565b6040519081526020015b60405180910390f35b34801561029257600080fd5b506102a66102a1366004614854565b610aec565b604051901515815260200161027d565b3480156102c257600080fd5b506102cb610b3c565b60405161027d91906148c9565b3480156102e457600080fd5b506102f86102f3366004614825565b610bce565b60405161027d91906148dc565b34801561031157600080fd5b50610325610320366004614905565b610bf5565b005b34801561033357600080fd5b506102737f945438d5e976f17e0d00cb2997cf8951c55e12977d86234d6738d1865abe006e81565b34801561036757600080fd5b50610273610376366004614943565b600e60209081526000928352604080842090915290825290205481565b34801561039f57600080fd5b506103256103ae36600461497c565b610d10565b3480156103bf57600080fd5b506102736103ce366004614825565b6000908152600d60205260409020600201546001600160801b031690565b3480156103f857600080fd5b50610325610407366004614825565b610d42565b34801561041857600080fd5b50610325610427366004614825565b610e3f565b34801561043857600080fd5b506015546102a69060ff1681565b34801561045257600080fd5b50610486610461366004614825565b6000908152600d6020526040902060020154600160801b90046001600160801b031690565b6040516001600160801b03909116815260200161027d565b3480156104aa57600080fd5b506011546102f8906001600160a01b031681565b3480156104ca57600080fd5b506103256104d936600461497c565b610f26565b3480156104ea57600080fd5b506103256104f9366004614825565b610f41565b34801561050a57600080fd5b506102736105193660046149d4565b610f72565b61032561052c366004614825565b61144d565b34801561053d57600080fd5b5061027361054c366004614825565b600f6020526000908152604090205481565b34801561056a57600080fd5b5061057e610579366004614825565b611866565b60405161027d9190614a4c565b34801561059757600080fd5b506102f86105a6366004614825565b611885565b3480156105b757600080fd5b5061027360125481565b3480156105cd57600080fd5b506102736105dc366004614a5d565b6118ba565b3480156105ed57600080fd5b506102736105fc366004614943565b6001600160a01b0382166000908152600e6020908152604080832063ffffffff8516845290915290205492915050565b34801561063857600080fd5b50610325610647366004614825565b611940565b34801561065857600080fd5b506007546102f8906001600160a01b031681565b34801561067857600080fd5b50610325610687366004614a88565b611a20565b34801561069857600080fd5b506102cb6106a7366004614825565b611e02565b3480156106b857600080fd5b506103256106c7366004614825565b611e3d565b3480156106d857600080fd5b506102f86106e7366004614825565b6000908152600d60205260409020600301546001600160a01b031690565b34801561071157600080fd5b506102cb6120a1565b34801561072657600080fd5b50610273610735366004614825565b6000908152600d6020526040902054600160a01b900463ffffffff1690565b34801561076057600080fd5b5061032561076f366004614aad565b6120b0565b34801561078057600080fd5b506102737f657f307dfada290937bc821a25e2da10feb07809ba9560b816723e8b47fe379a81565b3480156107b457600080fd5b506102737ffba4f6dd992a27a814ee807eb2f9332d6d01312041726966a540cf4a4a89155381565b3480156107e857600080fd5b506010546102f8906001600160a01b031681565b34801561080857600080fd5b50610325610817366004614b48565b6120bf565b34801561082857600080fd5b506102737ff7e0191f3657a6da7569740b1cdeac8c3425bcbfd257d4fdc6d2241598f4de8b81565b34801561085c57600080fd5b506102cb61086b366004614825565b6120f7565b34801561087c57600080fd5b5061027361088b366004614bf6565b6123e2565b34801561089c57600080fd5b506109156108ab366004614825565b600d6020526000908152604090208054600182015460028301546003909301546001600160a01b0380841694600160a01b80860463ffffffff90811696600160c01b900416948316936001600160801b0380841694600160801b9094041692811691900460ff1688565b604080516001600160a01b03998a16815263ffffffff9889166020820152969097169686019690965292861660608501526001600160801b0391821660808501521660a083015290921660c0830152151560e08201526101000161027d565b34801561098057600080fd5b5061027361098f366004614c50565b61299f565b3480156109a057600080fd5b5061027360135481565b3480156109b657600080fd5b506102737f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b3480156109ea57600080fd5b506102f86109f9366004614825565b613023565b348015610a0a57600080fd5b506102a6610a19366004614c86565b613041565b348015610a2a57600080fd5b50610325610a39366004614825565b61308c565b348015610a4a57600080fd5b50610325610a59366004614825565b613302565b348015610a6a57600080fd5b50610325610a79366004614cb4565b6133e2565b348015610a8a57600080fd5b50610273600080516020615d1483398151915281565b348015610aac57600080fd5b50610325610abb366004614cd1565b613509565b348015610acc57600080fd5b5061027360145481565b6000818152600660205260408120545b92915050565b60006001600160e01b031982166380ac58cd60e01b1480610b1d57506001600160e01b03198216635b5e139f60e01b145b80610ae657506301ffc9a760e01b6001600160e01b0319831614610ae6565b606060008054610b4b90614d22565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7790614d22565b8015610bc45780601f10610b9957610100808354040283529160200191610bc4565b820191906000526020600020905b815481529060010190602001808311610ba757829003601f168201915b5050505050905090565b6000610bd982613709565b506000908152600460205260409020546001600160a01b031690565b6000610c0082611885565b9050806001600160a01b0316836001600160a01b03161415610c735760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610c8f5750610c8f8133613041565b610d015760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610c6a565b610d0b838361372e565b505050565b610d1b335b8261379c565b610d375760405162461bcd60e51b8152600401610c6a90614d5d565b610d0b8383836137fb565b60026008541415610d655760405162461bcd60e51b8152600401610c6a90614dab565b60026008556000610d7582611885565b9050336001600160a01b03821614610dc05760405162461bcd60e51b815260206004820152600e60248201526d634f502d6f776e6572206f6e6c7960901b6044820152606401610c6a565b6000828152600f6020526040812080549190558015610e3557610de28361398b565b604080518481526001600160a01b03841660208201529081018290527f3b243b2a7fb9066beef2765291666e8995942faa5d65b584d1c4acea92f166579060600160405180910390a1610e358282613a1c565b5050600160085550565b600c54604051632474521560e21b81526001600160a01b03909116906391d1485490610e7f90600080516020615d14833981519152903390600401614de2565b602060405180830381865afa158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec09190614df9565b610edc5760405162461bcd60e51b8152600401610c6a90614e16565b8060145410610eea57600080fd5b60128190556040518181527f40f2d0804ee87f2940dd9632dfaf1a60b67da0186089af5431b86c17cd234c9e906020015b60405180910390a150565b610d0b838383604051806020016040528060008152506120bf565b610f4a33610d15565b610f665760405162461bcd60e51b8152600401610c6a90614d5d565b610f6f8161398b565b50565b600060026008541415610f975760405162461bcd60e51b8152600401610c6a90614dab565b600260085560155460ff1615610fbf5760405162461bcd60e51b8152600401610c6a90614e48565b600c60009054906101000a90046001600160a01b03166001600160a01b0316635b67d9ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561100f57600080fd5b505af1158015611023573d6000803e3d6000fd5b5050604051631f48f6ab60e01b81528892506001600160a01b0383169150631f48f6ab90611055908990600401614a4c565b602060405180830381865afa158015611072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110969190614e6f565b6010546001600160a01b039081169116146110eb5760405162461bcd60e51b81526020600482015260156024820152741b55d58b5d1bdad95b881b9bdd08185b1b1bddd959605a1b6044820152606401610c6a565b60405163ba02481b60e01b81526001600160a01b0382169063ba02481b90611117908990600401614a4c565b602060405180830381865afa158015611134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111589190614df9565b61119d5760405162461bcd60e51b81526020600482015260166024820152751b55d58b585cdcd95d081b9bdd081a5b881d985d5b1d60521b6044820152606401610c6a565b6010546111b59088906001600160a01b031688613b08565b6112105760405162461bcd60e51b815260206004820152602660248201527f6d57562d63616e206f6e6c79206d696e7420776974682070726f746f636f6c206044820152657661756c747360d01b6064820152608401610c6a565b60405163ecb2c20b60e01b81526000906001600160a01b0383169063ecb2c20b9061123f908a90600401614a4c565b602060405180830381865afa15801561125c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112809190614e6f565b9050336001600160a01b03821614806113165750604051635781257360e11b81526001600160a01b0383169063af024ae6906112c0908a90600401614a4c565b602060405180830381865afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113019190614e6f565b6001600160a01b0316336001600160a01b0316145b6113815760405162461bcd60e51b815260206004820152603660248201527f6d57562d63616c6c656420627920736f6d656f6e65206f74686572207468616e604482015275103a34329037bbb732b91037b91037b832b930ba37b960511b6064820152608401610c6a565b6001600160a01b0382166303e7158b30878a6113a360408a0160208b01614e8c565b604080516001600160e01b031960e088901b1681526001600160a01b03909516600486015263ffffffff938416602486015291909216604484015260ff90911660648301528701356084820152606087013560a482015260c401600060405180830381600087803b15801561141757600080fd5b505af115801561142b573d6000803e3d6000fd5b5050505061143c8183898989613c15565b600160085598975050505050505050565b600260085414156114705760405162461bcd60e51b8152600401610c6a90614dab565b600260088190556000828152600d602090815260409182902082516101008101845281546001600160a01b03808216835263ffffffff600160a01b8084048216968501879052600160c01b9093041695830195909552600183015485166060830152948201546001600160801b038082166080840152600160801b9091041660a082015260039091015492831660c082015260ff9390920492909216151560e0820152829142106115505760405162461bcd60e51b815260206004820152600a60248201526918914b595e1c1a5c995960b21b6044820152606401610c6a565b42601454826020015163ffffffff166115699190614ec5565b11156115b75760405162461bcd60e51b815260206004820152601d60248201527f62452d62696464696e6720737461727473206f6e206c617374206461790000006044820152606401610c6a565b8060e00151156115fe5760405162461bcd60e51b815260206004820152601260248201527118914b585b1c9958591e481cd95d1d1b195960721b6044820152606401610c6a565b6000838152600d6020526040902080543491906001600160a01b031633141561163c576002810154611639906001600160801b031683614edc565b91505b60135460028201546127109161166191600160801b90046001600160801b0316614f07565b61166b9190614f3c565b600282015461168a9190600160801b90046001600160801b0316614f50565b826001600160801b031610156116f05760405162461bcd60e51b815260206004820152602560248201527f622d6d757374206f766572626964206279206d696e426964496e6372656d656e604482015264744269707360d81b6064820152608401610c6a565b60028101546001600160801b039081169083161161175c5760405162461bcd60e51b8152602060048201526024808201527f622d626964206973206c6f776572207468616e2074686520737472696b6520706044820152637269636560e01b6064820152608401610c6a565b61176581613f13565b6002810180546001600160801b03808516600160801b0291161790556003810180546001600160a01b0319163390811790915560018201548254604051632ec14d3f60e01b81526001600160a01b039290921692632ec14d3f926117db9263ffffffff600160c01b909104169190600401614f68565b600060405180830381600087803b1580156117f557600080fd5b505af1158015611809573d6000803e3d6000fd5b5050604080518881526001600160801b038616602082015233918101919091527ffd7cfbd219ff1e7365436fb2930a026fa6704a1e0bb39ad104f0485c8c01124d925060600190505b60405180910390a150506001600855505050565b6000908152600d6020526040902054600160c01b900463ffffffff1690565b6000818152600260205260408120546001600160a01b031680610ae65760405162461bcd60e51b8152600401610c6a90614f87565b60006001600160a01b0382166119245760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610c6a565b506001600160a01b031660009081526003602052604090205490565b600c54604051632474521560e21b81526001600160a01b03909116906391d148549061198090600080516020615d14833981519152903390600401614de2565b602060405180830381865afa15801561199d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c19190614df9565b6119dd5760405162461bcd60e51b8152600401610c6a90614e16565b6107d081106119eb57600080fd5b60138190556040518181527fbc72fdb44c412ebc646560c1f4d50c150c5c962985c4c9e4e79a66556960e0c890602001610f1b565b60026008541415611a435760405162461bcd60e51b8152600401610c6a90614dab565b60026008556000828152600d6020526040902080546001600160a01b03163314611aa05760405162461bcd60e51b815260206004820152600e60248201526d392096b7b7363c903bb934ba32b960911b6044820152606401610c6a565b6003810154600160a01b900460ff1615611af05760405162461bcd60e51b81526020600482015260116024820152701c904b5bdc1d1a5bdb881cd95d1d1b1959607a1b6044820152606401610c6a565b611af983611885565b81546001600160a01b03908116911614611b4a5760405162461bcd60e51b8152602060048201526012602482015271392096bbb934ba32b91036bab9ba1037bbb760711b6044820152606401610c6a565b805442600160a01b90910463ffffffff1611611b9c5760405162461bcd60e51b81526020600482015260116024820152701c904b5bdc1d1a5bdb88195e1c1a5c9959607a1b6044820152606401610c6a565b611ba58361398b565b60038101805460ff60a01b198116600160a01b179091556001600160a01b031615611cd057805460038201546001600160a01b0390811691161415611c2c5760038101546002820154611c27916001600160a01b031690611c19906001600160801b0380821691600160801b900416614fb9565b6001600160801b0316613a1c565b611c59565b60038101546002820154611c59916001600160a01b031690600160801b90046001600160801b0316613a1c565b60018101548154604051632ec14d3f60e01b81526001600160a01b0392831692632ec14d3f92611c9d92600160c01b820463ffffffff169290911690600401614f68565b600060405180830381600087803b158015611cb757600080fd5b505af1158015611ccb573d6000803e3d6000fd5b505050505b8115611d5157600181015481546040516312d11cc160e11b81526001600160a01b03928316926325a2398292611d1a92600160c01b820463ffffffff169290911690600401614f68565b600060405180830381600087803b158015611d3457600080fd5b505af1158015611d48573d6000803e3d6000fd5b50505050611dc5565b6001810154815460405163eaf8b32360e01b81526001600160a01b039092169163eaf8b32391611d9291600160c01b90910463ffffffff1690600401614a4c565b600060405180830381600087803b158015611dac57600080fd5b505af1158015611dc0573d6000803e3d6000fd5b505050505b6040518381527f3d5004f110af0aa62d4bf0e9ad74ac1096552670cb71f616b46821f524ff1ad89060200160405180910390a15050600160085550565b6060611e0d30613f7d565b611e16836140c4565b604051602001611e27929190614fe1565b6040516020818303038152906040529050919050565b60026008541415611e605760405162461bcd60e51b8152600401610c6a90614dab565b60026008556000818152600d6020526040902060038101546001600160a01b0316611ecc5760405162461bcd60e51b815260206004820152601c60248201527b732d626964206d75737420626520776f6e20627920736f6d656f6e6560201b6044820152606401610c6a565b805442600160a01b90910463ffffffff1610611f255760405162461bcd60e51b81526020600482015260186024820152771ccb5bdc1d1a5bdb881b5d5cdd08189948195e1c1a5c995960421b6044820152606401610c6a565b6003810154600160a01b900460ff1615611f8d5760405162461bcd60e51b8152602060048201526024808201527f732d7468652063616c6c2063616e6e6f7420616c7265616479206265207365746044820152631d1b195960e21b6064820152608401610c6a565b6002810154600090611fb2906001600160801b0380821691600160801b900416614fb9565b6001600160801b031690506000611fc884611885565b6000858152600d602052604090206003908101805460ff60a01b1916600160a01b1790558454908501549192506001600160a01b0391821691161461202a578254600284015461202a916001600160a01b0316906001600160801b0316613a1c565b6000336001600160a01b0383161415612055576120478284613a1c565b6120508561398b565b61206a565b506000848152600f6020526040902082905560015b6040805186815282151560208201527f73ee909c0777ba4f98c2039b3978c80555cd6ac9c54da8b3235e0efc262f095c9101611852565b606060018054610b4b90614d22565b6120bb3383836141c1565b5050565b6120c9338361379c565b6120e55760405162461bcd60e51b8152600401610c6a90614d5d565b6120f18484848461428c565b50505050565b60606000612104836142bf565b90506001600160e01b031981166339d690a360e11b14156123ac57600061212a84613023565b9050600061213785611866565b90506000826001600160a01b0316631f48f6ab836040518263ffffffff1660e01b81526004016121679190614a4c565b602060405180830381865afa158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190614e6f565b90506000836001600160a01b031663e7dc956b846040518263ffffffff1660e01b81526004016121d89190614a4c565b602060405180830381865afa1580156121f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122199190615047565b6040516311edb68160e11b81526004810189905290915060009030906323db6d0290602401602060405180830381865afa15801561225b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227f9190615047565b60405163a05b775f60e01b8152600481018a9052909150600090309063a05b775f90602401602060405180830381865afa1580156122c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e59190615047565b60008a81526006602052604081205491925090604051632dc818a960e11b8152600481018c90526001600160a01b038716602482015260448101869052606481018490526084810185905260a4810182905290915073__$1ccb32651d98a3fae6a240417ad5ffe6c1$__90635b9031529060c401600060405180830381865af4158015612376573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261239e9190810190615060565b9a9950505050505050505050565b5050604080518082019091526018815277125b9d985b1a59081d5b99195c9b1e5a5b99c8185cdcd95d60421b6020820152919050565b6000600260085414156124075760405162461bcd60e51b8152600401610c6a90614dab565b600260085560155460ff161561242f5760405162461bcd60e51b8152600401610c6a90614e48565b600c60009054906101000a90046001600160a01b03166001600160a01b0316635b67d9ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561247f57600080fd5b505af1158015612493573d6000803e3d6000fd5b5050604051631f48f6ab60e01b81528792506001600160a01b0383169150631f48f6ab906124c5908890600401614a4c565b602060405180830381865afa1580156124e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125069190614e6f565b6010546001600160a01b0390811691161461255c5760405162461bcd60e51b81526020600482015260166024820152751b55d1558b5d1bdad95b881b9bdd08185b1b1bddd95960521b6044820152606401610c6a565b60405163ba02481b60e01b81526001600160a01b0382169063ba02481b90612588908890600401614a4c565b602060405180830381865afa1580156125a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c99190614df9565b6126135760405162461bcd60e51b815260206004820152601b60248201527a1b55d1558b585cdcd95d081b5d5cdd081899481a5b881d985d5b1d602a1b6044820152606401610c6a565b600080826001600160a01b031663c72bed15886040518263ffffffff1660e01b81526004016126429190614a4c565b6040805180830381865afa15801561265e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268291906150d6565b9150915081801561269b57506001600160a01b03811630145b6126e75760405162461bcd60e51b815260206004820152601f60248201527f6d5745562d63616c6c20636f6e7472616374206e6f74206f70657261746f72006044820152606401610c6a565b60405163774a762760e01b81526001600160a01b0384169063774a762790612713908a90600401614a4c565b602060405180830381865afa158015612730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127549190615105565b63ffffffff168563ffffffff16146127bc5760405162461bcd60e51b815260206004820152602560248201527f6d5745562d656e7469746c656d656e742065787069726174696f6e2064696666604482015264195c995b9d60da1b6064820152608401610c6a565b6010546127d49089906001600160a01b031689613b08565b61282a5760405162461bcd60e51b815260206004820152602160248201527f6d5745562d6f6e6c792070726f746f636f6c207661756c747320616c6c6f77656044820152601960fa1b6064820152608401610c6a565b60405163ecb2c20b60e01b81526000906001600160a01b0385169063ecb2c20b90612859908b90600401614a4c565b602060405180830381865afa158015612876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289a9190614e6f565b90506001600160a01b0381163314806129285750604051635781257360e11b815233906001600160a01b0386169063af024ae6906128dc908c90600401614a4c565b602060405180830381865afa1580156128f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291d9190614e6f565b6001600160a01b0316145b6129805760405162461bcd60e51b8152602060048201526024808201527f6d5745562d6f6e6c79206f776e6572206f72206f70657261746f72206d6179206044820152631b5a5b9d60e21b6064820152608401610c6a565b61298d81858a8a8a613c15565b60016008559998505050505050505050565b6000600260085414156129c45760405162461bcd60e51b8152600401610c6a90614dab565b600260085560155460ff16156129ec5760405162461bcd60e51b8152600401610c6a90614e48565b600c60009054906101000a90046001600160a01b03166001600160a01b0316635b67d9ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612a3c57600080fd5b505af1158015612a50573d6000803e3d6000fd5b50506040516331a9108f60e11b815260048101879052600092506001600160a01b0388169150636352211e90602401602060405180830381865afa158015612a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac09190614e6f565b6010549091506001600160a01b03878116911614612b1e5760405162461bcd60e51b815260206004820152601b60248201527a1b55d14dcb5d1bdad95b881b9bdd081bdb88185b1b1bdddb1a5cdd602a1b6044820152606401610c6a565b336001600160a01b0382161480612b9f575060405163e985e9c560e01b81526001600160a01b0387169063e985e9c590612b5e9084903390600401615122565b602060405180830381865afa158015612b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9f9190614df9565b80612c1b575060405163020604bf60e21b81526004810186905233906001600160a01b0388169063081812fc90602401602060405180830381865afa158015612bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c109190614e6f565b6001600160a01b0316145b612c715760405162461bcd60e51b815260206004820152602160248201527f6d5745372d63616c6c6572206e6f74206f776e6572206f72206f70657261746f6044820152603960f91b6064820152608401610c6a565b60405163e985e9c560e01b81526001600160a01b0387169063e985e9c590612c9f9084903090600401615122565b602060405180830381865afa158015612cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce09190614df9565b80612d5c575060405163020604bf60e21b81526004810186905230906001600160a01b0388169063081812fc90602401602060405180830381865afa158015612d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d519190614e6f565b6001600160a01b0316145b612da55760405162461bcd60e51b815260206004820152601a60248201527936aba29b96b737ba1030b8383937bb32b21037b832b930ba37b960311b6044820152606401610c6a565b600b5460405163b6f3fa3f60e01b81526000916001600160a01b03169063b6f3fa3f90612dd8908a908a9060040161513c565b6020604051808303816000875af1158015612df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1b9190614e6f565b90506000612ea3612e2b8961436a565b604051612e3a60208201614818565b601f1982820381018352601f9091011660408181528251602093840120600b546001600160f81b03198585015260601b6001600160601b031916602184015260358301949094526055808301949094528051808303909401845260759091019052815191012090565b6001600160a01b0316826001600160a01b03161415612ebf5750855b6000612ece8484848a8a613c15565b604080516001600160a01b038781166020830152308284015263ffffffff8a16606080840191909152835180840390910181526080830193849052635c46a7ef60e11b909352929350918b169163b88d4fde91612f3491889188918e9190608401615155565b600060405180830381600087803b158015612f4e57600080fd5b505af1158015612f62573d6000803e3d6000fd5b50506040516331a9108f60e11b8152600481018b90526001600160a01b0386811693508c169150636352211e90602401602060405180830381865afa158015612faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd39190614e6f565b6001600160a01b03161461143c5760405162461bcd60e51b81526020600482015260176024820152761b55d14dcb585cdcd95d081b9bdd081a5b881d985d5b1d604a1b6044820152606401610c6a565b6000908152600d60205260409020600101546001600160a01b031690565b6007546000906001600160a01b038381169116148061308557506001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff165b9392505050565b600260085414156130af5760405162461bcd60e51b8152600401610c6a90614dab565b600260085560155460ff16156130d75760405162461bcd60e51b8152600401610c6a90614e48565b600c60009054906101000a90046001600160a01b03166001600160a01b0316635b67d9ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561312757600080fd5b505af115801561313b573d6000803e3d6000fd5b5050506000828152600d602090815260409182902082516101008101845281546001600160a01b03808216835263ffffffff600160a01b8084048216968501879052600160c01b909304169583019590955260018301548516606083015260028301546001600160801b038082166080850152600160801b9091041660a083015260039092015493841660c082015260ff9190930416151560e0830152909150421161321e5760405162461bcd60e51b8152602060048201526012602482015271189153cb5bdc1d1a5bdb88195e1c1a5c995960721b6044820152606401610c6a565b8060e00151156132655760405162461bcd60e51b8152602060048201526012602482015271189153cb5bdc1d1a5bdb881cd95d1d1b195960721b6044820152606401610c6a565b60c08101516001600160a01b0316156132b65760405162461bcd60e51b815260206004820152601360248201527262454f2d6f7074696f6e20686173206269647360681b6044820152606401610c6a565b6132bf8261398b565b600160e08201526040518281527f4b523da7fb0ebb1e0d08d5d3a34f8eb493d2ccacfc3a6a2d2fbf011c38606b8c9060200160405180910390a150506001600855565b600c54604051632474521560e21b81526001600160a01b03909116906391d148549061334290600080516020615d14833981519152903390600401614de2565b602060405180830381865afa15801561335f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133839190614df9565b61339f5760405162461bcd60e51b8152600401610c6a90614e16565b60125481106133ad57600080fd5b60148190556040518181527f4c0aa8cbd2a45ad4d1999638fe86b622a70f20cf36cae2b0ac42bffea168066390602001610f1b565b600c54604051632474521560e21b81526001600160a01b03909116906391d148549061342290600080516020615d14833981519152903390600401614de2565b602060405180830381865afa15801561343f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134639190614df9565b61347f5760405162461bcd60e51b8152600401610c6a90614e16565b60155460ff1615158115146134c85760405162461bcd60e51b815260206004820152600f60248201526e734d502d6d757374206368616e676560881b6044820152606401610c6a565b6015805460ff19168215159081179091556040519081527f49da065b3a22e1d922a1aaa365357758c9f7c40aff11b507d1a43f9e9f10002b90602001610f1b565b600954610100900460ff16158080156135295750600954600160ff909116105b8061354a57506135383061439a565b15801561354a575060095460ff166001145b6135ad5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c6a565b6009805460ff1916600117905580156135d0576009805461ff0019166101001790555b600c80546001600160a01b038088166001600160a01b03199283168117909355600b8054918716919092161790556040805163affa881760e01b8152905163affa8817916004808201926020929091908290030181865afa158015613639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365d9190614e6f565b601180546001600160a01b03199081166001600160a01b039384161790915560078054821685841617905560108054909116918616919091179055600a8054600101905562015180601281905560326013556014556015805460ff191690558015613702576009805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b613712816143a9565b610f6f5760405162461bcd60e51b8152600401610c6a90614f87565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061376382611885565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806137a883611885565b9050806001600160a01b0316846001600160a01b031614806137cf57506137cf8185613041565b806137f35750836001600160a01b03166137e884610bce565b6001600160a01b0316145b949350505050565b826001600160a01b031661380e82611885565b6001600160a01b0316146138725760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610c6a565b6001600160a01b0382166138d45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c6a565b6138df60008261372e565b6001600160a01b0383166000908152600360205260408120805460019290613908908490614ec5565b90915550506001600160a01b0382166000908152600360205260408120805460019290613936908490614f50565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020615d3483398151915291a4610d0b8383836143c6565b600061399682611885565b90506139a360008361372e565b6001600160a01b03811660009081526003602052604081208054600192906139cc908490614ec5565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020615d34833981519152908390a46120bb816000846143c6565b613a2682826143df565b6120bb57601160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613a7a57600080fd5b505af1158015613a8e573d6000803e3d6000fd5b505060115460405163a9059cbb60e01b81526001600160a01b03909116935063a9059cbb9250613ac591508590859060040161513c565b6020604051808303816000875af1158015613ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190614df9565b6000613b16612e2b8461436a565b6001600160a01b0316846001600160a01b03161415613b3757506001613085565b60405163e7dc956b60e01b81526001600160a01b0385169063e7dc956b90613b63908590600401614a4c565b602060405180830381865afa925050508015613b9c575060408051601f3d908101601f19168201909252613b9991810190615047565b60015b613bda573d808015613bca576040519150601f19603f3d011682016040523d82523d6000602084013e613bcf565b606091505b506000915050613085565b613be7612e2b858361445d565b6001600160a01b0316856001600160a01b03161415613c0a576001915050613085565b505060009392505050565b600060125442613c259190614f50565b8263ffffffff1611613c885760405162461bcd60e51b815260206004820152602660248201527f5f6d4f57562d6578706972657320736f6f6e6572207468616e206d696e2064756044820152653930ba34b7b760d11b6064820152608401610c6a565b6001600160a01b0385166000908152600e6020908152604080832063ffffffff881684529091529020548015613d2e576000818152600d6020526040902060030154600160a01b900460ff16613d2e5760405162461bcd60e51b815260206004820152602560248201527f5f6d4f57562d70726576696f7573206f7074696f6e206d7573742062652073656044820152641d1d1b195960da1b6064820152608401610c6a565b613d3c600a80546001019055565b6000613d47600a5490565b60408051610100810182526001600160a01b038b8116825263ffffffff88811660208085019182528c83168587019081528e8516606087019081526001600160801b038e811660808901908152600060a08a0181815260c08b0182815260e08c018381528e8452600d9098529b90912099518a5497519551908a166001600160c01b031990981697909717600160a01b95891686021763ffffffff60c01b1916600160c01b979098169690960296909617885590516001880180546001600160a01b03191691881691909117905593519251928416600160801b93909416929092029290921760028501559351600390930180549151939092166001600160a81b0319909116179115159092021790559050613e638882614490565b336001600160a01b03891614613e7d57613e7d338261372e565b6001600160a01b038781166000818152600e6020908152604080832063ffffffff8c8116808652918452938290208790558151958e1686529185019390935283830152606083018490526001600160801b0388166080840152861660a0830152517f1942da09a08718d22494497e4f9610b26572dd3de279f0793d826d170c5305989181900360c00190a1979650505050505050565b600281015481546003830154600160801b9092046001600160801b0316916001600160a01b0391821691161415613f5f576002820154613f5c906001600160801b031682614ec5565b90505b80156120bb5760038201546120bb906001600160a01b031682613a1c565b60408051602880825260608281019093526000919060208201818036833701905050905060005b60148110156140bd576000613fba826013614ec5565b613fc5906008614f07565b613fd0906002615276565b613fe3906001600160a01b038716614f3c565b60f81b9050600060108260f81c613ffa9190615282565b60f81b905060008160f81c601061401191906152a4565b8360f81c61401f91906152c5565b60f81b905061402d826144aa565b85614039866002614f07565b81518110614049576140496152e8565b60200101906001600160f81b031916908160001a905350614069816144aa565b85614075866002614f07565b614080906001614f50565b81518110614090576140906152e8565b60200101906001600160f81b031916908160001a90535050505080806140b5906152fe565b915050613fa4565b5092915050565b6060816140e85750506040805180820190915260018152600360fc1b602082015290565b8160005b811561411257806140fc816152fe565b915061410b9050600a83614f3c565b91506140ec565b6000816001600160401b0381111561412c5761412c614adb565b6040519080825280601f01601f191660200182016040528015614156576020820181803683370190505b5090505b84156137f35761416b600183614ec5565b9150614178600a86615319565b614183906030614f50565b60f81b818381518110614198576141986152e8565b60200101906001600160f81b031916908160001a9053506141ba600a86614f3c565b945061415a565b816001600160a01b0316836001600160a01b0316141561421f5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610c6a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6142978484846137fb565b6142a3848484846144e0565b6120f15760405162461bcd60e51b8152600401610c6a9061532d565b60006142da6142cd83613023565b63162ff4f760e21b6145e5565b1561430657507f73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a919050565b60405162461bcd60e51b815260206004820152602e60248201527f5f756e6465726c79696e672d636c6173733a20556e737570706f72746564207560448201526d6e6465726c79696e67207479706560901b6064820152608401610c6a565b919050565b60008160405160200161437d91906148dc565b604051602081830303815290604052805190602001209050919050565b6001600160a01b03163b151590565b6000908152600260205260409020546001600160a01b0316151590565b6000908152600660205260409020805460010190555050565b6040805160008082526020820190925281906001600160a01b0385169061753090859060405161440f919061537f565b600060405180830381858888f193505050503d806000811461444d576040519150601f19603f3d011682016040523d82523d6000602084013e614452565b606091505b509095945050505050565b6000828260405160200161447292919061513c565b60405160208183030381529060405280519060200120905092915050565b6120bb828260405180602001604052806000815250614601565b6000600a60f883901c10156144d1576144c860f883901c603061539b565b60f81b92915050565b6144c860f883901c605761539b565b60006144f4846001600160a01b031661439a565b156145da57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061452b903390899088908890600401615155565b6020604051808303816000875af1925050508015614566575060408051601f3d908101601f19168201909252614563918101906153c0565b60015b6145c0573d808015614594576040519150601f19603f3d011682016040523d82523d6000602084013e614599565b606091505b5080516145b85760405162461bcd60e51b8152600401610c6a9061532d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506137f3565b506001949350505050565b60006145f083614634565b801561308557506130858383614667565b61460b83836146f0565b61461860008484846144e0565b610d0b5760405162461bcd60e51b8152600401610c6a9061532d565b6000614647826301ffc9a760e01b614667565b8015610ae65750614660826001600160e01b0319614667565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156146d9575060208210155b80156146e55750600081115b979650505050505050565b6001600160a01b0382166147465760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c6a565b61474f816143a9565b1561479b5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606401610c6a565b6001600160a01b03821660009081526003602052604081208054600192906147c4908490614f50565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020615d34833981519152908290a46120bb600083836143c6565b610936806153de83390190565b60006020828403121561483757600080fd5b5035919050565b6001600160e01b031981168114610f6f57600080fd5b60006020828403121561486657600080fd5b81356130858161483e565b60005b8381101561488c578181015183820152602001614874565b838111156120f15750506000910152565b600081518084526148b5816020860160208601614871565b601f01601f19169290920160200192915050565b602081526000613085602083018461489d565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610f6f57600080fd5b6000806040838503121561491857600080fd5b8235614923816148f0565b946020939093013593505050565b63ffffffff81168114610f6f57600080fd5b6000806040838503121561495657600080fd5b8235614961816148f0565b9150602083013561497181614931565b809150509250929050565b60008060006060848603121561499157600080fd5b833561499c816148f0565b925060208401356149ac816148f0565b929592945050506040919091013590565b80356001600160801b038116811461436557600080fd5b60008060008060008587036101008112156149ee57600080fd5b86356149f9816148f0565b95506020870135614a0981614931565b9450614a17604088016149bd565b93506060870135614a2781614931565b92506080607f1982011215614a3b57600080fd5b506080860190509295509295909350565b63ffffffff91909116815260200190565b600060208284031215614a6f57600080fd5b8135613085816148f0565b8015158114610f6f57600080fd5b60008060408385031215614a9b57600080fd5b82359150602083013561497181614a7a565b60008060408385031215614ac057600080fd5b8235614acb816148f0565b9150602083013561497181614a7a565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614b1957614b19614adb565b604052919050565b60006001600160401b03821115614b3a57614b3a614adb565b50601f01601f191660200190565b60008060008060808587031215614b5e57600080fd5b8435614b69816148f0565b93506020850135614b79816148f0565b92506040850135915060608501356001600160401b03811115614b9b57600080fd5b8501601f81018713614bac57600080fd5b8035614bbf614bba82614b21565b614af1565b818152886020838501011115614bd457600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060008060808587031215614c0c57600080fd5b8435614c17816148f0565b93506020850135614c2781614931565b9250614c35604086016149bd565b91506060850135614c4581614931565b939692955090935050565b60008060008060808587031215614c6657600080fd5b8435614c71816148f0565b935060208501359250614c35604086016149bd565b60008060408385031215614c9957600080fd5b8235614ca4816148f0565b91506020830135614971816148f0565b600060208284031215614cc657600080fd5b813561308581614a7a565b60008060008060808587031215614ce757600080fd5b8435614cf2816148f0565b93506020850135614d02816148f0565b92506040850135614d12816148f0565b91506060850135614c45816148f0565b600181811c90821680614d3657607f821691505b60208210811415614d5757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b9182526001600160a01b0316602082015260400190565b600060208284031215614e0b57600080fd5b815161308581614a7a565b60208082526018908201527731b0b63632b9103732b2b2399026a0a925a2aa2fa1a7a72360411b604082015260600190565b6020808252600d908201526c1b585c9ad95d081c185d5cd959609a1b604082015260600190565b600060208284031215614e8157600080fd5b8151613085816148f0565b600060208284031215614e9e57600080fd5b813560ff8116811461308557600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614ed757614ed7614eaf565b500390565b60006001600160801b03828116848216808303821115614efe57614efe614eaf565b01949350505050565b6000816000190483118215151615614f2157614f21614eaf565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614f4b57614f4b614f26565b500490565b60008219821115614f6357614f63614eaf565b500190565b63ffffffff9290921682526001600160a01b0316602082015260400190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60006001600160801b0383811690831681811015614fd957614fd9614eaf565b039392505050565b7f746f6b656e2e686f6f6b2e78797a2f6f7074696f6e2d636f6e74726163742f0081526000835161501981601f850160208801614871565b8083019050602f60f81b601f820152835161503b816020840160208801614871565b01602001949350505050565b60006020828403121561505957600080fd5b5051919050565b60006020828403121561507257600080fd5b81516001600160401b0381111561508857600080fd5b8201601f8101841361509957600080fd5b80516150a7614bba82614b21565b8181528560208385010111156150bc57600080fd5b6150cd826020830160208601614871565b95945050505050565b600080604083850312156150e957600080fd5b82516150f481614a7a565b6020840151909250614971816148f0565b60006020828403121561511757600080fd5b815161308581614931565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906151889083018461489d565b9695505050505050565b600181815b808511156151cd5781600019048211156151b3576151b3614eaf565b808516156151c057918102915b93841c9390800290615197565b509250929050565b6000826151e457506001610ae6565b816151f157506000610ae6565b816001811461520757600281146152115761522d565b6001915050610ae6565b60ff84111561522257615222614eaf565b50506001821b610ae6565b5060208310610133831016604e8410600b8410161715615250575081810a610ae6565b61525a8383615192565b806000190482111561526e5761526e614eaf565b029392505050565b600061308583836151d5565b600060ff83168061529557615295614f26565b8060ff84160491505092915050565b600060ff821660ff84168160ff048111821515161561526e5761526e614eaf565b600060ff821660ff8416808210156152df576152df614eaf565b90039392505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561531257615312614eaf565b5060010190565b60008261532857615328614f26565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008251615391818460208701614871565b9190910192915050565b600060ff821660ff84168060ff038211156153b8576153b8614eaf565b019392505050565b6000602082840312156153d257600080fd5b81516130858161483e56fe608060405234801561001057600080fd5b50610916806100206000396000f3fe6080604052600436106100225760003560e01c80637fe8e72c1461003957610031565b366100315761002f610059565b005b61002f610059565b34801561004557600080fd5b5061002f61005436600461068c565b61006b565b61006961006461016f565b6101f6565b565b6000610077600161021a565b905080156100af57600161009f61009c8260008051602061087a83398151915261074f565b90565b805460ff19169115159190911790555b6100da60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5161074f565b60008051602061085a833981519152146100f6576100f6610774565b610102838360006102ee565b801561016a57600061012661009c600160008051602061087a83398151915261074f565b805460ff1916911515919091179055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600061019060008051602061085a833981519152546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f1919061078a565b905090565b3660008037600080366000845af43d6000803e808015610215573d6000f35b3d6000fd5b600061023861009c600160008051602061087a83398151915261074f565b5460ff1615610287578160ff16600114801561025a5750610258306103ae565b155b61027f5760405162461bcd60e51b8152600401610276906107a7565b60405180910390fd5b506000919050565b60ff82166102a761009c600160008051602061089a83398151915261074f565b54106102c55760405162461bcd60e51b8152600401610276906107a7565b60ff82166102e561009c600160008051602061089a83398151915261074f565b55506001919050565b6102f7836103bd565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806103385750805b1561016a576103a8836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a2919061078a565b8361051e565b50505050565b6001600160a01b03163b151590565b6103c6816103ae565b6104205760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b6064820152608401610276565b61048a816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610485919061078a565b6103ae565b6104ef5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b6064820152608401610276565b60008051602061085a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b606061054383836040518060600160405280602781526020016108ba6027913961054a565b9392505050565b6060610555846103ae565b6105b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610276565b600080856001600160a01b0316856040516105cb919061080a565b600060405180830381855af49150503d8060008114610606576040519150601f19603f3d011682016040523d82523d6000602084013e61060b565b606091505b509150915061061b828286610625565b9695505050505050565b60608315610634575081610543565b8251156106445782518084602001fd5b8160405162461bcd60e51b81526004016102769190610826565b6001600160a01b038116811461067357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561069f57600080fd5b82356106aa8161065e565b915060208301356001600160401b03808211156106c657600080fd5b818501915085601f8301126106da57600080fd5b8135818111156106ec576106ec610676565b604051601f8201601f19908116603f0116810190838211818310171561071457610714610676565b8160405282815288602084870101111561072d57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008282101561076f57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561079c57600080fd5b81516105438161065e565b6020808252601f908201527f636f6e747261637420697320616c726561647920696e697469616c697a656400604082015260600190565b60005b838110156107f95781810151838201526020016107e1565b838111156103a85750506000910152565b6000825161081c8184602087016107de565b9190910192915050565b60208152600082518060208401526108458160408501602087016107de565b601f01601f1916919091016040019291505056fea3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50ba701f97ffd09be973ab0487da5ef9921c2bd0aad55202b3c0b41745a8ecda29021cb2f443fd62c4cb6b5d341f5eb8cd045222fc4183f8753d3725ac19741805416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201902b2ab44cdf0715c6e3d610362589ccda73f8de411b662f588e9f6dea04ad464736f6c634300080a00338de11a8d956993287a5b6a74c069984045abc1b621d651081c4c77c05c3cb7afddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202506456192bf8a8b8ab8155cbb2ea0f22bd640e7b1875ef07165fb4b8dfe345e64736f6c634300080a0033",
  "libraries": {
    "TokenURI": "0xf28B0c5Ef44dd4b3e933ac0d2E8F9b4373Ce6a44"
  },
  "devdoc": {
    "author": "Jake Nyquist-j@hook.xyz",
    "custom:coauthor": "Regynald Augustin-regy@hook.xyz",
    "details": "In the context of a single call option, the role of the writer is non-transferrable.This contract is intended to be an implementation referenced by a proxy",
    "events": {
      "MarketPauseUpdated(bool)": {
        "details": "Emitted when the market is paused or unpaused",
        "params": {
          "paused": "true if paused false otherwise"
        }
      },
      "MinBidIncrementUpdated(uint256)": {
        "details": "Emitted when the bid increment is updated",
        "params": {
          "bidIncrementBips": "the new bid increment amount in bips"
        }
      },
      "MinOptionDurationUpdated(uint256)": {
        "details": "emitted when the minimum duration for an option is changed",
        "params": {
          "optionDuration": "new minimum length of an option in seconds."
        }
      },
      "SettlementAuctionStartOffsetUpdated(uint256)": {
        "details": "emitted when the settlement auction start offset is updated",
        "params": {
          "startOffset": "new number of seconds from expiration when the start offset begins"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "bid(uint256)": {
        "details": "See {IHookCoveredCall-bid}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "burnExpiredOption(uint256)": {
        "details": "See {IHookCoveredCall-burnExpiredOption}."
      },
      "claimOptionProceeds(uint256)": {
        "details": "See {IHookCoveredCall-claimOptionProceeds}"
      },
      "contractUri(uint256)": {
        "details": "this is the OpenSea compatible collection - level metadata URI."
      },
      "currentBid(uint256)": {
        "details": "See {IHookCoveredCall-currentBid}."
      },
      "currentBidder(uint256)": {
        "details": "See {IHookCoveredCall-currentBidder}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getAssetId(uint256)": {
        "details": "see {IHookCoveredCall-getAssetId}."
      },
      "getExpiration(uint256)": {
        "details": "see {IHookCoveredCall-getExpiration}."
      },
      "getOptionIdForAsset(address,uint32)": {
        "details": "see {IHookCoveredCall-getOptionIdForAsset}"
      },
      "getStrikePrice(uint256)": {
        "details": "see {IHookCoveredCall-getStrikePrice}."
      },
      "getTransferCount(uint256)": {
        "details": "this count can be used by overbooks to invalidate orders after a token has been transferred, preventing stale order execution by malicious parties"
      },
      "getVaultAddress(uint256)": {
        "details": "see {IHookCoveredCall-getVaultAddress}."
      },
      "initialize(address,address,address,address)": {
        "details": "Because the deployed contract is proxied, arguments unique to each deployment must be passed in an individual initializer. This function is like a constructor.",
        "params": {
          "hookVaultFactory": "the address of the ERC-721 vault registry",
          "nftContract": "the address for the ERC-721 contract that can serve as underlying instruments",
          "preApprovedMarketplace": "the address of the contract which will automatically approved to transfer option ERC721s owned by any account when they're minted",
          "protocol": "the address of the Hook protocol (which contains configurations)"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}. this extension ensures that any operator contract located at {_approvedMarketpace} is considered approved internally in the ERC721 contract"
      },
      "mintWithEntitledVault(address,uint32,uint128,uint32)": {
        "details": "See {IHookCoveredCall-mintWithEntitledVault}."
      },
      "mintWithErc721(address,uint256,uint128,uint32)": {
        "details": "See {IHookCoveredCall-mintWithErc721}."
      },
      "mintWithVault(address,uint32,uint128,uint32,(uint8,uint8,bytes32,bytes32))": {
        "details": "See {IHookCoveredCall-mintWithVault}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "reclaimAsset(uint256,bool)": {
        "details": "See {IHookCoveredCall-reclaimAsset}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBidIncrement(uint256)": {
        "details": "set the minimum overage, in bips, for a new bid compared to the current bid.",
        "params": {
          "newBidIncrement": "the minimum bid increment in basis points (1/100th of 1%)"
        }
      },
      "setMarketPaused(bool)": {
        "details": "sets a paused / unpaused state for the market corresponding to this contract",
        "params": {
          "paused": "should the market be set to paused or unpaused"
        }
      },
      "setMinOptionDuration(uint256)": {
        "details": "configures the minimum duration for a newly minted option. Options must be at least this far away in the future.",
        "params": {
          "newMinDuration": "is the minimum option duration in seconds"
        }
      },
      "setSettlementAuctionStartOffset(uint256)": {
        "details": "set the settlement auction start offset. Settlement auctions begin at this time prior to expiration.",
        "params": {
          "newSettlementStartOffset": "in seconds (i.e. block.timestamp increments)"
        }
      },
      "settleOption(uint256)": {
        "details": "See {IHookCoveredCall-settleOption}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "stateVariables": {
      "_erc721VaultFactory": {
        "details": "the address of the factory in the Hook protocol that can be used to generate ERC721 vaults"
      },
      "_optionIds": {
        "details": "holds the current ID for the last minted option. The optionId also serves as the tokenId for the associated option instrument NFT."
      },
      "_protocol": {
        "details": "the address of the deployed hook protocol contract, which has permissions and access controls"
      },
      "allowedUnderlyingAddress": {
        "details": "the address of the token contract permitted to serve as underlying assets for this instrument."
      },
      "assetOptions": {
        "details": "storage of current call active call option for a specific asset mapping(vaultAddress => mapping(assetId => CallOption))"
      },
      "marketPaused": {
        "details": "this is a flag that can be set to pause this particular instance of the call option contract. NOTE: settlement auctions are still enabled in this case because pausing the market should not change the financial situation for the holder of the options."
      },
      "minBidIncrementBips": {
        "details": "this is the minimum amount of the current bid that the new bid must exceed the current bid by in order to be considered valid. This amount is expressed in basis points (i.e. 1/100th of 1%)"
      },
      "minimumOptionDuration": {
        "details": "this is the minimum duration of an option created in this contract instance"
      },
      "optionClaims": {
        "details": "mapping to store the amount of eth in wei that may be claimed by the current ownerOf the option nft."
      },
      "optionParams": {
        "details": "storage of all existing options contracts."
      },
      "settlementAuctionStartOffset": {
        "details": "this is the amount of time before the expiration of the option that the settlement auction will begin."
      },
      "weth": {
        "details": "the address of WETH on the chain where this contract is deployed"
      }
    },
    "title": "HookCoveredCallImplV1 an implementation of covered calls on Hook",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Bid(uint256,uint256,address)": {
        "notice": "emitted when a call option settlement auction gets and accepts a new bid"
      },
      "CallCreated(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "emitted when a new call option is successfully minted with a specific underlying vault"
      },
      "CallProceedsDistributed(uint256,address,uint256)": {
        "notice": "emitted when an option owner claims their proceeds"
      },
      "CallReclaimed(uint256)": {
        "notice": "emitted when a call option is reclaimed"
      },
      "CallSettled(uint256,bool)": {
        "notice": "emitted when a call option is settled"
      },
      "ExpiredCallBurned(uint256)": {
        "notice": "emitted when a expired call option is burned"
      }
    },
    "kind": "user",
    "methods": {
      "ALLOWLISTER_ROLE()": {
        "notice": "the allowlister is able to enable and disable projects to mint instruments"
      },
      "CALL_UPGRADER()": {
        "notice": "the call upgrader role is able to upgrade the implementation of the covered call options"
      },
      "COLLECTION_CONF()": {
        "notice": "the collection configuration role allows the actor to make changes the collection configs on the protocol contract"
      },
      "MARKET_CONF()": {
        "notice": "the market configuration role allows the actor to make changes to how the market operates"
      },
      "PAUSER_ROLE()": {
        "notice": "the pauser is able to start and pause various components of the protocol"
      },
      "VAULT_UPGRADER()": {
        "notice": "the vault upgrader role is able to upgrade the implementation for all vaults"
      },
      "constructor": {
        "notice": "--- Constructor"
      },
      "getTransferCount(uint256)": {
        "notice": "the number of times the token has been transferred"
      },
      "initialize(address,address,address,address)": {
        "notice": "Initializes the specific instance of the instrument contract."
      }
    },
    "notice": "See {IHookCoveredCall}.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1220,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1222,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1226,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1230,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1234,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1240,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 10337,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_transfers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Counter)2622_storage)"
      },
      {
        "astId": 10352,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_preApprovedMarketplace",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1165,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 902,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "9",
        "type": "t_uint8"
      },
      {
        "astId": 905,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 3750,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_optionIds",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)2622_storage"
      },
      {
        "astId": 3754,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_erc721VaultFactory",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IHookERC721VaultFactory)7905"
      },
      {
        "astId": 3758,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "_protocol",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IHookProtocol)7944"
      },
      {
        "astId": 3764,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "optionParams",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(CallOption)3746_storage)"
      },
      {
        "astId": 3772,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "assetOptions",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_contract(IHookVault)8117,t_mapping(t_uint32,t_uint256))"
      },
      {
        "astId": 3777,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "optionClaims",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3780,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "allowedUnderlyingAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 3783,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "weth",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 3786,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "minimumOptionDuration",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3789,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "minBidIncrementBips",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3792,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "settlementAuctionStartOffset",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3795,
        "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
        "label": "marketPaused",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHookERC721VaultFactory)7905": {
        "encoding": "inplace",
        "label": "contract IHookERC721VaultFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IHookProtocol)7944": {
        "encoding": "inplace",
        "label": "contract IHookProtocol",
        "numberOfBytes": "20"
      },
      "t_contract(IHookVault)8117": {
        "encoding": "inplace",
        "label": "contract IHookVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IHookVault)8117,t_mapping(t_uint32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IHookVault)8117",
        "label": "mapping(contract IHookVault => mapping(uint32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint256)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(CallOption)3746_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HookCoveredCallImplV1.CallOption)",
        "numberOfBytes": "32",
        "value": "t_struct(CallOption)3746_storage"
      },
      "t_mapping(t_uint256,t_struct(Counter)2622_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)2622_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CallOption)3746_storage": {
        "encoding": "inplace",
        "label": "struct HookCoveredCallImplV1.CallOption",
        "members": [
          {
            "astId": 3731,
            "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
            "label": "writer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3733,
            "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
            "label": "expiration",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3735,
            "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
            "label": "assetId",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3737,
            "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
            "label": "vaultAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3739,
            "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
            "label": "strike",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 3741,
            "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
            "label": "bid",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 3743,
            "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
            "label": "highBidder",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3745,
            "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
            "label": "settled",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Counter)2622_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2621,
            "contract": "src/HookCoveredCallImplV1.sol:HookCoveredCallImplV1",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}