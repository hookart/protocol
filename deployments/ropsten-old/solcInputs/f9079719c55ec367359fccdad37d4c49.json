{
  "language": "Solidity",
  "sources": {
    "src/HookBeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol) (MODIFIED)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * This is an extension of the OpenZeppelin beacon proxy, however differs in that it is initializeable, which means\n * it is usable with Create2.\n */\ncontract HookBeaconProxy is Proxy, ERC1967Upgrade {\n  /// @dev  The constructor is empty in this case because the proxy is initializeable\n  constructor() {}\n\n  /**\n   * @dev Initializes the proxy with `beacon`.\n   *\n   * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n   * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n   * constructor.\n   *\n   * Requirements:\n   *\n   * - `beacon` must be a contract with the interface {IBeacon}.\n   */\n\n  function initializeBeacon(address beacon, bytes memory data) public {\n    assert(\n      _BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1)\n    );\n    _upgradeBeaconToAndCall(beacon, data, false);\n  }\n\n  /**\n   * @dev Returns the current implementation address of the associated beacon.\n   */\n  function _implementation() internal view virtual override returns (address) {\n    return IBeacon(_getBeacon()).implementation();\n  }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "src/HookERC721VaultFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\n\nimport \"./HookBeaconProxy.sol\";\n\nimport \"./interfaces/IHookERC721VaultFactory.sol\";\nimport \"./interfaces/IHookERC721Vault.sol\";\nimport \"./interfaces/IHookProtocol.sol\";\nimport \"./interfaces/IInitializeableBeacon.sol\";\n\nimport \"./mixin/PermissionConstants.sol\";\n\nimport \"./lib/BeaconSalts.sol\";\n\n/// @dev The factory itself is non-upgradeable; however, each vault is upgradeable (i.e. all vaults)\n/// created by this factory can be upgraded at one time via the beacon pattern.\ncontract HookERC721VaultFactory is\n  IHookERC721VaultFactory,\n  PermissionConstants\n{\n  /// @notice Registry of all of the active vaults within the protocol, allowing users to find vaults by\n  /// project address and tokenId;\n  /// @dev From this view, we do not know if a vault is empty or full\n  mapping(address => mapping(uint256 => IHookERC721Vault))\n    public\n    override getVault;\n\n  /// @notice Registry of all of the active multi-vaults within the protocol\n  mapping(address => IHookERC721Vault) public override getMultiVault;\n\n  address private _hookProtocol;\n  address private _beacon;\n  address private _multiBeacon;\n\n  constructor(\n    address hookProtocolAddress,\n    address beaconAddress,\n    address multiBeaconAddress\n  ) {\n    _hookProtocol = hookProtocolAddress;\n    _beacon = beaconAddress;\n    _multiBeacon = multiBeaconAddress;\n  }\n\n  /// @notice create a new vault that can support multiple ERC-721s within the same\n  /// instance\n  function makeMultiVault(address nftAddress)\n    external\n    returns (IHookERC721Vault vault)\n  {\n    require(\n      IHookProtocol(_hookProtocol).hasRole(ALLOWLISTER_ROLE, msg.sender) ||\n        IHookProtocol(_hookProtocol).hasRole(ALLOWLISTER_ROLE, address(0)),\n      \"makeMultiVault -- Only accounts with the ALLOWLISTER role can make new multiVaults\"\n    );\n\n    require(\n      getMultiVault[nftAddress] == IHookERC721Vault(address(0)),\n      \"makeMultiVault -- vault cannot already exist\"\n    );\n\n    IInitializeableBeacon bp = IInitializeableBeacon(\n      Create2.deploy(\n        0,\n        BeaconSalts.multiVaultSalt(nftAddress),\n        type(HookBeaconProxy).creationCode\n      )\n    );\n\n    bp.initializeBeacon(\n      _multiBeacon,\n      /// This is the ABI encoded initializer on the IHookERC721Vault.sol\n      abi.encodeWithSignature(\n        \"initialize(address,address)\",\n        nftAddress,\n        _hookProtocol\n      )\n    );\n\n    vault = IHookERC721Vault(address(bp));\n    getMultiVault[nftAddress] = vault;\n    emit ERC721MultiVaultCreated(nftAddress, address(bp));\n  }\n\n  /// @notice make a new vault that can contain a single asset only\n  function makeSoloVault(address nftAddress, uint256 tokenId)\n    public\n    returns (IHookERC721Vault vault)\n  {\n    require(\n      getVault[nftAddress][tokenId] == IHookERC721Vault(address(0)),\n      \"makeVault -- a vault cannot already exist\"\n    );\n\n    IInitializeableBeacon bp = IInitializeableBeacon(\n      Create2.deploy(\n        0,\n        BeaconSalts.soloVaultSalt(nftAddress, tokenId),\n        type(HookBeaconProxy).creationCode\n      )\n    );\n\n    bp.initializeBeacon(\n      _beacon,\n      /// This is the ABI encoded initializer on the IHookERC721MultiVault.sol\n      abi.encodeWithSignature(\n        \"initialize(address,uint256,address)\",\n        nftAddress,\n        tokenId,\n        _hookProtocol\n      )\n    );\n    vault = IHookERC721Vault(address(bp));\n    getVault[nftAddress][tokenId] = vault;\n\n    emit ERC721VaultCreated(nftAddress, tokenId, address(vault));\n  }\n\n  /// @notice creates a vault for a specific tokenId. If there\n  /// is a multi-vault in existence which supports that address\n  /// the address for that vault is returned as a new one\n  /// does not need to be made.\n  function findOrCreateVault(address nftAddress, uint256 tokenId)\n    external\n    returns (IHookERC721Vault vault)\n  {\n    if (getMultiVault[nftAddress] != IHookERC721Vault(address(0))) {\n      return getMultiVault[nftAddress];\n    }\n\n    if (getVault[nftAddress][tokenId] != IHookERC721Vault(address(0))) {\n      return getVault[nftAddress][tokenId];\n    }\n\n    return makeSoloVault(nftAddress, tokenId);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address) {\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\n        return address(uint160(uint256(_data)));\n    }\n}\n"
    },
    "src/interfaces/IHookERC721VaultFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"./IHookERC721Vault.sol\";\n\n/// @title HookERC721Factory -- factory for instances of the hook vault\n/// @author Jake Nyquist -- j@hook.xyz\n/// @notice The Factory creates a specific vault for ERC721s.\ninterface IHookERC721VaultFactory {\n  event ERC721VaultCreated(\n    address nftAddress,\n    uint256 tokenId,\n    address vaultAddress\n  );\n\n  event ERC721MultiVaultCreated(address nftAddress, address vaultAddress);\n\n  function getVault(address nftAddress, uint256 tokenId)\n    external\n    view\n    returns (IHookERC721Vault vault);\n\n  function getMultiVault(address nftAddress)\n    external\n    view\n    returns (IHookERC721Vault vault);\n\n  function makeMultiVault(address nftAddress)\n    external\n    returns (IHookERC721Vault vault);\n\n  function findOrCreateVault(address nftAddress, uint256 tokenId)\n    external\n    returns (IHookERC721Vault vault);\n}\n"
    },
    "src/interfaces/IHookERC721Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"./IHookVault.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\n/// @notice the IHookERC721 vault is an extension of the standard IHookVault\n/// specifically designed to hold and receive ERC721 Tokens.\n///\n/// SEND TRANSACTION -\n///     (1) owners are able to forward transactions to this vault to other wallets\n///     (2) calls to the ERC-721 address are blocked to prevent approvals from being set on the\n///         NFT while in escrow, which could allow for theft\n///     (3) At the end of each transaction, the ownerOf the vaulted token must still be the vault\n///\n/// FLASH LOAN -\n///     (1) beneficial owners are able to borrow the vaulted asset for a single function call\n///     (2) to borrow the asset, they must implement and deploy a {IERC721FlashLoanReceiver}\n///         contract, and then call the flashLoan method.\n///     (3) At the end of the flashLoan, we ensure the asset is still owned by the vault.\ninterface IHookERC721Vault is IHookVault, IERC721Receiver {\n  /// @notice emitted after an asset is flash loaned by its beneficial owner.\n  /// @dev only one asset can be flash loaned at a time, and that asset is\n  /// denoted by the tokenId emitted.\n  event AssetFlashLoaned(address owner, uint256 tokenId, address flashLoanImpl);\n\n  /// @notice the tokenID of the underlying ERC721 token;\n  function assetTokenId(uint32 assetId) external view returns (uint256);\n\n  /// @notice flashLoans the vaulted asset to another contract for use and return to the vault. Only the owner\n  /// may perform the flashloan\n  /// @dev the flashloan receiver can perform arbitrary logic, but must approve the vault as an operator\n  /// before returning.\n  /// @param receiverAddress the contract which implements the {IERC721FlashLoanReceiver} interface to utilize the\n  /// asset while it is loaned out\n  /// @param params calldata params to forward to the receiver\n  function flashLoan(\n    uint32 assetId,\n    address receiverAddress,\n    bytes calldata params\n  ) external;\n}\n"
    },
    "src/interfaces/IHookProtocol.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\n\n/// @title HookProtocol configuration and access control repository\n/// @author Jake Nyquist -- j@hook.xyz\n/// @notice This contract contains the addresses of currently deployed Hook protocol\n/// contract and contains the centralized Access Control and protocol pausing functions\ninterface IHookProtocol is IAccessControl {\n  /// @notice emitted when the protocol is paused or unpaused\n  /// @notice paused true if paused false if unpaused\n  event PausedUpdated(bool paused);\n\n  /// @notice the address of the deployed CoveredCallFactory used by the protocol\n  function coveredCallContract() external view returns (address);\n\n  /// @notice the address of the deployed VaultFactory used by the protocol\n  function vaultContract() external view returns (address);\n\n  /// @notice callable function that reverts when the protocol is paused\n  function throwWhenPaused() external;\n\n  /// @notice the standard weth address on this chain\n  /// @dev these are values for popular chains:\n  /// mainnet: 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\n  /// kovan: 0xd0a1e359811322d97991e03f863a0c30c2cf029c\n  /// ropsten: 0xc778417e063141139fce010982780140aa0cd5ab\n  /// rinkeby: 0xc778417e063141139fce010982780140aa0cd5ab\n  function getWETHAddress() external view returns (address);\n\n  /// @notice get a configuration flag with a specific key for a collection\n  function getCollectionConfig(address collectionAddress, bytes32 conf)\n    external\n    view\n    returns (bool value);\n}\n"
    },
    "src/interfaces/IInitializeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\n/// @title Interface for a beacon with an initializer function\n/// @author Jake Nyquist -- j@hook.xyz\n/// @dev the Hook Beacons conform to this interface, and can be called\n/// with this initializer in order to start a beacon\ninterface IInitializeableBeacon {\n  function initializeBeacon(address beacon, bytes memory data) external;\n}\n"
    },
    "src/mixin/PermissionConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\n/// @notice roles on the hook protocol that can be read by other contract\n/// @dev new roles here should be initialized in the constructor of the protocol\nabstract contract PermissionConstants {\n  /// ----- ROLES --------\n  /// @notice The Hook protocol admin can make any changes to the protocol\n  bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n  /// @notice the allowlister is able to enable and disable projects to mint instruments\n  bytes32 public constant ALLOWLISTER_ROLE = keccak256(\"ALLOWLISTER_ROLE\");\n\n  /// @notice the pauser is able to start and pause various components of the protocol\n  bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n  /// @notice the vault upgrader role is able to upgrade the implementation for all vaults\n  bytes32 public constant VAULT_UPGRADER = keccak256(\"VAULT_UPGRADER\");\n\n  /// @notice the call upgrader role is able to upgrade the implementation of the covered call options\n  bytes32 public constant CALL_UPGRADER = keccak256(\"CALL_UPGRADER\");\n\n  /// @notice the market configuration role allows the actor to make changes to how the market operates\n  bytes32 public constant MARKET_CONF = keccak256(\"MARKET_CONF\");\n\n  /// @notice the collection configuration role allows the actor to make changes the collection\n  /// configs on the protocol contract\n  bytes32 public constant COLLECTION_CONF = keccak256(\"COLLECTION_CONF\");\n}\n"
    },
    "src/lib/BeaconSalts.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"../HookBeaconProxy.sol\";\n\nlibrary BeaconSalts {\n  // keep functions internal to prevent the need for library linking\n  // and to reduce gas costs\n  bytes32 internal constant ByteCodeHash =\n    keccak256(type(HookBeaconProxy).creationCode);\n\n  function soloVaultSalt(address nftAddress, uint256 tokenId)\n    internal\n    pure\n    returns (bytes32)\n  {\n    return keccak256(abi.encode(nftAddress, tokenId));\n  }\n\n  function multiVaultSalt(address nftAddress) internal pure returns (bytes32) {\n    return keccak256(abi.encode(nftAddress));\n  }\n}\n"
    },
    "src/interfaces/IHookVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"../lib/Entitlements.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/// @title Generic Hook Vault -- a vault designed to contain a single asset to be used as escrow.\n/// @author Jake Nyquist -- j@hook.xyz\n/// @notice The Vault holds an asset on behalf of the owner. The owner is able to post this\n/// asset as collateral to other protocols by signing a message, called an \"entitlement\", that gives\n/// a specific account the ability to change the owner. While the asset is held within the vault,\n/// any account set as the beneficial owner is able to make external contract calls to benefit from\n/// the utility of the asset. Specifically, that means this structure should not be used in order to\n/// hold assets in escrow away from owner to benefit an owner for a short period of time.\n///\n/// The vault can work with multiple assets via the assetId, where the asset or set of assets covered by\n/// each segment is granted an individual id.\n///\n/// ENTITLEMENTS -\n///     (1) only one entitlement can be placed at a time.\n///     (2) entitlements must expire, but can also be cleared by the entitled party\n///     (3) if an entitlement expires, the current beneficial owner gains immediate sole control over the\n///        asset\n///     (4) the entitled entity can modify the beneficial owner of the asset, but cannot withdrawal.\n///     (5) the beneficial owner cannot modify the beneficial owner while an entitlement is in place\n///\ninterface IHookVault is IERC165 {\n  /// @notice emitted when an entitlement is placed on an asset\n  event EntitlementImposed(\n    uint32 assetId,\n    address entitledAccount,\n    uint32 expiry,\n    address beneficialOwner\n  );\n\n  /// @notice emitted when an entitlement is cleared from an asset\n  event EntitlementCleared(uint256 assetId, address beneficialOwner);\n\n  /// @notice emitted when the beneficial owner of an asset changes\n  /// @dev it is not required that this event is emitted when an entitlement is\n  /// imposed that also modifies the beneficial owner.\n  event BeneficialOwnerSet(\n    uint32 assetId,\n    address beneficialOwner,\n    address setBy\n  );\n\n  /// @notice emitted when an asset is added into the vault\n  event AssetReceived(\n    address owner,\n    address sender,\n    address contractAddress,\n    uint32 assetId\n  );\n\n  /// @notice emitted when an asset is withdrawn from the vault\n  event AssetWithdrawn(uint32 assetId, address to, address beneficialOwner);\n\n  /// @notice Withdrawal an unencumbered asset from this vault\n  /// @param assetId the asset to remove from the vault\n  function withdrawalAsset(uint32 assetId) external;\n\n  /// @notice setBeneficialOwner updates the current address that can claim the asset when it is free of entitlements.\n  /// @param assetId the id of the subject asset to impose the entitlement\n  /// @param newBeneficialOwner the account of the person who is able to withdrawal when there are no entitlements.\n  function setBeneficialOwner(uint32 assetId, address newBeneficialOwner)\n    external;\n\n  /// @notice Add an entitlement claim to the asset held within the contract\n  /// @param operator the operator to entitle\n  /// @param expiry the duration of the entitlement\n  /// @param assetId the id of the asset within the vault\n  /// @param v sig v\n  /// @param r sig r\n  /// @param s sig s\n  function imposeEntitlement(\n    address operator,\n    uint32 expiry,\n    uint32 assetId,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /// @notice Allows the beneficial owner to grant an entitlement to an asset within the contract\n  /// @dev this function call is signed by the sender, so we know the entitlement is authentic\n  /// @param entitlement The entitlement to impose onto the contract\n  function grantEntitlement(Entitlements.Entitlement calldata entitlement)\n    external;\n\n  /// @notice Allows the entitled address to release their claim on the asset\n  /// @param assetId the id of the asset to clear\n  function clearEntitlement(uint32 assetId) external;\n\n  /// @notice Removes the active entitlement from a vault and returns the asset to the beneficial owner\n  /// @param receiver the intended receiver of the asset\n  /// @param assetId the Id of the asset to clear\n  function clearEntitlementAndDistribute(uint32 assetId, address receiver)\n    external;\n\n  /// @notice looks up the current beneficial owner of the underlying asset\n  function getBeneficialOwner(uint32 assetId) external view returns (address);\n\n  /// @notice checks if the asset is currently stored in the vault\n  function getHoldsAsset(uint32 assetId) external view returns (bool);\n\n  /// @notice the contract address of the vaulted asset\n  function assetAddress(uint32 assetId) external view returns (address);\n\n  /// @notice looks up the current operator of an entitlement on an asset\n  /// @param assetId the id of the underlying asset\n  function getCurrentEntitlementOperator(uint32 assetId)\n    external\n    view\n    returns (bool isActive, address operator);\n\n  /// @notice Looks up the expiration timestamp of the current entitlement\n  /// @dev returns the 0 if no entitlement is set\n  /// @return expiry the block timestamp after which the entitlement expires\n  function entitlementExpiration(uint32 assetId)\n    external\n    view\n    returns (uint32 expiry);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "src/lib/Entitlements.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"./Signatures.sol\";\n\nlibrary Entitlements {\n  uint256 private constant _ENTITLEMENT_TYPEHASH =\n    uint256(\n      keccak256(\n        abi.encodePacked(\n          \"Entitlement(\",\n          \"address beneficialOwner,\",\n          \"address operator,\",\n          \"address vaultAddress,\",\n          \"uint32 assetId,\",\n          \"uint32 expiry\",\n          \")\"\n        )\n      )\n    );\n\n  /// ---- STRUCTS -----\n  struct Entitlement {\n    /// @notice the beneficial owner address this entitlement applies to. This address will also be the signer.\n    address beneficialOwner;\n    /// @notice the operating contract that can change ownership during the entitlement period.\n    address operator;\n    /// @notice the contract address for the vault that contains the underlying assets\n    address vaultAddress;\n    /// @notice the assetId of the asset or assets within the vault\n    uint32 assetId;\n    /// @notice the block timestamp after which the asset is free of the entitlement\n    uint32 expiry;\n  }\n\n  function getEntitlementStructHash(Entitlement memory entitlement)\n    internal\n    pure\n    returns (bytes32 structHash)\n  {\n    // TODO: Hash in place to save gas.\n    return\n      keccak256(\n        abi.encode(\n          _ENTITLEMENT_TYPEHASH,\n          entitlement.beneficialOwner,\n          entitlement.operator,\n          entitlement.vaultAddress,\n          entitlement.assetId,\n          entitlement.expiry\n        )\n      );\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/lib/Signatures.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\n/// @dev A library for validating signatures from ZeroEx\nlibrary Signatures {\n  /// @dev Allowed signature types.\n  enum SignatureType {\n    EIP712\n  }\n\n  /// @dev Encoded EC signature.\n  struct Signature {\n    // How to validate the signature.\n    SignatureType signatureType;\n    // EC Signature data.\n    uint8 v;\n    // EC Signature data.\n    bytes32 r;\n    // EC Signature data.\n    bytes32 s;\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "src/HookCoveredCallImplV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\n\nimport \"./lib/Entitlements.sol\";\nimport \"./lib/BeaconSalts.sol\";\n\nimport \"./interfaces/IHookERC721VaultFactory.sol\";\nimport \"./interfaces/IHookVault.sol\";\nimport \"./interfaces/IHookCoveredCall.sol\";\nimport \"./interfaces/IHookProtocol.sol\";\nimport \"./interfaces/IHookERC721Vault.sol\";\nimport \"./interfaces/IWETH.sol\";\n\nimport \"./mixin/PermissionConstants.sol\";\nimport \"./mixin/HookInstrumentERC721.sol\";\n\n/// @title HookCoveredCallImplV1 an implementation of covered calls on Hook\n/// @author Jake Nyquist -- j@hook.xyz\n/// @notice Covered call options use this logic to\n/// @dev Explain to a developer any extra details\ncontract HookCoveredCallImplV1 is\n  IHookCoveredCall,\n  HookInstrumentERC721,\n  ReentrancyGuard,\n  Initializable,\n  PermissionConstants\n{\n  using Counters for Counters.Counter;\n\n  /// @notice The metadata for each covered call option\n  /// @param writer The address of the writer that created the call option\n  /// @param owner The address of the current owner of the underlying, updated as bidding occurs\n  /// @param vaultAddress the address of the vault holding the underlying asset\n  /// @param assetId the asset id of the underlying within the vault\n  /// @param strike The strike price to exercise the call option\n  /// @param expiration The expiration time of the call option\n  /// @param settled a flag that marks when a settlement action has taken place successfully\n  /// @param bid is the current high bid in the settlement auction\n  /// @param highBidder is the address that made the current winning bid in the settlement auction\n  struct CallOption {\n    address writer;\n    uint32 expiration;\n    uint32 assetId;\n    address vaultAddress;\n    uint128 strike;\n    uint128 bid;\n    address highBidder;\n    bool settled;\n  }\n\n  /// --- Storage\n\n  /// @dev holds the current ID for the last minted option. This is also the tokenID of the\n  // option NFT\n  Counters.Counter private _optionIds;\n\n  /// @dev the address of the factory in the Hook protocol that can be used to generate ERC721 vaults\n  IHookERC721VaultFactory private _erc721VaultFactory;\n\n  /// @dev the address of the deployed hook protocol contract, which has permissions and access controls\n  IHookProtocol private _protocol;\n\n  /// @dev storage of all existing options contracts.\n  mapping(uint256 => CallOption) public optionParams;\n\n  /// @dev the address of the token contract permitted to serve as underlying assets for this\n  /// instrument.\n  address public allowedUnderlyingAddress;\n\n  /// @dev the address of WETH on the chain where this contract is deployed\n  address public weth;\n\n  /// @dev this is the minimum duration of an option created in this contract instance\n  uint256 public minimumOptionDuration;\n\n  /// @dev this is the minimum amount of the current bid that the new bid\n  /// must exceed the current bid by in order to be considered valid.\n  /// This amount is expressed in basis points (i.e. 1/100th of 1%)\n  uint256 public minBidIncrementBips;\n\n  /// @dev this is the amount of time before the expiration of the option\n  /// that the settlement auction will begin.\n  uint256 public settlementAuctionStartOffset;\n\n  /// @dev this is a flag that can be set to pause this particular\n  /// instance of the call option contract.\n  /// NOTE: settlement auctions are still enabled in\n  /// this case because pausing the market should not change the\n  /// financial situation for the holder of the options.\n  bool public marketPaused;\n\n  /// @dev Emitted when the market is paused or unpaused\n  /// @param paused true if paused false otherwise\n  event MarketPauseUpdated(bool paused);\n\n  /// @dev Emitted when the bid increment is updated\n  /// @param bidIncrementBips the new bid increment amount in bips\n  event MinBidIncrementUpdated(uint256 bidIncrementBips);\n\n  /// @dev emitted when the settlement auction start offset is updated\n  /// @param startOffset new number of seconds from expiration when the start offset begins\n  event SettlementAuctionStartOffsetUpdated(uint256 startOffset);\n\n  /// @dev emitted when the minimum duration for an option is changed\n  /// @param optionDuration new minimum length of an option in seconds.\n  event MinOptionDurationUpdated(uint256 optionDuration);\n\n  /// --- Constructor\n  // the constructor cannot have arguments in proxied contracts.\n  constructor() HookInstrumentERC721(\"Call\") {}\n\n  /// @notice Initializes the specific instance of the instrument contract.\n  /// @dev Because the deployed contract is proxied, arguments unique to each deployment\n  /// must be passed in an individual initializer. This function is like a constructor.\n  /// @param protocol the address of the Hook protocol (which contains configurations)\n  /// @param nftContract the address for the ERC-721 contract that can serve as underlying instruments\n  /// @param hookVaultFactory the address of the ERC-721 vault registry\n  function initialize(\n    address protocol,\n    address nftContract,\n    address hookVaultFactory,\n    address preApprovedMarketplace\n  ) public initializer {\n    _protocol = IHookProtocol(protocol);\n    _erc721VaultFactory = IHookERC721VaultFactory(hookVaultFactory);\n    weth = _protocol.getWETHAddress();\n    _preApprovedMarketplace = preApprovedMarketplace;\n    allowedUnderlyingAddress = nftContract;\n\n    /// Initialize basic configuration.\n    /// Even though these are defaults, we cannot set them in the constructor because\n    /// each instance of this contract will need to have the storage initialized\n    /// to read from these values\n    minimumOptionDuration = 1 days;\n    minBidIncrementBips = 0;\n    settlementAuctionStartOffset = 1 days;\n    marketPaused = false;\n  }\n\n  /// ---- Option Writer Functions ---- //\n\n  /// @dev See {IHookCoveredCall-mintWithVault}.\n  function mintWithVault(\n    address vaultAddress,\n    uint32 assetId,\n    uint128 strikePrice,\n    uint32 expirationTime,\n    Signatures.Signature calldata signature\n  ) external whenNotPaused returns (uint256) {\n    IHookVault vault = IHookVault(vaultAddress);\n\n    require(\n      allowedUnderlyingAddress == vault.assetAddress(assetId),\n      \"mintWithVault -- token must be on the project allowlist\"\n    );\n    require(\n      vault.getHoldsAsset(assetId),\n      \"mintWithVault-- asset must be in vault\"\n    );\n    require(\n      _allowedVaultImplementation(\n        vaultAddress,\n        allowedUnderlyingAddress,\n        assetId\n      ),\n      \"mintWithVault -- can only mint with protocol vaults\"\n    );\n    // the beneficial owner is the only one able to impose entitlements, so\n    // we need to require that they've done so here.\n    address writer = vault.getBeneficialOwner(assetId);\n\n    vault.imposeEntitlement(\n      address(this),\n      expirationTime,\n      assetId,\n      signature.v,\n      signature.r,\n      signature.s\n    );\n\n    return\n      _mintOptionWithVault(writer, vault, assetId, strikePrice, expirationTime);\n  }\n\n  /// @dev See {IHookCoveredCall-mintWithEntitledVault}.\n  function mintWithEntitledVault(\n    address vaultAddress,\n    uint32 assetId,\n    uint128 strikePrice,\n    uint32 expirationTime\n  ) external whenNotPaused returns (uint256) {\n    IHookVault vault = IHookVault(vaultAddress);\n\n    require(\n      allowedUnderlyingAddress == vault.assetAddress(assetId),\n      \"mintWithVault -- token must be on the project allowlist\"\n    );\n    require(\n      vault.getHoldsAsset(assetId),\n      \"mintWithVault-- asset must be in vault\"\n    );\n    (bool active, address operator) = vault.getCurrentEntitlementOperator(\n      assetId\n    );\n    require(\n      active && operator == address(this),\n      \"mintWithVault -- call contact must be the entitled operator\"\n    );\n\n    require(\n      expirationTime == vault.entitlementExpiration(assetId),\n      \"mintWithVault -- entitlement expiration must match call expiration\"\n    );\n    require(\n      _allowedVaultImplementation(\n        vaultAddress,\n        allowedUnderlyingAddress,\n        assetId\n      ),\n      \"mintWithVault -- can only mint with protocol vaults\"\n    );\n\n    // the beneficial owner owns the asset so\n    // they should receive the option.\n    address writer = vault.getBeneficialOwner(assetId);\n\n    return\n      _mintOptionWithVault(writer, vault, assetId, strikePrice, expirationTime);\n  }\n\n  /// @dev See {IHookCoveredCall-mintWithErc721}.\n  function mintWithErc721(\n    address tokenAddress,\n    uint256 tokenId,\n    uint128 strikePrice,\n    uint32 expirationTime\n  ) external whenNotPaused returns (uint256) {\n    address tokenOwner = IERC721(tokenAddress).ownerOf(tokenId);\n    require(\n      allowedUnderlyingAddress == tokenAddress,\n      \"mintWithErc721 -- token must be on the project allowlist\"\n    );\n\n    require(\n      msg.sender == tokenOwner ||\n        IERC721(tokenAddress).isApprovedForAll(tokenOwner, msg.sender),\n      \"mintWithErc721 -- caller must be token owner or operator\"\n    );\n\n    // NOTE: we can mint the option since our contract is approved\n    // this is to ensure additionally that the msg.sender isn't a unexpected address\n    require(\n      IERC721(tokenAddress).isApprovedForAll(tokenOwner, address(this)),\n      \"mintWithErc721 -- HookCoveredCall must be operator\"\n    );\n\n    // FIND OR CREATE HOOK VAULT, SET AN ENTITLEMENT\n    IHookERC721Vault vault = _erc721VaultFactory.findOrCreateVault(\n      tokenAddress,\n      tokenId\n    );\n\n    uint32 assetId = 0;\n    if (\n      address(vault) ==\n      Create2.computeAddress(\n        BeaconSalts.multiVaultSalt(tokenAddress),\n        BeaconSalts.ByteCodeHash,\n        address(_erc721VaultFactory)\n      )\n    ) {\n      // If the vault is a multi-vault, it requires that the assetId matches the\n      // tokenId, instead of having a standard assetI of 0\n      assetId = uint32(tokenId);\n    }\n\n    uint256 optionId = _mintOptionWithVault(\n      tokenOwner,\n      IHookVault(vault),\n      assetId,\n      strikePrice,\n      expirationTime\n    );\n\n    // transfer the underlying asset into our vault, passing along the entitlement. The entitlement specified\n    // here will be accepted by the vault because we are also simultaneously tendering the asset.\n    IERC721(tokenAddress).safeTransferFrom(\n      tokenOwner,\n      address(vault),\n      tokenId,\n      abi.encode(tokenOwner, address(this), expirationTime)\n    );\n\n    // make sure that the vault actually has the asset.\n    require(\n      IERC721(tokenAddress).ownerOf(tokenId) == address(vault),\n      \"mintWithErc712 -- asset must be in vault\"\n    );\n\n    return optionId;\n  }\n\n  /// @notice internal use function to record the option and mint it\n  /// @dev the vault is completely unchecked here, so the caller must ensure the vault is created,\n  /// has a valid entitlement, and has the asset inside it\n  /// @param writer the writer of the call option, usually the current owner of the underlying asset\n  /// @param vault the address of the IHookVault which contains the underlying asset\n  /// @param assetId the id of the underlying asset\n  /// @param strikePrice the strike price for this current option, in ETH\n  /// @param expirationTime the time after which the option will be considered expired\n  function _mintOptionWithVault(\n    address writer,\n    IHookVault vault,\n    uint32 assetId,\n    uint128 strikePrice,\n    uint32 expirationTime\n  ) private returns (uint256) {\n    // NOTE: The settlement auction always occurs one day before expiration\n    require(\n      expirationTime > block.timestamp + minimumOptionDuration,\n      \"_mintOptionWithVault -- expirationTime must be more than one day in the future time\"\n    );\n\n    // generate the next optionId\n    _optionIds.increment();\n    uint256 newOptionId = _optionIds.current();\n\n    // save the option metadata\n    optionParams[newOptionId] = CallOption({\n      writer: writer,\n      vaultAddress: address(vault),\n      assetId: assetId,\n      strike: strikePrice,\n      expiration: expirationTime,\n      bid: 0,\n      highBidder: address(0),\n      settled: false\n    });\n\n    // send the option NFT to the underlying token owner.\n    _safeMint(writer, newOptionId);\n\n    // If msg.sender and tokenOwner are different accounts, approve the msg.sender\n    // msg.sendto transfer the option NFT as it already had the right to transfer the underlying NFT.\n    if (msg.sender != writer) {\n      _approve(msg.sender, newOptionId);\n    }\n\n    emit CallCreated(\n      writer,\n      address(vault),\n      assetId,\n      newOptionId,\n      strikePrice,\n      expirationTime\n    );\n\n    return newOptionId;\n  }\n\n  // --- Bidder Functions\n\n  modifier biddingEnabled(uint256 optionId) {\n    CallOption memory call = optionParams[optionId];\n    require(\n      call.expiration > block.timestamp,\n      \"biddingEnabled -- option already expired\"\n    );\n    require(\n      (call.expiration - settlementAuctionStartOffset) <= block.timestamp,\n      \"biddingEnabled -- bidding starts on last day\"\n    );\n    require(\n      !call.settled,\n      \"biddingEnabled -- the owner has already settled the call option\"\n    );\n    _;\n  }\n\n  /// @dev method to verify that a particular vault was created by the protocol's vault factory\n  /// @param vaultAddress location where the vault is deployed\n  /// @param underlyingAddress address of underlying asset\n  /// @param assetId id of the asset within the vault\n  function _allowedVaultImplementation(\n    address vaultAddress,\n    address underlyingAddress,\n    uint32 assetId\n  ) internal view returns (bool) {\n    // First check if the multiVault is the one to save a bit of gas\n    // in the case the user is optimizing for gas savings (by using MultiVault)\n    if (\n      vaultAddress ==\n      Create2.computeAddress(\n        BeaconSalts.multiVaultSalt(underlyingAddress),\n        BeaconSalts.ByteCodeHash,\n        address(_erc721VaultFactory)\n      )\n    ) {\n      return true;\n    }\n\n    try IHookERC721Vault(vaultAddress).assetTokenId(assetId) returns (\n      uint256 _tokenId\n    ) {\n      if (\n        vaultAddress ==\n        Create2.computeAddress(\n          BeaconSalts.soloVaultSalt(underlyingAddress, _tokenId),\n          BeaconSalts.ByteCodeHash,\n          address(_erc721VaultFactory)\n        )\n      ) {\n        return true;\n      }\n    } catch (bytes memory) {\n      return false;\n    }\n\n    return false;\n  }\n\n  /// @dev See {IHookCoveredCall-bid}.\n  function bid(uint256 optionId)\n    external\n    payable\n    nonReentrant\n    biddingEnabled(optionId)\n  {\n    uint128 bidAmt = uint128(msg.value);\n    CallOption storage call = optionParams[optionId];\n\n    if (msg.sender == call.writer) {\n      /// handle the case where an option writer bids on\n      /// an underlying asset that they owned. In this case, as they would be\n      /// the recipient of the spread after the auction, they are able to bid\n      /// paying only the difference between their bid and the strike.\n      bidAmt += call.strike;\n    }\n\n    require(\n      bidAmt >= call.bid + ((call.bid * minBidIncrementBips) / 10000),\n      \"bid - bid is lower than the current bid + minBidIncrementBips\"\n    );\n    require(bidAmt > call.strike, \"bid - bid is lower than the strike price\");\n\n    _returnBidToPreviousBidder(call);\n\n    // set the new bidder\n    call.bid = bidAmt;\n    call.highBidder = msg.sender;\n\n    // the new high bidder is the beneficial owner of the asset.\n    // The beneficial owner must be set here instead of with a final bid\n    // because the ability to\n    IHookVault(call.vaultAddress).setBeneficialOwner(call.assetId, msg.sender);\n\n    // emit event\n    emit Bid(optionId, bidAmt, msg.sender);\n  }\n\n  function _returnBidToPreviousBidder(CallOption storage call) internal {\n    uint256 unNormalizedHighBid = call.bid;\n    if (call.highBidder == call.writer) {\n      unNormalizedHighBid -= call.strike;\n    }\n\n    // return current bidder's money\n    _safeTransferETHWithFallback(call.highBidder, unNormalizedHighBid);\n  }\n\n  /// @dev See {IHookCoveredCall-currentBid}.\n  function currentBid(uint256 optionId) external view returns (uint128) {\n    return optionParams[optionId].bid;\n  }\n\n  /// @dev See {IHookCoveredCall-currentBidder}.\n  function currentBidder(uint256 optionId) external view returns (address) {\n    return optionParams[optionId].highBidder;\n  }\n\n  // ----- END OF OPTION FUNCTIONS ---------//\n\n  /// @dev See {IHookCoveredCall-settleOption}.\n  function settleOption(uint256 optionId, bool returnNft)\n    external\n    nonReentrant\n  {\n    CallOption storage call = optionParams[optionId];\n    require(\n      call.highBidder != address(0),\n      \"settle -- bid must be won by someone\"\n    );\n    require(\n      call.expiration < block.timestamp,\n      \"settle -- option must be expired\"\n    );\n    require(!call.settled, \"settle -- the call cannot already be settled\");\n\n    uint256 spread = call.bid - call.strike;\n\n    address optionOwner = ownerOf(optionId);\n\n    // burn nft\n    _burn(optionId);\n\n    // set settled to prevent an additional attempt to settle the option\n    optionParams[optionId].settled = true;\n\n    // If the option writer is the high bidder they don't receive the strike because they bid on the spread.\n    if (call.highBidder != call.writer) {\n      // send option writer the strike price\n      _safeTransferETHWithFallback(call.writer, call.strike);\n    }\n\n    // return send option holder their earnings\n    _safeTransferETHWithFallback(optionOwner, spread);\n\n    if (returnNft) {\n      IHookVault(call.vaultAddress).withdrawalAsset(call.assetId);\n    }\n\n    emit CallSettled(optionId);\n  }\n\n  /// @dev See {IHookCoveredCall-reclaimAsset}.\n  function reclaimAsset(uint256 optionId, bool returnNft)\n    external\n    nonReentrant\n    whenNotPaused\n  {\n    CallOption storage call = optionParams[optionId];\n    require(\n      msg.sender == call.writer,\n      \"reclaimAsset -- asset can only be reclaimed by the writer\"\n    );\n    require(\n      !call.settled,\n      \"reclaimAsset -- the option has already been settled\"\n    );\n    require(\n      call.writer == ownerOf(optionId),\n      \"reclaimAsset -- the option must be owned by the writer\"\n    );\n    require(\n      call.expiration > block.timestamp,\n      \"reclaimAsset -- the option must not be expired\"\n    );\n\n    // burn the option NFT\n    _burn(optionId);\n\n    // settle the option\n    call.settled = true;\n\n    if (call.highBidder != address(0)) {\n      // return current bidder's money\n      _safeTransferETHWithFallback(call.highBidder, call.bid);\n\n      // if we have a bid, we may have set the bidder, so make sure to revert it here.\n      IHookVault(call.vaultAddress).setBeneficialOwner(\n        call.assetId,\n        call.writer\n      );\n    }\n\n    if (returnNft) {\n      // Because the call is not expired, we should be able to reclaim the asset from the vault\n      IHookVault(call.vaultAddress).clearEntitlementAndDistribute(\n        call.assetId,\n        call.writer\n      );\n    } else {\n      IHookVault(call.vaultAddress).clearEntitlement(call.assetId);\n    }\n\n    emit CallReclaimed(optionId);\n  }\n\n  /// @dev See {IHookCoveredCall-burnExpiredOption}.\n  function burnExpiredOption(uint256 optionId) external whenNotPaused {\n    CallOption storage call = optionParams[optionId];\n\n    require(\n      block.timestamp > call.expiration,\n      \"burnExpiredOption -- the option must be expired\"\n    );\n\n    require(\n      !call.settled,\n      \"burnExpiredOption -- the option has already been settled\"\n    );\n\n    require(\n      call.highBidder == address(0),\n      \"burnExpiredOption -- the option must not have bids\"\n    );\n\n    // burn the option NFT\n    _burn(optionId);\n\n    // settle the option\n    call.settled = true;\n\n    emit ExpiredCallBurned(optionId);\n  }\n\n  //// ---- Administrative Fns.\n\n  // forward to protocol pauseability\n  modifier whenNotPaused() {\n    require(!marketPaused, \"whenNotPaused -- market is paused\");\n    _protocol.throwWhenPaused();\n    _;\n  }\n\n  modifier onlyMarketController() {\n    require(\n      _protocol.hasRole(MARKET_CONF, msg.sender),\n      \"onlyMarketController -- caller does not have the MARKET_CONF protocol role\"\n    );\n    _;\n  }\n\n  /// @dev configures the minimum duration for a newly minted option. Options must be at\n  /// least this far away in the future.\n  /// @param newMinDuration is the minimum option duration in seconds\n  function setMinOptionDuration(uint256 newMinDuration)\n    public\n    onlyMarketController\n  {\n    minimumOptionDuration = newMinDuration;\n    emit MinOptionDurationUpdated(newMinDuration);\n  }\n\n  /// @dev set the minimum overage, in bips, for a new bid compared to the current bid.\n  /// @param newBidIncrement the minimum bid increment in basis points (1/100th of 1%)\n  function setBidIncrement(uint256 newBidIncrement)\n    public\n    onlyMarketController\n  {\n    minBidIncrementBips = newBidIncrement;\n    emit MinBidIncrementUpdated(newBidIncrement);\n  }\n\n  /// @dev set the settlement auction start offset. Settlement auctions begin at this time prior to expiration.\n  /// @param newSettlementStartOffset in seconds (i.e. block.timestamp increments)\n  function setSettlementAuctionStartOffset(uint256 newSettlementStartOffset)\n    public\n    onlyMarketController\n  {\n    require(\n      newSettlementStartOffset < minimumOptionDuration,\n      \"the settlement auctions cannot start sooner than an option expired\"\n    );\n    settlementAuctionStartOffset = newSettlementStartOffset;\n    emit SettlementAuctionStartOffsetUpdated(newSettlementStartOffset);\n  }\n\n  /// @dev sets a paused / unpaused state for the market corresponding to this contract\n  /// @param paused should the market be set to paused or unpaused\n  function setMarketPaused(bool paused) public onlyMarketController {\n    marketPaused = paused;\n    emit MarketPauseUpdated(paused);\n  }\n\n  //// ------------------------- NFT RELATED FUNCTIONS ------------------------------- ////\n  //// These functions are overrides needed by the HookInstrumentNFT library in order   ////\n  //// to generate the NFT view for the project.                                       ////\n\n  function getVaultAddress(uint256 optionId)\n    public\n    view\n    override\n    returns (address)\n  {\n    return optionParams[optionId].vaultAddress;\n  }\n\n  function getAssetId(uint256 optionId) public view override returns (uint32) {\n    return optionParams[optionId].assetId;\n  }\n\n  function getStrikePrice(uint256 optionId)\n    public\n    view\n    override\n    returns (uint256)\n  {\n    return optionParams[optionId].strike;\n  }\n\n  function getExpiration(uint256 optionId)\n    public\n    view\n    override\n    returns (uint256)\n  {\n    return optionParams[optionId].expiration;\n  }\n\n  //// ----------------------------- ETH TRANSFER UTILITIES --------------------------- ////\n\n  /// @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\n  /// @dev this transfer failure could occur if the transferee is a malicious contract\n  /// so limiting the gas and persisting on fail helps prevent the impact of these calls.\n  function _safeTransferETHWithFallback(address to, uint256 amount) internal {\n    if (!_safeTransferETH(to, amount)) {\n      IWETH(weth).deposit{value: amount}();\n      IWETH(weth).transfer(to, amount);\n    }\n  }\n\n  /// @notice Transfer ETH and return the success status.\n  /// @dev This function only forwards 30,000 gas to the callee.\n  function _safeTransferETH(address to, uint256 value) internal returns (bool) {\n    (bool success, ) = to.call{value: value, gas: 30_000}(new bytes(0));\n    return success;\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !Address.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "src/interfaces/IHookCoveredCall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nimport \"../lib/Signatures.sol\";\n\n/// @title A covered call instrument\n/// @author Jake Nyquist -- j@hook.xyz\n///\n/// @notice This contract implements a \"Covered Call Option\". A call option gives the holder the right, but not\n/// the obligation to purchase an asset at a fixed time in the future (the expiry) for a fixed price (the strike).\n/// The call option implementation here is similar to a \"european\" call option because the asset can\n/// only be purchased at the expiration. The call option is \"covered\"  because the underlying\n/// asset, (in this case a NFT), must be held in escrow for the entire duration of the option. In the context\n/// of a single call option from this implementation contract, the role of the writer is non-transferrable.\n///\n/// There are three phases to the call option:\n///\n/// (1) WRITING:\n/// The owner of the NFT can mint an option by calling the \"mint\" function using the parameters of the subject ERC-721;\n/// specifying additionally their preferred strike price and expiration. An \"instrument nft\" is minted to the writer's\n/// address, where the holder of this ERC-721 will receive the economic benefit of holding the option.\n///\n/// (2) SALE:\n/// The sale occurs outside of the context of this contract; however, the ZeroEx market contracts are pre-approved to\n/// transfer the tokens. By Selling the instrument NFT, the writer earns a \"premium\" for selling their option. The\n/// option may be sold and re-sold multiple times.\n///\n/// (3) SETTLEMENT:\n/// One day prior to the expiration, and auction begins. People are able to call bid() for more than the strike price to\n/// place a bid. If, at settlement, the high bid is greater than the strike, (bid - strike) is transferred to the holder\n/// of the instrument NFT, the strike price is transferred to the writer. The high bid is transferred to the holder of\n/// the option.\ninterface IHookCoveredCall is IERC721Metadata {\n  /// @notice emitted when a new call option is successfully minted with a specific underlying vault\n  event CallCreated(\n    address writer,\n    address vaultAddress,\n    uint256 assetId,\n    uint256 optionId,\n    uint256 strikePrice,\n    uint256 expiration\n  );\n\n  /// @notice emitted when a call option is settled\n  event CallSettled(uint256 optionId);\n\n  /// @notice emitted when a call option is reclaimed\n  event CallReclaimed(uint256 optionId);\n\n  /// @notice emitted when a expired call option is burned\n  event ExpiredCallBurned(uint256 optionId);\n\n  /// @notice emitted when a call option settlement auction gets and accepts a new bid\n  /// @param bidder the account placing the bid that is now the high bidder\n  /// @param bidAmount the amount of the bid (in wei)\n  /// @param optionId the option for the underlying that was bid on\n  event Bid(uint256 optionId, uint256 bidAmount, address bidder);\n\n  /// @notice Mints a new call option for a particular \"underlying\" ERC-721 NFT with a given strike price and expiration\n  /// @param tokenAddress the contract address of the ERC-721 token that serves as the underlying asset for the call\n  /// option\n  /// @param tokenId the tokenId of the underlying ERC-721 token\n  /// @param strikePrice the strike price for the call option being written\n  /// @param expirationTime time the timestamp after which the option will be expired\n  function mintWithErc721(\n    address tokenAddress,\n    uint256 tokenId,\n    uint128 strikePrice,\n    uint32 expirationTime\n  ) external returns (uint256);\n\n  /// @notice Mints a new call option for the assets deposited in a particular vault given strike price and expiration.\n  /// @param vaultAddress the contract address of the vault currently holding the call option\n  /// @param assetId the id of the asset within the vault\n  /// @param strikePrice the strike price for the call option being written\n  /// @param expirationTime time the timestamp after which the option will be expired\n  /// @param signature the signature used to place the entitlement onto the vault\n  function mintWithVault(\n    address vaultAddress,\n    uint32 assetId,\n    uint128 strikePrice,\n    uint32 expirationTime,\n    Signatures.Signature calldata signature\n  ) external returns (uint256);\n\n  /// @notice Mints a new call option for the assets deposited in a particular vault given strike price and expiration.\n  /// That vault must already have a registered entitlement for this contract with the correct expiration registered.\n  /// @param vaultAddress the contract address of the vault currently holding the call option\n  /// @param assetId the id of the asset within the vault\n  /// @param strikePrice the strike price for the call option being written\n  /// @param expirationTime time the timestamp after which the option will be expired\n  function mintWithEntitledVault(\n    address vaultAddress,\n    uint32 assetId,\n    uint128 strikePrice,\n    uint32 expirationTime\n  ) external returns (uint256);\n\n  /// @notice Bid in the settlement auction for an option. The paid amount is the bid,\n  /// and the bidder is required to escrow this amount until either the auction ends or another bidder bids higher\n  /// @param optionId the optionId corresponding to the settlement to bid on.\n  function bid(uint256 optionId) external payable;\n\n  /// @notice view function to get the current high settlement bid of an option, or 0 if there is no high bid\n  /// @param optionId of the option to check\n  function currentBid(uint256 optionId) external view returns (uint128);\n\n  /// @notice view function to get the current high bidder for an option settlement auction, or the null address if no\n  /// high bidder exists\n  /// @param optionId of the option to check\n  function currentBidder(uint256 optionId) external view returns (address);\n\n  /// @notice Allows the writer to reclaim an entitled asset. This is possible both if they are also the holder of the\n  /// option NFT or if the option expired early.\n  /// @dev Allows the writer to reclaim a NFT, either if the option expired OTM or if they also hold the option NFT.\n  /// @param optionId the asset to reclaim after the auction.\n  /// @param returnNft true if token should be withdrawn from vault, false to leave token in the vault.\n  function reclaimAsset(uint256 optionId, bool returnNft) external;\n\n  /// @notice Permissionlessly settle an expired option when the option expires in the money, distributing\n  /// the proceeds to the Writer, Holder, and Bidder as follows:\n  ///\n  /// WRITER (who originally called mint() and owned underlying asset) - receives the `strike`\n  /// HOLDER (ownerOf(optionId)) - receives `bid - strike`\n  /// HIGH BIDDER (call.highBidder) - becomes ownerOf NFT, pays `bid`.\n  ///\n  /// @dev the return nft param allows the underlying asset to remain in its vault. This saves gas\n  /// compared to first distributing it and then re-depositing it. No royalties or other payments\n  /// are subtracted from the distribution amounts.\n  ///\n  /// @param optionId of the option to settle.\n  /// @param returnNft true if token should be withdrawn from vault, false to leave token in the vault.\n  function settleOption(uint256 optionId, bool returnNft) external;\n\n  /// @notice Allows anyone to burn the instrument NFT for an expired option.\n  /// @param optionId of the option to burn.\n  function burnExpiredOption(uint256 optionId) external;\n}\n"
    },
    "src/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.10;\n\ninterface IWETH {\n  function deposit() external payable;\n\n  function withdraw(uint256 wad) external;\n\n  function transfer(address to, uint256 value) external returns (bool);\n}\n"
    },
    "src/mixin/HookInstrumentERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\nimport \"../interfaces/IHookERC721Vault.sol\";\n\nimport \"../lib/HookStrings.sol\";\nimport \"../lib/TokenURI.sol\";\n\n/// @dev This contract implements some ERC721 / for hook instruments.\nabstract contract HookInstrumentERC721 is ERC721Burnable {\n  using Counters for Counters.Counter;\n  mapping(uint256 => Counters.Counter) private _transfers;\n  bytes4 private constant ERC_721 = bytes4(keccak256(\"ERC712\"));\n\n  /// @dev the contact address for a marketplace to pre-approve\n  address public _preApprovedMarketplace = address(0);\n\n  /// @dev hook called after the ERC721 is transferred,\n  /// which allows us to increment the counters.\n  function _afterTokenTransfer(\n    address, // from\n    address, // to\n    uint256 tokenId\n  ) internal override {\n    // increment the counter for the token\n    _transfers[tokenId].increment();\n  }\n\n  ///\n  /// @dev See {IERC721-isApprovedForAll}.\n  /// this extension ensures that any operator contract located\n  /// at {_approvedMarketpace} is considered approved internally\n  /// in the ERC721 contract\n  ///\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return\n      operator == _preApprovedMarketplace ||\n      super.isApprovedForAll(owner, operator);\n  }\n\n  constructor(string memory instrumentType)\n    ERC721(makeInstrumentName(instrumentType), \"INST\")\n  {}\n\n  function makeInstrumentName(string memory z)\n    internal\n    pure\n    returns (string memory)\n  {\n    return string(abi.encodePacked(\"Hook \", z, \" instrument\"));\n  }\n\n  /// @notice the number of times the token has been transferred\n  /// @dev this count can be used by overbooks to invalidate orders after a\n  /// token has been transferred, preventing stale order execution by\n  /// malicious parties\n  function getTransferCount(uint256 optionId) external view returns (uint256) {\n    return _transfers[optionId].current();\n  }\n\n  /// @notice getter for the address holding the underlying asset\n  function getVaultAddress(uint256 optionId)\n    public\n    view\n    virtual\n    returns (address);\n\n  /// @notice getter for the assetId of the underlying asset within a vault\n  function getAssetId(uint256 optionId) public view virtual returns (uint32);\n\n  /// @notice getter for the option strike price\n  function getStrikePrice(uint256 optionId)\n    external\n    view\n    virtual\n    returns (uint256);\n\n  /// @notice getter for the options expiration. After this time the\n  /// option is invalid\n  function getExpiration(uint256 optionId)\n    external\n    view\n    virtual\n    returns (uint256);\n\n  /// @dev this is the OpenSea compatible collection - level metadata URI.\n  function contractUri(uint256 optionId) external view returns (string memory) {\n    return\n      string(\n        abi.encodePacked(\n          \"token.hook.xyz/option-contract/\",\n          HookStrings.toAsciiString(address(this)),\n          \"/\",\n          HookStrings.toString(optionId)\n        )\n      );\n  }\n\n  ///\n  /// @dev See {IERC721-tokenURI}.\n  ///\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    override\n    returns (string memory)\n  {\n    bytes4 class = _underlyingClass(tokenId);\n    if (class == ERC_721) {\n      IHookERC721Vault vault = IHookERC721Vault(getVaultAddress(tokenId));\n      uint32 assetId = getAssetId(tokenId);\n      address underlyingAddress = vault.assetAddress(assetId);\n      uint256 underlyingTokenId = vault.assetTokenId(assetId);\n      // currently nothing in the contract depends on the actual underlying metadata uri\n      // IERC721 underlyingContract = IERC721(underlyingAddress);\n      uint256 instrumentStrikePrice = this.getStrikePrice(tokenId);\n      uint256 instrumentExpiration = this.getExpiration(tokenId);\n      uint256 transfers = _transfers[tokenId].current();\n      return TokenURI.tokenURIERC721(\n          tokenId,\n          underlyingAddress,\n          underlyingTokenId,\n          instrumentExpiration,\n          instrumentStrikePrice,\n          transfers\n        );\n    }\n    return \"Invalid underlying asset\";\n  }\n\n  /// @dev returns an internal identifier for the underlying type contained within\n  /// the vault to determine what the instrument is on\n  ///\n  /// this class evaluation relies on the interfaceId of the underlying asset\n  ///\n  function _underlyingClass(uint256 optionId)\n    internal\n    view\n    returns (bytes4 class)\n  {\n    if (\n      ERC165Checker.supportsInterface(\n        getVaultAddress(optionId),\n        type(IHookERC721Vault).interfaceId\n      )\n    ) {\n      class = ERC_721;\n    } else {\n      revert(\"_underlying-class: Unsupported underlying type\");\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "src/lib/HookStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nlibrary HookStrings {\n  \n  /// @dev toAsciiString creates a hex encoding of an\n  /// address as a string to use in the preview NFT.\n  function toAsciiString(address x) internal pure returns (string memory) {\n    bytes memory s = new bytes(40);\n    for (uint256 i = 0; i < 20; i++) {\n      bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\n      bytes1 hi = bytes1(uint8(b) / 16);\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n      s[2 * i] = char(hi);\n      s[2 * i + 1] = char(lo);\n    }\n    return string(s);\n  }\n\n  function char(bytes1 b) internal pure returns (bytes1 c) {\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n    else return bytes1(uint8(b) + 0x57);\n  }\n\n  function toString(uint256 value) internal pure returns (string memory) {\n    // Inspired by OraclizeAPI's implementation - MIT license\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n    if (value == 0) {\n      return \"0\";\n    }\n    uint256 temp = value;\n    uint256 digits;\n    while (temp != 0) {\n      digits++;\n      temp /= 10;\n    }\n    bytes memory buffer = new bytes(digits);\n    while (value != 0) {\n      digits -= 1;\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n      value /= 10;\n    }\n    return string(buffer);\n  }\n}\n"
    },
    "src/lib/TokenURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\nimport \"./HookStrings.sol\";\n\n/// @dev This contract implements some ERC721 / for hook instruments.\nlibrary TokenURI {\n  function _generateMetadataERC721(\n    address underlyingTokenAddress,\n    uint256 underlyingTokenId,\n    uint256 instrumentStrikePrice,\n    uint256 instrumentExpiration,\n    uint256 transfers\n  ) internal pure returns (string memory) {\n    return\n      string(\n        abi.encodePacked(\n          ', \"expiration\": ',\n          HookStrings.toString(instrumentExpiration),\n          ', \"underlying_address\": ',\n          HookStrings.toAsciiString(underlyingTokenAddress),\n          ', \"underlying_tokenId\": ',\n          HookStrings.toString(underlyingTokenId),\n          ', \"strike_price\": ',\n          HookStrings.toString(instrumentStrikePrice),\n          ', \"transfer_index\": ',\n          HookStrings.toString(transfers)\n        )\n      );\n  }\n\n  /// @dev this is a basic tokenURI based on the loot contract for an ERC721\n  /// (ripped off from LOOT PROJECT)\n  function tokenURIERC721(\n    uint256 instrumentId,\n    address underlyingAddress,\n    uint256 underlyingTokenId,\n    uint256 instrumentExpiration,\n    uint256 instrumentStrike,\n    uint256 transfers\n  ) public pure returns (string memory) {\n    string[5] memory parts;\n    parts[\n      0\n    ] = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>'\n    '.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\"100%\" height=\"100%\" fill='\n    '\"black\" /><text x=\"10\" y=\"20\" class=\"base\">';\n\n    parts[1] = HookStrings.toAsciiString(underlyingAddress);\n\n    parts[2] = '</text><text x=\"10\" y=\"40\" class=\"base\">';\n\n    parts[3] = HookStrings.toString(underlyingTokenId);\n\n    parts[4] = \"</text></svg>\";\n\n    string memory output = string(\n      abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4])\n    );\n\n    string memory json = Base64.encode(\n      bytes(\n        string(\n          abi.encodePacked(\n            '{\"name\": \"Option Id',\n            HookStrings.toString(instrumentId),\n            '\", \"description\": \"Hook is the on-chain covered call option protocol\", \"image\": '\n            '\"data:image/svg+xml;base64,',\n            Base64.encode(bytes(output)),\n            _generateMetadataERC721(\n              underlyingAddress,\n              underlyingTokenId,\n              instrumentStrike,\n              instrumentExpiration,\n              transfers\n            ),\n            '\"}'\n          )\n        )\n      )\n    );\n    output = string(abi.encodePacked(\"data:application/json;base64,\", json));\n\n    return output;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "src/HookERC721MultiVaultImplV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./interfaces/IHookERC721Vault.sol\";\nimport \"./interfaces/IERC721FlashLoanReceiver.sol\";\nimport \"./interfaces/IHookProtocol.sol\";\nimport \"./lib/Entitlements.sol\";\nimport \"./lib/Signatures.sol\";\nimport \"./mixin/EIP712.sol\";\n\n/// @title  HookMultiVault -- implementation of a Vault for multiple assets within a NFT collection, with entitlements.\n/// @author Jake Nyquist - j@hook.xyz\n/// @notice HookVault holds a multiple NFT asset in escrow on behalf of multiple beneficial owners. Other contracts\n/// are able to register \"entitlements\" for a fixed period of time on the asset, which give them the ability to\n/// change the vault's owner.\n/// @dev This contract implements ERC721Receiver\n/// This contract views the tokenId for the asset on the ERC721 contract as the corresponding assetId for that asset\n/// when deposited into the vault\ncontract HookERC721MultiVaultImplV1 is\n  IHookERC721Vault,\n  EIP712,\n  Initializable,\n  ReentrancyGuard\n{\n  /// ----------------  STORAGE ---------------- ///\n\n  /// @dev these are the NFT contract address and tokenId the vault is covering\n  IERC721 internal _nftContract;\n\n  struct Asset {\n    address beneficialOwner;\n    address operator;\n    uint32 expiry;\n  }\n\n  /// @dev the current entitlement applied to each asset, which includes the beneficialOwner\n  /// for the asset\n  /// if the entitled operator field is non-null, it means an unreleased entitlement has been\n  /// applied; however, that entitlement could still be expired (if block.timestamp > entitlement.expiry)\n  mapping(uint32 => Asset) internal assets;\n\n  IHookProtocol internal _hookProtocol;\n\n  /// Upgradeable Implementations cannot have a constructor, so we call the initialize instead;\n  constructor() {}\n\n  /// -- constructor\n  function initialize(address nftContract, address hookAddress)\n    public\n    initializer\n  {\n    setAddressForEipDomain(hookAddress);\n    _nftContract = IERC721(nftContract);\n    _hookProtocol = IHookProtocol(hookAddress);\n  }\n\n  /// ---------------- PUBLIC FUNCTIONS ---------------- ///\n\n  ///\n  /// @dev See {IERC165-supportsInterface}.\n  ///\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    returns (bool)\n  {\n    return\n      interfaceId == type(IHookERC721Vault).interfaceId ||\n      interfaceId == type(IERC165).interfaceId;\n  }\n\n  /// @dev See {IHookERC721Vault-withdrawalAsset}.\n  /// @dev withdrawals can only be performed to the beneficial owner if there are no entitlements\n  function withdrawalAsset(uint32 assetId) public virtual {\n    require(\n      !hasActiveEntitlement(assetId),\n      \"withdrawalAsset -- the asset cannot be withdrawn with an active entitlement\"\n    );\n\n    _nftContract.safeTransferFrom(\n      address(this),\n      assets[assetId].beneficialOwner,\n      _assetTokenId(assetId)\n    );\n\n    emit AssetWithdrawn(assetId, msg.sender, assets[assetId].beneficialOwner);\n  }\n\n  /// @dev See {IHookERC721Vault-imposeEntitlement}.\n  /// @dev The entitlement must be signed by the current beneficial owner of the contract. Anyone can submit the\n  /// entitlement\n  function imposeEntitlement(\n    address operator,\n    uint32 expiry,\n    uint32 assetId,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public virtual {\n    // check that the asset has a current beneficial owner\n    // before creating a new entitlement\n    require(\n      assets[assetId].beneficialOwner != address(0),\n      \"imposeEntitlement -- beneficial owner must be set to impose an entitlement\"\n    );\n\n    // the beneficial owner of an asset is able to set any entitlement on their own asset\n    // as long as it has not already been committed to someone else.\n    _verifyAndRegisterEntitlement(operator, expiry, assetId, v, r, s);\n  }\n\n  /// @dev See {IHookERC721Vault-grantEntitlement}.\n  /// @dev The entitlement must be sent by the current beneficial owner\n  function grantEntitlement(Entitlements.Entitlement calldata entitlement)\n    external\n  {\n    require(\n      assets[entitlement.assetId].beneficialOwner == msg.sender,\n      \"grantEntitlement -- only the beneficial owner or approved operator can grant an entitlement\"\n    );\n\n    // the beneficial owner of an asset is able to directly set any entitlement on their own asset\n    // as long as it has not already been committed to someone else.\n\n    _registerEntitlement(\n      entitlement.assetId,\n      entitlement.operator,\n      entitlement.expiry,\n      msg.sender\n    );\n  }\n\n  /// @dev See {IERC721Receiver-onERC721Received}.\n  ///\n  /// Always returns `IERC721Receiver.onERC721Received.selector`.\n  function onERC721Received(\n    address operator, // this arg is the address of the operator\n    address from,\n    uint256 tokenId,\n    bytes calldata data\n  ) external virtual override returns (bytes4) {\n    /// We should make sure that the owner of an asset never changes simply as a result of someone sending\n    /// a NFT into this contract.\n    ///\n    /// (1) When receiving a nft from the ERC-721 contract this vault covers, create a new entitlement entry\n    /// with the sender as the beneficial owner to track the asset within the vault.\n    ///\n    /// (1a) If the transfer additionally specifies data (i.e. an abi-encoded entitlement), the entitlement will\n    /// be imposed via that transfer, including a new beneficial owner.\n    ///     NOTE: this is an opinionated approach, however, the authors believe that anyone with the ability to\n    ///     transfer the asset into this contract could also trivially transfer the asset to another address\n    ///     they control and then deposit, so allowing this method of setting the beneficial owner simply\n    ///     saves gas and has no practical impact on the rights a hypothetical sender has regarding the asset.\n    ///\n    /// (2) If another nft is sent to the contract, we should verify that airdrops are allowed to this vault;\n    /// if they are disabled, we should not return the selector, otherwise we can allow them.\n    ///\n    /// IMPORTANT: If an unrelated contract is currently holding the asset on behalf of an owner and then\n    /// subsequently transfers the asset into the contract, it needs to manually call (setBeneficialOwner)\n    /// after making this call to ensure that the true owner of the asset is known to the vault. Otherwise,\n    /// the owner will lose the ability to reclaim their asset. Alternatively, they could pass an entitlement\n    /// in pre-populated with the correct beneficial owner, which will give that owner the ability to reclaim\n    /// the asset.\n    if (msg.sender == address(_nftContract)) {\n      // There is no need to check if we currently have this token or an entitlement set.\n      // Even if the contract were able to get into this state, it should still accept the asset\n      // which will allow it to enforce the entitlement.\n\n      // If additional data is sent with the transfer, we attempt to parse an entitlement from it.\n      // this allows the entitlement to be registered ahead of time.\n      if (data.length > 0) {\n        // Decode the order, signature from `data`. If `data` does not encode such parameters, this\n        // will throw.\n        (\n          address beneficialOwner,\n          address entitledOperator,\n          uint32 expirationTime\n        ) = abi.decode(data, (address, address, uint32));\n\n        // if someone has the asset, they should be able to set whichever beneficial owner they'd like.\n        // equally, they could transfer the asset first to themselves and subsequently grant a specific\n        // entitlement, which is equivalent to this.\n        _registerEntitlement(\n          uint32(tokenId),\n          entitledOperator,\n          expirationTime,\n          beneficialOwner\n        );\n      } else {\n        _setBeneficialOwner(uint32(tokenId), from);\n      }\n    } else {\n      // If we're receiving an airdrop or other asset uncovered by escrow to this address, we should ensure\n      // that this is allowed by our current settings.\n      require(\n        !_hookProtocol.getCollectionConfig(\n          address(_nftContract),\n          keccak256(\"vault.airdropsProhibited\")\n        ),\n        \"onERC721Received -- non-escrow asset returned when airdrops are disabled\"\n      );\n    }\n    emit AssetReceived(from, operator, msg.sender, uint32(tokenId));\n    return this.onERC721Received.selector;\n  }\n\n  /// @dev See {IHookERC721Vault-flashLoan}.\n  function flashLoan(\n    uint32 assetId,\n    address receiverAddress,\n    bytes calldata params\n  ) external override nonReentrant {\n    IERC721FlashLoanReceiver receiver = IERC721FlashLoanReceiver(\n      receiverAddress\n    );\n    require(receiverAddress != address(0), \"flashLoan -- zero address\");\n    require(\n      _assetOwner(assetId) == address(this),\n      \"flashLoan -- asset not in vault\"\n    );\n    require(\n      msg.sender == assets[assetId].beneficialOwner,\n      \"flashLoan -- not called by the asset owner\"\n    );\n\n    require(\n      !_hookProtocol.getCollectionConfig(\n        address(_nftContract),\n        keccak256(\"vault.flashLoanDisabled\")\n      ),\n      \"flashLoan -- flashLoan feature disabled for this contract\"\n    );\n\n    // (1) store a hash of our current entitlement state as a snapshot to diff\n    bytes32 startState = keccak256(abi.encode(assets[assetId]));\n\n    // (2) send the flashloan contract the vaulted NFT\n    _nftContract.safeTransferFrom(\n      address(this),\n      receiverAddress,\n      _assetTokenId(assetId)\n    );\n\n    // (3) call the flashloan contract, giving it a chance to do whatever it wants\n    // NOTE: The flashloan contract MUST approve this vault contract as an operator\n    // for the nft, such that we're able to make sure it has arrived.\n    require(\n      receiver.executeOperation(\n        address(_nftContract),\n        _assetTokenId(assetId),\n        msg.sender,\n        address(this),\n        params\n      ),\n      \"flashLoan -- the flash loan contract must return true\"\n    );\n\n    // (4) return the nft back into the vault\n    //        Use transferFrom instead of safeTransfer from because transferFrom\n    //        would modify our state ( it calls erc721Receiver ). and because we know\n    //        for sure that this contract can handle ERC-721s.\n    _nftContract.transferFrom(\n      receiverAddress,\n      address(this),\n      _assetTokenId(assetId)\n    );\n\n    // (5) sanity check to ensure the asset was actually returned to the vault.\n    // this is a concern because its possible that the safeTransferFrom implemented by\n    // some contract fails silently\n    require(_assetOwner(assetId) == address(this));\n\n    // (6) additional sanity check to ensure that the internal state of\n    // the entitlement has not somehow been modified during the flash loan, for example\n    // via some re-entrancy attack or by sending the asset back into the contract\n    // prematurely\n    require(\n      startState == keccak256(abi.encode(assets[assetId])),\n      \"flashLoan -- entitlement state cannot be modified\"\n    );\n\n    // (7) emit an event to record the flashloan\n    emit AssetFlashLoaned(\n      assets[assetId].beneficialOwner,\n      assetId,\n      receiverAddress\n    );\n  }\n\n  /// @dev See {IHookVault-entitlementExpiration}.\n  function entitlementExpiration(uint32 assetId)\n    external\n    view\n    returns (uint32 expiry)\n  {\n    if (!hasActiveEntitlement(assetId)) {\n      return 0;\n    } else {\n      return assets[assetId].expiry;\n    }\n  }\n\n  /// @dev See {IHookERC721Vault-getBeneficialOwner}.\n  function getBeneficialOwner(uint32 assetId) external view returns (address) {\n    return assets[assetId].beneficialOwner;\n  }\n\n  /// @dev See {IHookERC721Vault-getHoldsAsset}.\n  function getHoldsAsset(uint32 assetId)\n    external\n    view\n    returns (bool holdsAsset)\n  {\n    return _assetOwner(assetId) == address(this);\n  }\n\n  function assetAddress(uint32) external view returns (address) {\n    return address(_nftContract);\n  }\n\n  /// @dev returns the underlying token ID for a given asset. In this case\n  /// the tokenId == the assetId\n  function assetTokenId(uint32 assetId) external view returns (uint256) {\n    return _assetTokenId(assetId);\n  }\n\n  /// @dev See {IHookERC721Vault-setBeneficialOwner}.\n  /// setBeneficialOwner can only be called by the entitlementContract if there is an activeEntitlement.\n  function setBeneficialOwner(uint32 assetId, address newBeneficialOwner)\n    public\n    virtual\n  {\n    if (hasActiveEntitlement(assetId)) {\n      require(\n        msg.sender == assets[assetId].operator,\n        \"setBeneficialOwner -- only the contract with the active entitlement can update the beneficial owner\"\n      );\n    } else {\n      require(\n        msg.sender == assets[assetId].beneficialOwner,\n        \"setBeneficialOwner -- only the current owner can update the beneficial owner\"\n      );\n    }\n    _setBeneficialOwner(assetId, newBeneficialOwner);\n  }\n\n  /// @dev See {IHookERC721Vault-clearEntitlement}.\n  /// @dev This can only be called if an entitlement currently exists, otherwise it would be a no-op\n  function clearEntitlement(uint32 assetId) public {\n    require(\n      hasActiveEntitlement(assetId),\n      \"clearEntitlement -- an active entitlement must exist\"\n    );\n    require(\n      msg.sender == assets[assetId].operator,\n      \"clearEntitlement -- only the entitled address can clear the entitlement\"\n    );\n    _clearEntitlement(assetId);\n  }\n\n  /// @dev See {IHookERC721Vault-clearEntitlementAndDistribute}.\n  /// @dev The entitlement must be exist, and must be called by the {operator}. The operator can specify a\n  /// intended receiver, which should match the beneficialOwner. The function will throw if\n  /// the receiver and owner do not match.\n  /// @param assetId the id of the specific vaulted asset\n  /// @param receiver the intended receiver of the asset\n  function clearEntitlementAndDistribute(uint32 assetId, address receiver)\n    external\n    nonReentrant\n  {\n    require(\n      assets[assetId].beneficialOwner == receiver,\n      \"clearEntitlementAndDistribute -- Only the beneficial owner can receive the asset\"\n    );\n    require(\n      receiver != address(0),\n      \"clearEntitlementAndDistribute -- assets cannot be sent to null address\"\n    );\n    clearEntitlement(assetId);\n    IERC721(_nftContract).safeTransferFrom(\n      address(this),\n      receiver,\n      _assetTokenId(assetId)\n    );\n    emit AssetWithdrawn(assetId, msg.sender, assets[assetId].beneficialOwner);\n  }\n\n  /// @dev Validates that a specific signature is actually the entitlement\n  /// EIP-712 signed by the beneficial owner specified in the entitlement.\n  function validateEntitlementSignature(\n    address operator,\n    uint32 expiry,\n    uint32 assetId,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public view {\n    bytes32 entitlementHash = _getEIP712Hash(\n      Entitlements.getEntitlementStructHash(\n        Entitlements.Entitlement({\n          beneficialOwner: assets[assetId].beneficialOwner,\n          expiry: expiry,\n          operator: operator,\n          assetId: assetId,\n          vaultAddress: address(this)\n        })\n      )\n    );\n    address signer = ecrecover(entitlementHash, v, r, s);\n\n    require(signer != address(0), \"recovered address is null\");\n    require(\n      signer == assets[assetId].beneficialOwner,\n      \"validateEntitlementSignature --- not signed by beneficialOwner\"\n    );\n  }\n\n  /// ---------------- INTERNAL/PRIVATE FUNCTIONS ---------------- ///\n\n  /// @notice Verify that an entitlement is properly signed and apply it to the asset if able.\n  /// @dev The entitlement must be signed by the beneficial owner of the asset in order for it to be considered valid\n  /// @param operator the operator to entitle\n  /// @param expiry the duration of the entitlement\n  /// @param assetId the id of the asset within the vault\n  /// @param v sig v\n  /// @param r sig r\n  /// @param s sig s\n  function _verifyAndRegisterEntitlement(\n    address operator,\n    uint32 expiry,\n    uint32 assetId,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) private {\n    validateEntitlementSignature(operator, expiry, assetId, v, r, s);\n    _registerEntitlement(\n      assetId,\n      operator,\n      expiry,\n      assets[assetId].beneficialOwner\n    );\n  }\n\n  function _registerEntitlement(\n    uint32 assetId,\n    address operator,\n    uint32 expiry,\n    address beneficialOwner\n  ) internal {\n    require(\n      !hasActiveEntitlement(assetId),\n      \"_verifyAndRegisterEntitlement -- existing entitlement must be cleared before registering a new one\"\n    );\n\n    require(\n      expiry > block.timestamp,\n      \"_verifyAndRegisterEntitlement -- entitlement must expire in the future\"\n    );\n    assets[assetId] = Asset({\n      operator: operator,\n      expiry: expiry,\n      beneficialOwner: beneficialOwner\n    });\n    emit EntitlementImposed(assetId, operator, expiry, beneficialOwner);\n  }\n\n  function _clearEntitlement(uint32 assetId) private {\n    assets[assetId].expiry = 0;\n    assets[assetId].operator = address(0);\n    emit EntitlementCleared(assetId, assets[assetId].beneficialOwner);\n  }\n\n  function hasActiveEntitlement(uint32 assetId) public view returns (bool) {\n    /// Although we do clear the expiry in _clearEntitlement, making the second half of the AND redundant,\n    /// we choose to include it here because we rely on this field being null to clear an entitlement.\n    return\n      block.timestamp < assets[assetId].expiry &&\n      assets[assetId].operator != address(0);\n  }\n\n  function getCurrentEntitlementOperator(uint32 assetId)\n    external\n    view\n    returns (bool isActive, address operator)\n  {\n    isActive = hasActiveEntitlement(assetId);\n    operator = assets[assetId].operator;\n  }\n\n  /// @dev determine the owner of a specific asset according to is contract based\n  /// on that assets assetId within this vault.\n  ///\n  /// this function can be overridden if the assetId -> tokenId mapping is modified.\n  function _assetOwner(uint32 assetId) internal view returns (address) {\n    return _nftContract.ownerOf(_assetTokenId(assetId));\n  }\n\n  /// @dev get the token id based on an asset's ID\n  ///\n  /// this function can be overridden if the assetId -> tokenId mapping is modified.\n  function _assetTokenId(uint32 assetId)\n    internal\n    view\n    virtual\n    returns (uint256)\n  {\n    return assetId;\n  }\n\n  function _setBeneficialOwner(uint32 assetId, address newBeneficialOwner)\n    internal\n  {\n    require(\n      newBeneficialOwner != address(0),\n      \"_setBeneficialOwner -- new owner is the zero address\"\n    );\n    assets[assetId].beneficialOwner = newBeneficialOwner;\n    emit BeneficialOwnerSet(assetId, newBeneficialOwner, msg.sender);\n  }\n}\n"
    },
    "src/interfaces/IERC721FlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\n/// @title Flash Loan Operator Interface (ERC-721)\n/// @dev contracts that will utilize vaulted assets in flash loans should implement this interface in order to\n/// receive the asset. Users may want to receive the asset within a single block to claim airdrops, participate\n/// in governance, and other things with their assets.\n///\n/// The implementer may do whatever they like with the vaulted NFT within the executeOperation method,\n/// so long as they approve the vault (passed as a param) to operate the underlying NFT. The Vault\n/// will move the asset back into the vault after executionOperation returns, and also validate that\n/// it is the owner of the asset.\n///\n/// The flashloan receiver is able to abort a flashloan by returning false from the executeOperation method.\ninterface IERC721FlashLoanReceiver is IERC721Receiver {\n  /// @notice the method that contains the operations to be performed with the loaned asset\n  /// @dev executeOperation is called immediately after the asset is transferred to this contract. After return,\n  /// the asset is returned to the vault by the vault contract. The executeOperation implementation MUST\n  /// approve the {vault} to operate the transferred NFT\n  /// i.e. `IERC721(nftContract).setApprovalForAll(vault, true);`\n  ///\n  /// @param nftContract the address of the underlying erc-721 asset\n  /// @param tokenId the address of the received erc-721 asset\n  /// @param beneficialOwner the current beneficialOwner of the vault, who initialted the flashLoan\n  /// @param vault the address of the vault performing the flashloan (in most cases, equal to msg.sender)\n  /// @param params additional params passed by the caller into the flashloan\n  function executeOperation(\n    address nftContract,\n    uint256 tokenId,\n    address beneficialOwner,\n    address vault,\n    bytes calldata params\n  ) external returns (bool);\n}\n"
    },
    "src/mixin/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\n/// @dev EIP712 helpers for features.\nabstract contract EIP712 {\n  /// @dev The domain hash separator for the entire exchange proxy.\n  bytes32 public EIP712_DOMAIN_SEPARATOR;\n\n  function setAddressForEipDomain(address hookAddress) internal {\n    // Compute `EIP712_DOMAIN_SEPARATOR`\n    {\n      uint256 chainId;\n      assembly {\n        chainId := chainid()\n      }\n      EIP712_DOMAIN_SEPARATOR = keccak256(\n        abi.encode(\n          keccak256(\n            \"EIP712Domain(\"\n            \"string name,\"\n            \"string version,\"\n            \"uint256 chainId,\"\n            \"address verifyingContract\"\n            \")\"\n          ),\n          keccak256(\"Hook\"),\n          keccak256(\"1.0.0\"),\n          chainId,\n          hookAddress\n        )\n      );\n    }\n  }\n\n  function _getEIP712Hash(bytes32 structHash)\n    internal\n    view\n    returns (bytes32 eip712Hash)\n  {\n    return\n      keccak256(\n        abi.encodePacked(hex\"1901\", EIP712_DOMAIN_SEPARATOR, structHash)\n      );\n  }\n}\n"
    },
    "src/HookERC721VaultImplV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"./HookERC721MultiVaultImplV1.sol\";\n\n/// @title HookVault -- implementation of a Vault for a single NFT asset, with entitlements.\n/// @author Jake Nyquist - j@hook.xyz\n/// @notice HookVault holds a single NFT asset in escrow on behalf of a user. Other contracts are able\n/// to register \"entitlements\" for a fixed period of time on the asset, which give them the ability to\n/// change the vault's owner.\n/// @dev This contract implements ERC721Receiver and\ncontract HookERC721VaultImplV1 is HookERC721MultiVaultImplV1 {\n  uint32 private constant ASSET_ID = 0;\n\n  /// ----------------  STORAGE ---------------- ///\n\n  /// @dev this is the only tokenID the vault covers.\n  uint256 internal _tokenId;\n\n  /// Upgradeable Implementations cannot have a constructor, so we call the initialize instead;\n  constructor() HookERC721MultiVaultImplV1() {}\n\n  /// -- constructor\n  function initialize(\n    address nftContract,\n    uint256 tokenId,\n    address hookAddress\n  ) public {\n    setAddressForEipDomain(hookAddress);\n    _tokenId = tokenId;\n    // the super function calls \"Initialize\"\n    super.initialize(nftContract, hookAddress);\n  }\n\n  /// ---------------- PUBLIC/EXTERNAL FUNCTIONS ---------------- ///\n\n  /// @dev See {IHookERC721Vault-withdrawalAsset}.\n  /// @dev withdrawals can only be performed by the beneficial owner if there are no entitlements\n  function withdrawalAsset(uint32 assetId)\n    public\n    override\n    assetIdIsZero(assetId)\n  {\n    super.withdrawalAsset(assetId);\n  }\n\n  /// @dev See {IHookERC721Vault-imposeEntitlement}.\n  /// @dev The entitlement must be signed by the current beneficial owner of the contract. Anyone can submit the\n  /// entitlement\n  function imposeEntitlement(\n    address operator,\n    uint32 expiry,\n    uint32 assetId,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public override assetIdIsZero(assetId) {\n    super.imposeEntitlement(operator, expiry, assetId, v, r, s);\n  }\n\n  /// @dev See {IERC721Receiver-onERC721Received}.\n  ///\n  /// Always returns `IERC721Receiver.onERC721Received.selector`.\n  ///\n  /// This method requires an override implementation because the the arguments must be embedded in the body of the\n  /// function\n  function onERC721Received(\n    address operator, // this arg is the address of the operator\n    address from,\n    uint256 tokenId,\n    bytes calldata data\n  ) external virtual override returns (bytes4) {\n    /// We should make sure that the owner of an asset never changes simply as a result of someone sending\n    /// a NFT into this contract.\n    ///\n    /// (1) If the contract is specified to hold a specific NFT, and that NFT is sent to the contract,\n    /// set the beneficial owner of this vault to be current owner of the asset getting sent.\n    ///\n    /// (2) If another nft is sent to the contract, we should verify that airdrops are allowed to this vault;\n    /// if they are disabled, we should not return the selector, otherwise we can allow them.\n    ///\n    /// IMPORTANT: If an unrelated contract is currently holding the asset on behalf of an owner and then\n    /// subsequently transfers the asset into the contract, it needs to manually call (setBeneficialOwner)\n    /// after making this call to ensure that the true owner of the asset is known to the vault. Otherwise,\n    /// the owner will lose the ability to reclaim their asset. Alternatively, they could pass an entitlement\n    /// in pre-populated with the correct beneficial owner, which will give that owner the ability to reclaim\n    /// the asset.\n    if (msg.sender == address(_nftContract) && tokenId == _tokenId) {\n      // There is no need to check if we currently have this token or an entitlement set.\n      // Even if the contract were able to get into this state, it should still accept the asset\n      // which will allow it to enforce the entitlement.\n      _setBeneficialOwner(ASSET_ID, from);\n\n      // If additional data is sent with the transfer, we attempt to parse an entitlement from it.\n      // this allows the entitlement to be registered ahead of time.\n      if (data.length > 0) {\n        // Decode the order, signature from `data`. If `data` does not encode such parameters, this\n        // will throw.\n        (\n          address _beneficialOwner,\n          address entitledOperator,\n          uint32 expirationTime\n        ) = abi.decode(data, (address, address, uint32));\n        // if someone has the asset, they should be able to set whichever beneficial owner they'd like.\n        // equally, they could transfer the asset first to themselves and subsequently grant a specific\n        // entitlement, which is equivalent to this.\n        _setBeneficialOwner(ASSET_ID, _beneficialOwner);\n        _registerEntitlement(\n          ASSET_ID,\n          entitledOperator,\n          expirationTime,\n          assets[ASSET_ID].beneficialOwner\n        );\n      }\n    } else {\n      // If we're receiving an airdrop or other asset uncovered by escrow to this address, we should ensure\n      // that this is allowed by our current settings.\n      require(\n        !_hookProtocol.getCollectionConfig(\n          address(_nftContract),\n          keccak256(\"vault.airdropsProhibited\")\n        ),\n        \"onERC721Received -- non-escrow asset returned when airdrops are disabled\"\n      );\n    }\n    emit AssetReceived(from, operator, msg.sender, ASSET_ID);\n    return this.onERC721Received.selector;\n  }\n\n  /// @dev See {IHookERC721Vault-execTransaction}.\n  /// @dev Allows a beneficial owner to send an arbitrary call from this wallet as long as the underlying NFT\n  /// is still owned by us after the transaction. The ether value sent is forwarded. Return value is suppressed.\n  ///\n  /// Because this contract holds only a single asset owned by a single address, it supports calling exec\n  /// transaction from this address because such calls are unlikely to impact other owner's assets.\n  function execTransaction(address to, bytes memory data)\n    external\n    payable\n    virtual\n    returns (bool success)\n  {\n    // Only the beneficial owner can make this call\n    require(\n      msg.sender == assets[ASSET_ID].beneficialOwner,\n      \"execTransaction -- only the beneficial owner can use the transaction\"\n    );\n\n    // block transactions to the NFT contract to ensure that people cant set approvals as the owner.\n    require(\n      to != address(_nftContract),\n      \"execTransaction -- cannot send transactions to the NFT contract itself\"\n    );\n\n    // block transactions to the vault to mitigate reentrancy vulnerabilities\n    require(\n      to != address(this),\n      \"execTransaction -- cannot call the vault contract\"\n    );\n\n    require(\n      !_hookProtocol.getCollectionConfig(\n        address(_nftContract),\n        keccak256(\"vault.execTransactionDisabled\")\n      ),\n      \"execTransaction -- feature is disabled for this collection\"\n    );\n\n    // Execute transaction without further confirmations.\n    (success, ) = address(to).call{value: msg.value}(data);\n\n    require(_assetOwner(ASSET_ID) == address(this));\n  }\n\n  /// @dev See {IHookERC721Vault-setBeneficialOwner}.\n  function setBeneficialOwner(uint32 assetId, address newBeneficialOwner)\n    public\n    override\n    assetIdIsZero(assetId)\n  {\n    super.setBeneficialOwner(assetId, newBeneficialOwner);\n  }\n\n  /// @dev modifier used to ensure that only the valid asset id\n  /// may be passed into this vault.\n  modifier assetIdIsZero(uint256 assetId) {\n    require(assetId == ASSET_ID, \"assetIdIsZero -- this vault only supports asset id 0\");\n    _;\n  }\n\n  /// @dev override the assetOwner method to ensure the allowed\n  /// token in this vault is checked on the ERC-721 contract\n  function _assetTokenId(uint32 assetId)\n    internal\n    view\n    override\n    assetIdIsZero(assetId)\n    returns (uint256)\n  {\n    return _tokenId;\n  }\n}\n"
    },
    "src/test/utils/mocks/MaliciousBidder.sol": {
      "content": "pragma solidity ^0.8.10;\n\nimport \"../../../interfaces/IHookCoveredCall.sol\";\n\n// @dev a smart contract that reverts upon receiveing funds\n// and allows a bid to be mocked to a specific covered call option.\n// this can be used to write tests that fail if a contract reverting\n// prevents new bids.\ncontract MaliciousBidder {\n  IHookCoveredCall private callOption;\n  bool private throwOnReceive;\n\n  constructor(address _callOption) {\n    callOption = IHookCoveredCall(_callOption);\n    throwOnReceive = true;\n  }\n\n  function bid(uint256 optionId) public payable {\n    callOption.bid{value: msg.value}(optionId);\n  }\n\n  receive() external payable {\n    require(!throwOnReceive, \"ha ha ha gotcha\");\n  }\n}\n"
    },
    "src/test/utils/tokens/TestERC721.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title TestERC721\n/// @notice FOR TEST PURPOSES ONLY.\ncontract TestERC721 is ERC721, Ownable {\n  constructor() ERC721(\"TestERC721\", \"TEST\") {}\n\n  function mint(address to, uint256 tokenId) public {\n    _safeMint(to, tokenId);\n  }\n\n  function burn(uint256 tokenId) public {\n    _burn(tokenId);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "src/HookProtocol.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport \"./interfaces/IHookProtocol.sol\";\n\nimport \"./mixin/PermissionConstants.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @dev Other contracts in the protocol refer to this one to get configuration and pausing issues.\n/// to reduce attack surface area, this contract cannot be upgraded; however, additional roles can be\n/// added.\n///\n/// This contract does not implement any specific timelocks or other safety measures. The roles are granted\n/// with the principal of least privilege. As the protocol matures, these additional measures can be layered\n/// by granting these roles to other contracts. In the extreme, the upgrade and other roles can be burned,\n/// which would effectively make the protocol static and non-upgradeable.\ncontract HookProtocol is\n  PermissionConstants,\n  AccessControl,\n  IHookProtocol,\n  Pausable\n{\n  address public override coveredCallContract;\n  address public override vaultContract;\n  address public override getWETHAddress;\n  mapping(address => mapping(bytes32 => bool)) collectionConfigs;\n\n  constructor(address admin, address weth) {\n    _setupRole(ALLOWLISTER_ROLE, admin);\n    _setupRole(PAUSER_ROLE, admin);\n    _setupRole(VAULT_UPGRADER, admin);\n    _setupRole(CALL_UPGRADER, admin);\n    // create a distinct admin role\n    _setupRole(ADMIN_ROLE, admin);\n    _setupRole(MARKET_CONF, admin);\n    _setupRole(COLLECTION_CONF, admin);\n\n    // allow the admin to add and remove other roles\n    _setRoleAdmin(ALLOWLISTER_ROLE, ALLOWLISTER_ROLE);\n    _setRoleAdmin(PAUSER_ROLE, PAUSER_ROLE);\n    _setRoleAdmin(VAULT_UPGRADER, VAULT_UPGRADER);\n    _setRoleAdmin(CALL_UPGRADER, CALL_UPGRADER);\n    _setRoleAdmin(MARKET_CONF, MARKET_CONF);\n    _setRoleAdmin(COLLECTION_CONF, COLLECTION_CONF);\n    // set weth\n    getWETHAddress = weth;\n  }\n\n  function setCollectionConfig(\n    address collectionAddress,\n    bytes32 config,\n    bool value\n  ) external onlyRole(COLLECTION_CONF) {\n    collectionConfigs[collectionAddress][config] = value;\n  }\n\n  /// @dev See {IHookProtocol-getCollectionConfig}.\n  function getCollectionConfig(address collectionAddress, bytes32 conf)\n    external\n    view\n    returns (bool value)\n  {\n    return collectionConfigs[collectionAddress][conf];\n  }\n\n  modifier adminOnly() {\n    require(hasRole(ADMIN_ROLE, msg.sender), \"Caller is not an admin\");\n    _;\n  }\n\n  /// @notice throws an exception when the protocol is paused\n  function throwWhenPaused() external view whenNotPaused {\n    // depend on the modifier to throw.\n    return;\n  }\n\n  function unpause() external {\n    require(hasRole(PAUSER_ROLE, msg.sender), \"Caller is not an admin\");\n    _unpause();\n    emit PausedUpdated(false);\n  }\n\n  function pause() external {\n    require(hasRole(PAUSER_ROLE, msg.sender), \"Caller is not an admin\");\n    _pause();\n    emit PausedUpdated(true);\n  }\n\n  /// @notice Allows an admin to set the address of the deployed covered call factory\n  /// @dev This address is used by other protocols searching for the registry of\n  /// protocols.\n  /// @param coveredCallFactoryContract the address of the deployed covered call contract\n  function setCoveredCallFactory(address coveredCallFactoryContract)\n    external\n    adminOnly\n  {\n    require(\n      Address.isContract(coveredCallFactoryContract),\n      \"setCoveredCallFactory: implementation is not a contract\"\n    );\n    coveredCallContract = coveredCallFactoryContract;\n  }\n\n  /// @notice Allows an admin to set the address of the deployed vault factory\n  /// @dev allows all protocol components, including the call factory, to look up the\n  /// vault factory.\n  /// @param vaultFactoryContract the deployed vault factory\n  function setVaultFactory(address vaultFactoryContract) external adminOnly {\n    require(\n      Address.isContract(vaultFactoryContract),\n      \"setVaultFactory: implementation is not a contract\"\n    );\n    vaultContract = vaultFactoryContract;\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "src/HookUpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./mixin/PermissionConstants.sol\";\nimport \"./interfaces/IHookProtocol.sol\";\n\n/// @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n/// implementation contract, which is where they will delegate all function calls.\n///\n/// An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n/// Ownership is managed centrally on the Hook protocol level, where the owner is the holder of a specific permission.\n/// This permission should be used only for the purpose of upgrading the particular contract (i.e., the permissions\n/// should not be reused).\n///\n/// This contract is deliberately simple and only has one non-view\n/// method - `upgrade`. Timelocks or other upgrade conditions will be managed by\n/// the owner of this contract.\n/// This contract is based on the UpgradeableBeaconContract from OZ and DharmaUpgradeBeaconController from Dharma\ncontract HookUpgradeableBeacon is IBeacon, PermissionConstants {\n  using Address for address;\n  address private _implementation;\n  IHookProtocol private _protocol;\n  bytes32 private _role;\n\n  /// @dev Emitted when the implementation returned by the beacon is changed.\n  event Upgraded(address indexed implementation);\n\n  /// @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n  /// beacon.\n  constructor(\n    address implementation_,\n    address hookProtocol,\n    bytes32 upgraderRole\n  ) {\n    _setImplementation(implementation_);\n    _protocol = IHookProtocol(hookProtocol);\n    _role = upgraderRole;\n  }\n\n  /// @dev Throws if called by any account other than the owner.\n  modifier onlyOwner() {\n    require(\n      _protocol.hasRole(_role, msg.sender),\n      \"HookUpgradeableBeacon: caller does not have the required upgrade permissions\"\n    );\n    _;\n  }\n\n  /// @dev Returns the current implementation address.\n  function implementation() external view virtual override returns (address) {\n    return _implementation;\n  }\n\n  /// @dev Upgrades the beacon to a new implementation.\n  ///\n  /// Emits an {Upgraded} event.\n  ///\n  /// Requirements:\n  ///\n  /// - msg.sender must be the owner of the contract.\n  /// - `newImplementation` must be a contract.\n  function upgradeTo(address newImplementation) external virtual onlyOwner {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /// @dev Sets the implementation contract address for this beacon\n  ///\n  /// Requirements:\n  ///\n  /// - `newImplementation` must be a contract.\n  function _setImplementation(address newImplementation) private {\n    require(\n      Address.isContract(newImplementation),\n      \"UpgradeableBeacon: implementation is not a contract\"\n    );\n    _implementation = newImplementation;\n  }\n}\n"
    },
    "src/test/utils/mocks/FlashLoan.sol": {
      "content": "pragma solidity ^0.8.10;\n\nimport \"src/interfaces/IERC721FlashLoanReceiver.sol\";\nimport \"../tokens/TestERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract FlashLoanSuccess is IERC721FlashLoanReceiver {\n  constructor() {}\n\n  function executeOperation(\n    address nftContract,\n    uint256 tokenId,\n    address,\n    address vault,\n    bytes calldata\n  ) external returns (bool) {\n    IERC721(nftContract).approve(vault, tokenId);\n    return IERC721(nftContract).ownerOf(tokenId) == address(this);\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) public pure override returns (bytes4) {\n    return IERC721Receiver.onERC721Received.selector;\n  }\n}\n\ncontract FlashLoanDoesNotApprove is IERC721FlashLoanReceiver {\n  constructor() {}\n\n  function executeOperation(\n    address nftContract,\n    uint256 tokenId,\n    address,\n    address,\n    bytes calldata\n  ) external view returns (bool) {\n    // skip this:\n    // IERC721(nftContract).approve(vault, tokenId);\n    return IERC721(nftContract).ownerOf(tokenId) == address(this);\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) public pure override returns (bytes4) {\n    return IERC721Receiver.onERC721Received.selector;\n  }\n}\n\ncontract FlashLoanReturnsFalse is IERC721FlashLoanReceiver {\n  constructor() {}\n\n  function executeOperation(\n    address nftContract,\n    uint256 tokenId,\n    address,\n    address vault,\n    bytes calldata\n  ) external returns (bool) {\n    IERC721(nftContract).approve(vault, tokenId);\n    return false;\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) public pure override returns (bytes4) {\n    return IERC721Receiver.onERC721Received.selector;\n  }\n}\n\ncontract FlashLoanApproveForAll is IERC721FlashLoanReceiver {\n  constructor() {}\n\n  function executeOperation(\n    address nftContract,\n    uint256 tokenId,\n    address,\n    address vault,\n    bytes calldata\n  ) external returns (bool) {\n    IERC721(nftContract).setApprovalForAll(vault, true);\n    return IERC721(nftContract).ownerOf(tokenId) == address(this);\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) public pure override returns (bytes4) {\n    return IERC721Receiver.onERC721Received.selector;\n  }\n}\n\ncontract FlashLoanBurnsAsset is IERC721FlashLoanReceiver {\n  constructor() {}\n\n  function executeOperation(\n    address nftContract,\n    uint256 tokenId,\n    address,\n    address vault,\n    bytes calldata\n  ) external returns (bool) {\n    IERC721(nftContract).setApprovalForAll(vault, true);\n    TestERC721(nftContract).burn(tokenId);\n    return true;\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) public pure override returns (bytes4) {\n    return IERC721Receiver.onERC721Received.selector;\n  }\n}\n\ncontract FlashLoanVerifyCalldata is IERC721FlashLoanReceiver {\n  constructor() {}\n\n  function executeOperation(\n    address nftContract,\n    uint256,\n    address,\n    address vault,\n    bytes calldata params\n  ) external returns (bool) {\n    require(\n      keccak256(params) == keccak256(\"hello world\"),\n      \"should check helloworld\"\n    );\n    IERC721(nftContract).setApprovalForAll(vault, true);\n    return true;\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) public pure override returns (bytes4) {\n    return IERC721Receiver.onERC721Received.selector;\n  }\n}\n"
    },
    "src/HookCoveredCallFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\nimport \"./interfaces/IHookCoveredCallFactory.sol\";\nimport \"./interfaces/IHookProtocol.sol\";\n\nimport \"./interfaces/IInitializeableBeacon.sol\";\nimport \"./HookBeaconProxy.sol\";\n\nimport \"./mixin/PermissionConstants.sol\";\n\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\n\n/// @dev See {IHookCoveredCallFactory}.\n/// @dev Operating the factory requires specific permissions within the protocol.\ncontract HookCoveredCallFactory is\n  PermissionConstants,\n  IHookCoveredCallFactory\n{\n  /// @notice Registry of all of the active markets projects with supported call instruments\n  mapping(address => address) public override getCallInstrument;\n\n  address private _beacon;\n  IHookProtocol private _protocol;\n  address private _preApprovedMarketplace;\n\n  /// @dev there is only one instance of this contract, so the constructor is called exactly once.\n  /// @param hookProtocolAddress the address of the deployed HookProtocol contract on this network\n  /// @param beaconAddress the address of the deployed beacon pointing to the current covered call implementation\n  /// @param preApprovedMarketplace the address of a marketplace to automatically approve to transfer instruments\n  constructor(\n    address hookProtocolAddress,\n    address beaconAddress,\n    address preApprovedMarketplace\n  ) {\n    _beacon = beaconAddress;\n    _protocol = IHookProtocol(hookProtocolAddress);\n    _preApprovedMarketplace = preApprovedMarketplace;\n  }\n\n  /// @dev See {IHookCoveredCallFactory-makeCallInstrument}.\n  /// @dev Only the admin can create these addresses.\n  function makeCallInstrument(address assetAddress)\n    external\n    returns (address calls)\n  {\n    require(\n      getCallInstrument[assetAddress] == address(0),\n      \"makeCallInstrument -- a call instrument already exists\"\n    );\n    // make sure new instruments created by admins or the role\n    // has been burned\n    require(\n      _protocol.hasRole(ALLOWLISTER_ROLE, msg.sender) ||\n        _protocol.hasRole(ALLOWLISTER_ROLE, address(0)),\n      \"makeCallInstrument -- Only admins can make instruments\"\n    );\n\n    IInitializeableBeacon bp = IInitializeableBeacon(\n      Create2.deploy(\n        0,\n        _callInstrumentSalt(assetAddress),\n        type(HookBeaconProxy).creationCode\n      )\n    );\n\n    bp.initializeBeacon(\n      _beacon,\n      /// This is the ABI encoded initializer on the IHookERC721Vault.sol\n      abi.encodeWithSignature(\n        \"initialize(address,address,address,address)\",\n        _protocol,\n        assetAddress,\n        _protocol.vaultContract(),\n        _preApprovedMarketplace\n      )\n    );\n\n    getCallInstrument[assetAddress] = address(bp);\n\n    emit CoveredCallInstrumentCreated(\n      assetAddress,\n      getCallInstrument[assetAddress]\n    );\n\n    return getCallInstrument[assetAddress];\n  }\n\n  function _callInstrumentSalt(address underlyingAddress)\n    internal\n    pure\n    returns (bytes32)\n  {\n    return keccak256(abi.encode(underlyingAddress));\n  }\n}\n"
    },
    "src/interfaces/IHookCoveredCallFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        █████████████▌                                        ▐█████████████\n//        ██████████████                                        ██████████████\n//        ██████████████          ▄▄████████████████▄▄         ▐█████████████▌\n//        ██████████████    ▄█████████████████████████████▄    ██████████████\n//         ██████████▀   ▄█████████████████████████████████   ██████████████▌\n//          ██████▀   ▄██████████████████████████████████▀  ▄███████████████\n//           ███▀   ██████████████████████████████████▀   ▄████████████████\n//            ▀▀  ████████████████████████████████▀▀   ▄█████████████████▌\n//              █████████████████████▀▀▀▀▀▀▀      ▄▄███████████████████▀\n//             ██████████████████▀    ▄▄▄█████████████████████████████▀\n//            ████████████████▀   ▄█████████████████████████████████▀  ██▄\n//          ▐███████████████▀  ▄██████████████████████████████████▀   █████▄\n//          ██████████████▀  ▄█████████████████████████████████▀   ▄████████\n//         ██████████████▀   ███████████████████████████████▀   ▄████████████\n//        ▐█████████████▌     ▀▀▀▀████████████████████▀▀▀▀      █████████████▌\n//        ██████████████                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n//        █████████████▌                                        ██████████████\n\npragma solidity ^0.8.10;\n\n/// @title HookCoveredCallFactory -- factory for instances of the Covered Call contract\n/// @author Jake Nyquist -- j@hook.xyz\n/// @notice The Factory creates covered call instruments that support specific ERC-721 contracts, and\n/// also tracks all of the existing active markets.\ninterface IHookCoveredCallFactory {\n  /// @dev emitted whenever a new call instrument instance is created\n  /// @param assetAddress the address of the asset underlying the covered call\n  /// @param instrumentAddress the address of the covered call instrument\n  event CoveredCallInstrumentCreated(\n    address assetAddress,\n    address instrumentAddress\n  );\n\n  /// @notice Lookup the call instrument contract based on the asset address\n  /// @param assetAddress the contract address for the underlying asset\n  /// @return calls the address of the instrument contract\n  function getCallInstrument(address assetAddress)\n    external\n    view\n    returns (address calls);\n\n  /// @notice Create a call option instrument for a specific underlying asset address\n  /// @param assetAddress the address for the underling asset\n  /// @return calls the address of the call option instrument contract (upgradeable)\n  function makeCallInstrument(address assetAddress)\n    external\n    returns (address calls);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}