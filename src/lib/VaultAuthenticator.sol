pragma solidity ^0.8.10;

import "../interfaces/IHookERC721Vault.sol";
import "./BeaconSalts.sol";
import "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol";
import "@openzeppelin/contracts/utils/Create2.sol";

// Library to authenticate that a specific vault is authentically generated by Hook protocol.
library VaultAuthenticator {
    function isHookERC721Vault(address vaultFactory, address underlyingAddress, address vaultAddress, uint32 assetId)
        public
        view
        returns (bool)
    {
        if (
            vaultAddress
                == Create2.computeAddress(
                    BeaconSalts.multiVaultSalt(underlyingAddress), BeaconSalts.ByteCodeHash, address(vaultFactory)
                )
        ) {
            return true;
        }

        try IHookERC721Vault(vaultAddress).assetTokenId(assetId) returns (uint256 _tokenId) {
            if (
                vaultAddress
                    == Create2.computeAddress(
                        BeaconSalts.soloVaultSalt(underlyingAddress, _tokenId),
                        BeaconSalts.ByteCodeHash,
                        address(vaultFactory)
                    )
            ) {
                return true;
            }
        } catch (bytes memory) {
            return false;
        }

        return false;
    }

    function isHookERC20Vault(address vaultFactory, address tokenAddress, address vaultAddress)
        public
        view
        returns (bool)
    {
        if (
            vaultAddress
                == Create2.computeAddress(
                    BeaconSalts.erc20VaultSalt(tokenAddress), BeaconSalts.ByteCodeHash, address(vaultFactory)
                )
        ) {
            return true;
        }
        return false;
    }
}
